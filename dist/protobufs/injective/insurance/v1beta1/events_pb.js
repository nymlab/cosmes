// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/insurance/v1beta1/events.proto (package injective.insurance.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { InsuranceFund, RedemptionSchedule } from "./insurance_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * @generated from message injective.insurance.v1beta1.EventInsuranceFundUpdate
 */
export class EventInsuranceFundUpdate extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventInsuranceFundUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventInsuranceFundUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventInsuranceFundUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventInsuranceFundUpdate, a, b);
    }
}
EventInsuranceFundUpdate.runtime = proto3;
EventInsuranceFundUpdate.typeName = "injective.insurance.v1beta1.EventInsuranceFundUpdate";
EventInsuranceFundUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "fund", kind: "message", T: InsuranceFund },
]);
/**
 * @generated from message injective.insurance.v1beta1.EventRequestRedemption
 */
export class EventRequestRedemption extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventRequestRedemption().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventRequestRedemption().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventRequestRedemption().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventRequestRedemption, a, b);
    }
}
EventRequestRedemption.runtime = proto3;
EventRequestRedemption.typeName = "injective.insurance.v1beta1.EventRequestRedemption";
EventRequestRedemption.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: RedemptionSchedule },
]);
/**
 * @generated from message injective.insurance.v1beta1.EventWithdrawRedemption
 */
export class EventWithdrawRedemption extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventWithdrawRedemption().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventWithdrawRedemption().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventWithdrawRedemption().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventWithdrawRedemption, a, b);
    }
}
EventWithdrawRedemption.runtime = proto3;
EventWithdrawRedemption.typeName = "injective.insurance.v1beta1.EventWithdrawRedemption";
EventWithdrawRedemption.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: RedemptionSchedule },
    { no: 2, name: "redeem_coin", kind: "message", T: Coin },
]);
/**
 * @generated from message injective.insurance.v1beta1.EventUnderwrite
 */
export class EventUnderwrite extends Message {
    constructor(data) {
        super();
        /**
         * address of the underwriter
         *
         * @generated from field: string underwriter = 1;
         */
        this.underwriter = "";
        /**
         * marketId of insurance fund for the redemption
         *
         * @generated from field: string marketId = 2;
         */
        this.marketId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventUnderwrite().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventUnderwrite().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventUnderwrite().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventUnderwrite, a, b);
    }
}
EventUnderwrite.runtime = proto3;
EventUnderwrite.typeName = "injective.insurance.v1beta1.EventUnderwrite";
EventUnderwrite.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "underwriter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "marketId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deposit", kind: "message", T: Coin },
    { no: 4, name: "shares", kind: "message", T: Coin },
]);
/**
 * @generated from message injective.insurance.v1beta1.EventInsuranceWithdraw
 */
export class EventInsuranceWithdraw extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: string market_ticker = 2;
         */
        this.marketTicker = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventInsuranceWithdraw().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventInsuranceWithdraw().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventInsuranceWithdraw().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventInsuranceWithdraw, a, b);
    }
}
EventInsuranceWithdraw.runtime = proto3;
EventInsuranceWithdraw.typeName = "injective.insurance.v1beta1.EventInsuranceWithdraw";
EventInsuranceWithdraw.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "withdrawal", kind: "message", T: Coin },
]);
//# sourceMappingURL=events_pb.js.map