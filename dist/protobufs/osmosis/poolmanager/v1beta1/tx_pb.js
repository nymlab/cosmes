// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/poolmanager/v1beta1/tx.proto (package osmosis.poolmanager.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { SwapAmountInRoute, SwapAmountInSplitRoute, SwapAmountOutRoute, SwapAmountOutSplitRoute } from "./swap_route_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * ===================== MsgSwapExactAmountIn
 *
 * @generated from message osmosis.poolmanager.v1beta1.MsgSwapExactAmountIn
 */
export class MsgSwapExactAmountIn extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: repeated osmosis.poolmanager.v1beta1.SwapAmountInRoute routes = 2;
         */
        this.routes = [];
        /**
         * @generated from field: string token_out_min_amount = 4;
         */
        this.tokenOutMinAmount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSwapExactAmountIn().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSwapExactAmountIn().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSwapExactAmountIn().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSwapExactAmountIn, a, b);
    }
}
MsgSwapExactAmountIn.runtime = proto3;
MsgSwapExactAmountIn.typeName = "osmosis.poolmanager.v1beta1.MsgSwapExactAmountIn";
MsgSwapExactAmountIn.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "routes", kind: "message", T: SwapAmountInRoute, repeated: true },
    { no: 3, name: "token_in", kind: "message", T: Coin },
    { no: 4, name: "token_out_min_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.poolmanager.v1beta1.MsgSwapExactAmountInResponse
 */
export class MsgSwapExactAmountInResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string token_out_amount = 1;
         */
        this.tokenOutAmount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSwapExactAmountInResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSwapExactAmountInResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSwapExactAmountInResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSwapExactAmountInResponse, a, b);
    }
}
MsgSwapExactAmountInResponse.runtime = proto3;
MsgSwapExactAmountInResponse.typeName = "osmosis.poolmanager.v1beta1.MsgSwapExactAmountInResponse";
MsgSwapExactAmountInResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "token_out_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ===================== MsgSplitRouteSwapExactAmountIn
 *
 * @generated from message osmosis.poolmanager.v1beta1.MsgSplitRouteSwapExactAmountIn
 */
export class MsgSplitRouteSwapExactAmountIn extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: repeated osmosis.poolmanager.v1beta1.SwapAmountInSplitRoute routes = 2;
         */
        this.routes = [];
        /**
         * @generated from field: string token_in_denom = 3;
         */
        this.tokenInDenom = "";
        /**
         * @generated from field: string token_out_min_amount = 4;
         */
        this.tokenOutMinAmount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSplitRouteSwapExactAmountIn().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSplitRouteSwapExactAmountIn().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSplitRouteSwapExactAmountIn().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSplitRouteSwapExactAmountIn, a, b);
    }
}
MsgSplitRouteSwapExactAmountIn.runtime = proto3;
MsgSplitRouteSwapExactAmountIn.typeName = "osmosis.poolmanager.v1beta1.MsgSplitRouteSwapExactAmountIn";
MsgSplitRouteSwapExactAmountIn.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "routes", kind: "message", T: SwapAmountInSplitRoute, repeated: true },
    { no: 3, name: "token_in_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token_out_min_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.poolmanager.v1beta1.MsgSplitRouteSwapExactAmountInResponse
 */
export class MsgSplitRouteSwapExactAmountInResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string token_out_amount = 1;
         */
        this.tokenOutAmount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSplitRouteSwapExactAmountInResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSplitRouteSwapExactAmountInResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSplitRouteSwapExactAmountInResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSplitRouteSwapExactAmountInResponse, a, b);
    }
}
MsgSplitRouteSwapExactAmountInResponse.runtime = proto3;
MsgSplitRouteSwapExactAmountInResponse.typeName = "osmosis.poolmanager.v1beta1.MsgSplitRouteSwapExactAmountInResponse";
MsgSplitRouteSwapExactAmountInResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "token_out_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ===================== MsgSwapExactAmountOut
 *
 * @generated from message osmosis.poolmanager.v1beta1.MsgSwapExactAmountOut
 */
export class MsgSwapExactAmountOut extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: repeated osmosis.poolmanager.v1beta1.SwapAmountOutRoute routes = 2;
         */
        this.routes = [];
        /**
         * @generated from field: string token_in_max_amount = 3;
         */
        this.tokenInMaxAmount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSwapExactAmountOut().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSwapExactAmountOut().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSwapExactAmountOut().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSwapExactAmountOut, a, b);
    }
}
MsgSwapExactAmountOut.runtime = proto3;
MsgSwapExactAmountOut.typeName = "osmosis.poolmanager.v1beta1.MsgSwapExactAmountOut";
MsgSwapExactAmountOut.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "routes", kind: "message", T: SwapAmountOutRoute, repeated: true },
    { no: 3, name: "token_in_max_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token_out", kind: "message", T: Coin },
]);
/**
 * @generated from message osmosis.poolmanager.v1beta1.MsgSwapExactAmountOutResponse
 */
export class MsgSwapExactAmountOutResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string token_in_amount = 1;
         */
        this.tokenInAmount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSwapExactAmountOutResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSwapExactAmountOutResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSwapExactAmountOutResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSwapExactAmountOutResponse, a, b);
    }
}
MsgSwapExactAmountOutResponse.runtime = proto3;
MsgSwapExactAmountOutResponse.typeName = "osmosis.poolmanager.v1beta1.MsgSwapExactAmountOutResponse";
MsgSwapExactAmountOutResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "token_in_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ===================== MsgSplitRouteSwapExactAmountOut
 *
 * @generated from message osmosis.poolmanager.v1beta1.MsgSplitRouteSwapExactAmountOut
 */
export class MsgSplitRouteSwapExactAmountOut extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: repeated osmosis.poolmanager.v1beta1.SwapAmountOutSplitRoute routes = 2;
         */
        this.routes = [];
        /**
         * @generated from field: string token_out_denom = 3;
         */
        this.tokenOutDenom = "";
        /**
         * @generated from field: string token_in_max_amount = 4;
         */
        this.tokenInMaxAmount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSplitRouteSwapExactAmountOut().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSplitRouteSwapExactAmountOut().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSplitRouteSwapExactAmountOut().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSplitRouteSwapExactAmountOut, a, b);
    }
}
MsgSplitRouteSwapExactAmountOut.runtime = proto3;
MsgSplitRouteSwapExactAmountOut.typeName = "osmosis.poolmanager.v1beta1.MsgSplitRouteSwapExactAmountOut";
MsgSplitRouteSwapExactAmountOut.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "routes", kind: "message", T: SwapAmountOutSplitRoute, repeated: true },
    { no: 3, name: "token_out_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token_in_max_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.poolmanager.v1beta1.MsgSplitRouteSwapExactAmountOutResponse
 */
export class MsgSplitRouteSwapExactAmountOutResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string token_in_amount = 1;
         */
        this.tokenInAmount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSplitRouteSwapExactAmountOutResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSplitRouteSwapExactAmountOutResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSplitRouteSwapExactAmountOutResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSplitRouteSwapExactAmountOutResponse, a, b);
    }
}
MsgSplitRouteSwapExactAmountOutResponse.runtime = proto3;
MsgSplitRouteSwapExactAmountOutResponse.typeName = "osmosis.poolmanager.v1beta1.MsgSplitRouteSwapExactAmountOutResponse";
MsgSplitRouteSwapExactAmountOutResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "token_in_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ===================== MsgSetDenomPairTakerFee
 *
 * @generated from message osmosis.poolmanager.v1beta1.MsgSetDenomPairTakerFee
 */
export class MsgSetDenomPairTakerFee extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: repeated osmosis.poolmanager.v1beta1.DenomPairTakerFee denom_pair_taker_fee = 2;
         */
        this.denomPairTakerFee = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSetDenomPairTakerFee().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSetDenomPairTakerFee().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSetDenomPairTakerFee().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSetDenomPairTakerFee, a, b);
    }
}
MsgSetDenomPairTakerFee.runtime = proto3;
MsgSetDenomPairTakerFee.typeName = "osmosis.poolmanager.v1beta1.MsgSetDenomPairTakerFee";
MsgSetDenomPairTakerFee.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom_pair_taker_fee", kind: "message", T: DenomPairTakerFee, repeated: true },
]);
/**
 * @generated from message osmosis.poolmanager.v1beta1.MsgSetDenomPairTakerFeeResponse
 */
export class MsgSetDenomPairTakerFeeResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool success = 1;
         */
        this.success = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSetDenomPairTakerFeeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSetDenomPairTakerFeeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSetDenomPairTakerFeeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSetDenomPairTakerFeeResponse, a, b);
    }
}
MsgSetDenomPairTakerFeeResponse.runtime = proto3;
MsgSetDenomPairTakerFeeResponse.typeName = "osmosis.poolmanager.v1beta1.MsgSetDenomPairTakerFeeResponse";
MsgSetDenomPairTakerFeeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message osmosis.poolmanager.v1beta1.DenomPairTakerFee
 */
export class DenomPairTakerFee extends Message {
    constructor(data) {
        super();
        /**
         * denom0 and denom1 get automatically lexigographically sorted
         * when being stored, so the order of input here does not matter.
         *
         * @generated from field: string denom0 = 1;
         */
        this.denom0 = "";
        /**
         * @generated from field: string denom1 = 2;
         */
        this.denom1 = "";
        /**
         * @generated from field: string taker_fee = 3;
         */
        this.takerFee = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DenomPairTakerFee().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DenomPairTakerFee().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DenomPairTakerFee().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DenomPairTakerFee, a, b);
    }
}
DenomPairTakerFee.runtime = proto3;
DenomPairTakerFee.typeName = "osmosis.poolmanager.v1beta1.DenomPairTakerFee";
DenomPairTakerFee.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "taker_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=tx_pb.js.map