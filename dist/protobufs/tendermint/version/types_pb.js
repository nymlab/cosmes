// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file tendermint/version/types.proto (package tendermint.version, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * App includes the protocol and software version for the application.
 * This information is included in ResponseInfo. The App.Protocol can be
 * updated in ResponseEndBlock.
 *
 * @generated from message tendermint.version.App
 */
export class App extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 protocol = 1;
         */
        this.protocol = protoInt64.zero;
        /**
         * @generated from field: string software = 2;
         */
        this.software = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new App().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new App().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new App().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(App, a, b);
    }
}
App.runtime = proto3;
App.typeName = "tendermint.version.App";
App.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "protocol", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "software", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Consensus captures the consensus rules for processing a block in the blockchain,
 * including all blockchain data structures and the rules of the application's
 * state transition machine.
 *
 * @generated from message tendermint.version.Consensus
 */
export class Consensus extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 block = 1;
         */
        this.block = protoInt64.zero;
        /**
         * @generated from field: uint64 app = 2;
         */
        this.app = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Consensus().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Consensus().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Consensus().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Consensus, a, b);
    }
}
Consensus.runtime = proto3;
Consensus.typeName = "tendermint.version.Consensus";
Consensus.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "app", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
//# sourceMappingURL=types_pb.js.map