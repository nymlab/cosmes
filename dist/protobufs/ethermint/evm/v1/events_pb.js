// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ethermint/evm/v1/events.proto (package ethermint.evm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * EventEthereumTx defines the event for an Ethereum transaction
 *
 * @generated from message ethermint.evm.v1.EventEthereumTx
 */
export class EventEthereumTx extends Message {
    constructor(data) {
        super();
        /**
         * amount
         *
         * @generated from field: string amount = 1;
         */
        this.amount = "";
        /**
         * eth_hash is the Ethereum hash of the transaction
         *
         * @generated from field: string eth_hash = 2;
         */
        this.ethHash = "";
        /**
         * index of the transaction in the block
         *
         * @generated from field: string index = 3;
         */
        this.index = "";
        /**
         * gas_used is the amount of gas used by the transaction
         *
         * @generated from field: string gas_used = 4;
         */
        this.gasUsed = "";
        /**
         * hash is the Tendermint hash of the transaction
         *
         * @generated from field: string hash = 5;
         */
        this.hash = "";
        /**
         * recipient of the transaction
         *
         * @generated from field: string recipient = 6;
         */
        this.recipient = "";
        /**
         * eth_tx_failed contains a VM error should it occur
         *
         * @generated from field: string eth_tx_failed = 7;
         */
        this.ethTxFailed = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventEthereumTx().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventEthereumTx().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventEthereumTx().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventEthereumTx, a, b);
    }
}
EventEthereumTx.runtime = proto3;
EventEthereumTx.typeName = "ethermint.evm.v1.EventEthereumTx";
EventEthereumTx.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "eth_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "gas_used", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "eth_tx_failed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * EventTxLog defines the event for an Ethereum transaction log
 *
 * @generated from message ethermint.evm.v1.EventTxLog
 */
export class EventTxLog extends Message {
    constructor(data) {
        super();
        /**
         * tx_logs is an array of transaction logs
         *
         * @generated from field: repeated string tx_logs = 1;
         */
        this.txLogs = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventTxLog().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventTxLog().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventTxLog().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventTxLog, a, b);
    }
}
EventTxLog.runtime = proto3;
EventTxLog.typeName = "ethermint.evm.v1.EventTxLog";
EventTxLog.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_logs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * EventMessage
 *
 * @generated from message ethermint.evm.v1.EventMessage
 */
export class EventMessage extends Message {
    constructor(data) {
        super();
        /**
         * module which emits the event
         *
         * @generated from field: string module = 1;
         */
        this.module = "";
        /**
         * sender of the message
         *
         * @generated from field: string sender = 2;
         */
        this.sender = "";
        /**
         * tx_type is the type of the message
         *
         * @generated from field: string tx_type = 3;
         */
        this.txType = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventMessage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventMessage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventMessage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventMessage, a, b);
    }
}
EventMessage.runtime = proto3;
EventMessage.typeName = "ethermint.evm.v1.EventMessage";
EventMessage.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tx_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * EventBlockBloom defines an Ethereum block bloom filter event
 *
 * @generated from message ethermint.evm.v1.EventBlockBloom
 */
export class EventBlockBloom extends Message {
    constructor(data) {
        super();
        /**
         * bloom is the bloom filter of the block
         *
         * @generated from field: string bloom = 1;
         */
        this.bloom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventBlockBloom().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventBlockBloom().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventBlockBloom().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventBlockBloom, a, b);
    }
}
EventBlockBloom.runtime = proto3;
EventBlockBloom.typeName = "ethermint.evm.v1.EventBlockBloom";
EventBlockBloom.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "bloom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=events_pb.js.map