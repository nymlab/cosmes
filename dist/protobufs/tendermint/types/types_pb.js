// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file tendermint/types/types.proto (package tendermint.types, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Proof } from "../crypto/proof_pb.js";
import { Consensus } from "../version/types_pb.js";
import { ValidatorSet } from "./validator_pb.js";
/**
 * BlockIdFlag indicates which BlcokID the signature is for
 *
 * @generated from enum tendermint.types.BlockIDFlag
 */
export var BlockIDFlag;
(function (BlockIDFlag) {
    /**
     * @generated from enum value: BLOCK_ID_FLAG_UNKNOWN = 0;
     */
    BlockIDFlag[BlockIDFlag["BLOCK_ID_FLAG_UNKNOWN"] = 0] = "BLOCK_ID_FLAG_UNKNOWN";
    /**
     * @generated from enum value: BLOCK_ID_FLAG_ABSENT = 1;
     */
    BlockIDFlag[BlockIDFlag["BLOCK_ID_FLAG_ABSENT"] = 1] = "BLOCK_ID_FLAG_ABSENT";
    /**
     * @generated from enum value: BLOCK_ID_FLAG_COMMIT = 2;
     */
    BlockIDFlag[BlockIDFlag["BLOCK_ID_FLAG_COMMIT"] = 2] = "BLOCK_ID_FLAG_COMMIT";
    /**
     * @generated from enum value: BLOCK_ID_FLAG_NIL = 3;
     */
    BlockIDFlag[BlockIDFlag["BLOCK_ID_FLAG_NIL"] = 3] = "BLOCK_ID_FLAG_NIL";
})(BlockIDFlag || (BlockIDFlag = {}));
// Retrieve enum metadata with: proto3.getEnumType(BlockIDFlag)
proto3.util.setEnumType(BlockIDFlag, "tendermint.types.BlockIDFlag", [
    { no: 0, name: "BLOCK_ID_FLAG_UNKNOWN" },
    { no: 1, name: "BLOCK_ID_FLAG_ABSENT" },
    { no: 2, name: "BLOCK_ID_FLAG_COMMIT" },
    { no: 3, name: "BLOCK_ID_FLAG_NIL" },
]);
/**
 * SignedMsgType is a type of signed message in the consensus.
 *
 * @generated from enum tendermint.types.SignedMsgType
 */
export var SignedMsgType;
(function (SignedMsgType) {
    /**
     * @generated from enum value: SIGNED_MSG_TYPE_UNKNOWN = 0;
     */
    SignedMsgType[SignedMsgType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * Votes
     *
     * @generated from enum value: SIGNED_MSG_TYPE_PREVOTE = 1;
     */
    SignedMsgType[SignedMsgType["PREVOTE"] = 1] = "PREVOTE";
    /**
     * @generated from enum value: SIGNED_MSG_TYPE_PRECOMMIT = 2;
     */
    SignedMsgType[SignedMsgType["PRECOMMIT"] = 2] = "PRECOMMIT";
    /**
     * Proposals
     *
     * @generated from enum value: SIGNED_MSG_TYPE_PROPOSAL = 32;
     */
    SignedMsgType[SignedMsgType["PROPOSAL"] = 32] = "PROPOSAL";
})(SignedMsgType || (SignedMsgType = {}));
// Retrieve enum metadata with: proto3.getEnumType(SignedMsgType)
proto3.util.setEnumType(SignedMsgType, "tendermint.types.SignedMsgType", [
    { no: 0, name: "SIGNED_MSG_TYPE_UNKNOWN" },
    { no: 1, name: "SIGNED_MSG_TYPE_PREVOTE" },
    { no: 2, name: "SIGNED_MSG_TYPE_PRECOMMIT" },
    { no: 32, name: "SIGNED_MSG_TYPE_PROPOSAL" },
]);
/**
 * PartsetHeader
 *
 * @generated from message tendermint.types.PartSetHeader
 */
export class PartSetHeader extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 total = 1;
         */
        this.total = 0;
        /**
         * @generated from field: bytes hash = 2;
         */
        this.hash = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PartSetHeader().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PartSetHeader().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PartSetHeader().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PartSetHeader, a, b);
    }
}
PartSetHeader.runtime = proto3;
PartSetHeader.typeName = "tendermint.types.PartSetHeader";
PartSetHeader.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message tendermint.types.Part
 */
export class Part extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 index = 1;
         */
        this.index = 0;
        /**
         * @generated from field: bytes bytes = 2;
         */
        this.bytes = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Part().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Part().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Part().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Part, a, b);
    }
}
Part.runtime = proto3;
Part.typeName = "tendermint.types.Part";
Part.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof", kind: "message", T: Proof },
]);
/**
 * BlockID
 *
 * @generated from message tendermint.types.BlockID
 */
export class BlockID extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes hash = 1;
         */
        this.hash = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BlockID().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BlockID().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BlockID().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BlockID, a, b);
    }
}
BlockID.runtime = proto3;
BlockID.typeName = "tendermint.types.BlockID";
BlockID.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "part_set_header", kind: "message", T: PartSetHeader },
]);
/**
 * Header defines the structure of a block header.
 *
 * @generated from message tendermint.types.Header
 */
export class Header extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string chain_id = 2;
         */
        this.chainId = "";
        /**
         * @generated from field: int64 height = 3;
         */
        this.height = protoInt64.zero;
        /**
         * hashes of block data
         *
         * commit from validators from the last block
         *
         * @generated from field: bytes last_commit_hash = 6;
         */
        this.lastCommitHash = new Uint8Array(0);
        /**
         * transactions
         *
         * @generated from field: bytes data_hash = 7;
         */
        this.dataHash = new Uint8Array(0);
        /**
         * hashes from the app output from the prev block
         *
         * validators for the current block
         *
         * @generated from field: bytes validators_hash = 8;
         */
        this.validatorsHash = new Uint8Array(0);
        /**
         * validators for the next block
         *
         * @generated from field: bytes next_validators_hash = 9;
         */
        this.nextValidatorsHash = new Uint8Array(0);
        /**
         * consensus params for current block
         *
         * @generated from field: bytes consensus_hash = 10;
         */
        this.consensusHash = new Uint8Array(0);
        /**
         * state after txs from the previous block
         *
         * @generated from field: bytes app_hash = 11;
         */
        this.appHash = new Uint8Array(0);
        /**
         * root hash of all results from the txs from the previous block
         *
         * @generated from field: bytes last_results_hash = 12;
         */
        this.lastResultsHash = new Uint8Array(0);
        /**
         * consensus info
         *
         * evidence included in the block
         *
         * @generated from field: bytes evidence_hash = 13;
         */
        this.evidenceHash = new Uint8Array(0);
        /**
         * original proposer of the block
         *
         * @generated from field: bytes proposer_address = 14;
         */
        this.proposerAddress = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Header().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Header().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Header().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Header, a, b);
    }
}
Header.runtime = proto3;
Header.typeName = "tendermint.types.Header";
Header.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "message", T: Consensus },
    { no: 2, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "time", kind: "message", T: Timestamp },
    { no: 5, name: "last_block_id", kind: "message", T: BlockID },
    { no: 6, name: "last_commit_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "data_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "validators_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "next_validators_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "consensus_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "app_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 12, name: "last_results_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 13, name: "evidence_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 14, name: "proposer_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * Data contains the set of transactions included in the block
 *
 * @generated from message tendermint.types.Data
 */
export class Data extends Message {
    constructor(data) {
        super();
        /**
         * Txs that will be applied by state @ block.Height+1.
         * NOTE: not all txs here are valid.  We're just agreeing on the order first.
         * This means that block.AppHash does not include these txs.
         *
         * @generated from field: repeated bytes txs = 1;
         */
        this.txs = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Data().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Data().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Data().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Data, a, b);
    }
}
Data.runtime = proto3;
Data.typeName = "tendermint.types.Data";
Data.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "txs", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
]);
/**
 * Vote represents a prevote, precommit, or commit vote from validators for
 * consensus.
 *
 * @generated from message tendermint.types.Vote
 */
export class Vote extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: tendermint.types.SignedMsgType type = 1;
         */
        this.type = SignedMsgType.UNKNOWN;
        /**
         * @generated from field: int64 height = 2;
         */
        this.height = protoInt64.zero;
        /**
         * @generated from field: int32 round = 3;
         */
        this.round = 0;
        /**
         * @generated from field: bytes validator_address = 6;
         */
        this.validatorAddress = new Uint8Array(0);
        /**
         * @generated from field: int32 validator_index = 7;
         */
        this.validatorIndex = 0;
        /**
         * @generated from field: bytes signature = 8;
         */
        this.signature = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Vote().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Vote().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Vote().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Vote, a, b);
    }
}
Vote.runtime = proto3;
Vote.typeName = "tendermint.types.Vote";
Vote.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(SignedMsgType) },
    { no: 2, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "block_id", kind: "message", T: BlockID },
    { no: 5, name: "timestamp", kind: "message", T: Timestamp },
    { no: 6, name: "validator_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "validator_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * Commit contains the evidence that a block was committed by a set of validators.
 *
 * @generated from message tendermint.types.Commit
 */
export class Commit extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 height = 1;
         */
        this.height = protoInt64.zero;
        /**
         * @generated from field: int32 round = 2;
         */
        this.round = 0;
        /**
         * @generated from field: repeated tendermint.types.CommitSig signatures = 4;
         */
        this.signatures = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Commit().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Commit().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Commit().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Commit, a, b);
    }
}
Commit.runtime = proto3;
Commit.typeName = "tendermint.types.Commit";
Commit.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "block_id", kind: "message", T: BlockID },
    { no: 4, name: "signatures", kind: "message", T: CommitSig, repeated: true },
]);
/**
 * CommitSig is a part of the Vote included in a Commit.
 *
 * @generated from message tendermint.types.CommitSig
 */
export class CommitSig extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: tendermint.types.BlockIDFlag block_id_flag = 1;
         */
        this.blockIdFlag = BlockIDFlag.BLOCK_ID_FLAG_UNKNOWN;
        /**
         * @generated from field: bytes validator_address = 2;
         */
        this.validatorAddress = new Uint8Array(0);
        /**
         * @generated from field: bytes signature = 4;
         */
        this.signature = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CommitSig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CommitSig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CommitSig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CommitSig, a, b);
    }
}
CommitSig.runtime = proto3;
CommitSig.typeName = "tendermint.types.CommitSig";
CommitSig.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "block_id_flag", kind: "enum", T: proto3.getEnumType(BlockIDFlag) },
    { no: 2, name: "validator_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
    { no: 4, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message tendermint.types.Proposal
 */
export class Proposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: tendermint.types.SignedMsgType type = 1;
         */
        this.type = SignedMsgType.UNKNOWN;
        /**
         * @generated from field: int64 height = 2;
         */
        this.height = protoInt64.zero;
        /**
         * @generated from field: int32 round = 3;
         */
        this.round = 0;
        /**
         * @generated from field: int32 pol_round = 4;
         */
        this.polRound = 0;
        /**
         * @generated from field: bytes signature = 7;
         */
        this.signature = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Proposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Proposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Proposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Proposal, a, b);
    }
}
Proposal.runtime = proto3;
Proposal.typeName = "tendermint.types.Proposal";
Proposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(SignedMsgType) },
    { no: 2, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "pol_round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "block_id", kind: "message", T: BlockID },
    { no: 6, name: "timestamp", kind: "message", T: Timestamp },
    { no: 7, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message tendermint.types.SignedHeader
 */
export class SignedHeader extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SignedHeader().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SignedHeader().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SignedHeader().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SignedHeader, a, b);
    }
}
SignedHeader.runtime = proto3;
SignedHeader.typeName = "tendermint.types.SignedHeader";
SignedHeader.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: Header },
    { no: 2, name: "commit", kind: "message", T: Commit },
]);
/**
 * @generated from message tendermint.types.LightBlock
 */
export class LightBlock extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LightBlock().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LightBlock().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LightBlock().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LightBlock, a, b);
    }
}
LightBlock.runtime = proto3;
LightBlock.typeName = "tendermint.types.LightBlock";
LightBlock.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "signed_header", kind: "message", T: SignedHeader },
    { no: 2, name: "validator_set", kind: "message", T: ValidatorSet },
]);
/**
 * @generated from message tendermint.types.BlockMeta
 */
export class BlockMeta extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 block_size = 2;
         */
        this.blockSize = protoInt64.zero;
        /**
         * @generated from field: int64 num_txs = 4;
         */
        this.numTxs = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BlockMeta().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BlockMeta().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BlockMeta().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BlockMeta, a, b);
    }
}
BlockMeta.runtime = proto3;
BlockMeta.typeName = "tendermint.types.BlockMeta";
BlockMeta.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "block_id", kind: "message", T: BlockID },
    { no: 2, name: "block_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "header", kind: "message", T: Header },
    { no: 4, name: "num_txs", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.
 *
 * @generated from message tendermint.types.TxProof
 */
export class TxProof extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes root_hash = 1;
         */
        this.rootHash = new Uint8Array(0);
        /**
         * @generated from field: bytes data = 2;
         */
        this.data = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TxProof().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TxProof().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TxProof().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TxProof, a, b);
    }
}
TxProof.runtime = proto3;
TxProof.typeName = "tendermint.types.TxProof";
TxProof.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "root_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof", kind: "message", T: Proof },
]);
//# sourceMappingURL=types_pb.js.map