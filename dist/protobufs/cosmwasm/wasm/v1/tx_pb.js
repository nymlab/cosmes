// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmwasm/wasm/v1/tx.proto (package cosmwasm.wasm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AccessConfig, Params } from "./types_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * MsgStoreCode submit Wasm code to the system
 *
 * @generated from message cosmwasm.wasm.v1.MsgStoreCode
 */
export class MsgStoreCode extends Message {
    constructor(data) {
        super();
        /**
         * Sender is the actor that signed the messages
         *
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * WASMByteCode can be raw or gzip compressed
         *
         * @generated from field: bytes wasm_byte_code = 2;
         */
        this.wasmByteCode = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgStoreCode().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgStoreCode().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgStoreCode().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgStoreCode, a, b);
    }
}
MsgStoreCode.runtime = proto3;
MsgStoreCode.typeName = "cosmwasm.wasm.v1.MsgStoreCode";
MsgStoreCode.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wasm_byte_code", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "instantiate_permission", kind: "message", T: AccessConfig },
]);
/**
 * MsgStoreCodeResponse returns store result data.
 *
 * @generated from message cosmwasm.wasm.v1.MsgStoreCodeResponse
 */
export class MsgStoreCodeResponse extends Message {
    constructor(data) {
        super();
        /**
         * CodeID is the reference to the stored WASM code
         *
         * @generated from field: uint64 code_id = 1;
         */
        this.codeId = protoInt64.zero;
        /**
         * Checksum is the sha256 hash of the stored code
         *
         * @generated from field: bytes checksum = 2;
         */
        this.checksum = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgStoreCodeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgStoreCodeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgStoreCodeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgStoreCodeResponse, a, b);
    }
}
MsgStoreCodeResponse.runtime = proto3;
MsgStoreCodeResponse.typeName = "cosmwasm.wasm.v1.MsgStoreCodeResponse";
MsgStoreCodeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "checksum", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgInstantiateContract create a new smart contract instance for the given
 * code id.
 *
 * @generated from message cosmwasm.wasm.v1.MsgInstantiateContract
 */
export class MsgInstantiateContract extends Message {
    constructor(data) {
        super();
        /**
         * Sender is the that actor that signed the messages
         *
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * Admin is an optional address that can execute migrations
         *
         * @generated from field: string admin = 2;
         */
        this.admin = "";
        /**
         * CodeID is the reference to the stored WASM code
         *
         * @generated from field: uint64 code_id = 3;
         */
        this.codeId = protoInt64.zero;
        /**
         * Label is optional metadata to be stored with a contract instance.
         *
         * @generated from field: string label = 4;
         */
        this.label = "";
        /**
         * Msg json encoded message to be passed to the contract on instantiation
         *
         * @generated from field: bytes msg = 5;
         */
        this.msg = new Uint8Array(0);
        /**
         * Funds coins that are transferred to the contract on instantiation
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 6;
         */
        this.funds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgInstantiateContract().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgInstantiateContract().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgInstantiateContract().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgInstantiateContract, a, b);
    }
}
MsgInstantiateContract.runtime = proto3;
MsgInstantiateContract.typeName = "cosmwasm.wasm.v1.MsgInstantiateContract";
MsgInstantiateContract.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "funds", kind: "message", T: Coin, repeated: true },
]);
/**
 * MsgInstantiateContractResponse return instantiation result data
 *
 * @generated from message cosmwasm.wasm.v1.MsgInstantiateContractResponse
 */
export class MsgInstantiateContractResponse extends Message {
    constructor(data) {
        super();
        /**
         * Address is the bech32 address of the new contract instance.
         *
         * @generated from field: string address = 1;
         */
        this.address = "";
        /**
         * Data contains bytes to returned from the contract
         *
         * @generated from field: bytes data = 2;
         */
        this.data = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgInstantiateContractResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgInstantiateContractResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgInstantiateContractResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgInstantiateContractResponse, a, b);
    }
}
MsgInstantiateContractResponse.runtime = proto3;
MsgInstantiateContractResponse.typeName = "cosmwasm.wasm.v1.MsgInstantiateContractResponse";
MsgInstantiateContractResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgInstantiateContract2 create a new smart contract instance for the given
 * code id with a predicable address.
 *
 * @generated from message cosmwasm.wasm.v1.MsgInstantiateContract2
 */
export class MsgInstantiateContract2 extends Message {
    constructor(data) {
        super();
        /**
         * Sender is the that actor that signed the messages
         *
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * Admin is an optional address that can execute migrations
         *
         * @generated from field: string admin = 2;
         */
        this.admin = "";
        /**
         * CodeID is the reference to the stored WASM code
         *
         * @generated from field: uint64 code_id = 3;
         */
        this.codeId = protoInt64.zero;
        /**
         * Label is optional metadata to be stored with a contract instance.
         *
         * @generated from field: string label = 4;
         */
        this.label = "";
        /**
         * Msg json encoded message to be passed to the contract on instantiation
         *
         * @generated from field: bytes msg = 5;
         */
        this.msg = new Uint8Array(0);
        /**
         * Funds coins that are transferred to the contract on instantiation
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 6;
         */
        this.funds = [];
        /**
         * Salt is an arbitrary value provided by the sender. Size can be 1 to 64.
         *
         * @generated from field: bytes salt = 7;
         */
        this.salt = new Uint8Array(0);
        /**
         * FixMsg include the msg value into the hash for the predictable address.
         * Default is false
         *
         * @generated from field: bool fix_msg = 8;
         */
        this.fixMsg = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgInstantiateContract2().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgInstantiateContract2().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgInstantiateContract2().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgInstantiateContract2, a, b);
    }
}
MsgInstantiateContract2.runtime = proto3;
MsgInstantiateContract2.typeName = "cosmwasm.wasm.v1.MsgInstantiateContract2";
MsgInstantiateContract2.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "funds", kind: "message", T: Coin, repeated: true },
    { no: 7, name: "salt", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "fix_msg", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * MsgInstantiateContract2Response return instantiation result data
 *
 * @generated from message cosmwasm.wasm.v1.MsgInstantiateContract2Response
 */
export class MsgInstantiateContract2Response extends Message {
    constructor(data) {
        super();
        /**
         * Address is the bech32 address of the new contract instance.
         *
         * @generated from field: string address = 1;
         */
        this.address = "";
        /**
         * Data contains bytes to returned from the contract
         *
         * @generated from field: bytes data = 2;
         */
        this.data = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgInstantiateContract2Response().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgInstantiateContract2Response().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgInstantiateContract2Response().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgInstantiateContract2Response, a, b);
    }
}
MsgInstantiateContract2Response.runtime = proto3;
MsgInstantiateContract2Response.typeName = "cosmwasm.wasm.v1.MsgInstantiateContract2Response";
MsgInstantiateContract2Response.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgExecuteContract submits the given message data to a smart contract
 *
 * @generated from message cosmwasm.wasm.v1.MsgExecuteContract
 */
export class MsgExecuteContract extends Message {
    constructor(data) {
        super();
        /**
         * Sender is the that actor that signed the messages
         *
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * Contract is the address of the smart contract
         *
         * @generated from field: string contract = 2;
         */
        this.contract = "";
        /**
         * Msg json encoded message to be passed to the contract
         *
         * @generated from field: bytes msg = 3;
         */
        this.msg = new Uint8Array(0);
        /**
         * Funds coins that are transferred to the contract on execution
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 5;
         */
        this.funds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgExecuteContract().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgExecuteContract().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgExecuteContract().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgExecuteContract, a, b);
    }
}
MsgExecuteContract.runtime = proto3;
MsgExecuteContract.typeName = "cosmwasm.wasm.v1.MsgExecuteContract";
MsgExecuteContract.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "funds", kind: "message", T: Coin, repeated: true },
]);
/**
 * MsgExecuteContractResponse returns execution result data.
 *
 * @generated from message cosmwasm.wasm.v1.MsgExecuteContractResponse
 */
export class MsgExecuteContractResponse extends Message {
    constructor(data) {
        super();
        /**
         * Data contains bytes to returned from the contract
         *
         * @generated from field: bytes data = 1;
         */
        this.data = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgExecuteContractResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgExecuteContractResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgExecuteContractResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgExecuteContractResponse, a, b);
    }
}
MsgExecuteContractResponse.runtime = proto3;
MsgExecuteContractResponse.typeName = "cosmwasm.wasm.v1.MsgExecuteContractResponse";
MsgExecuteContractResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgMigrateContract runs a code upgrade/ downgrade for a smart contract
 *
 * @generated from message cosmwasm.wasm.v1.MsgMigrateContract
 */
export class MsgMigrateContract extends Message {
    constructor(data) {
        super();
        /**
         * Sender is the that actor that signed the messages
         *
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * Contract is the address of the smart contract
         *
         * @generated from field: string contract = 2;
         */
        this.contract = "";
        /**
         * CodeID references the new WASM code
         *
         * @generated from field: uint64 code_id = 3;
         */
        this.codeId = protoInt64.zero;
        /**
         * Msg json encoded message to be passed to the contract on migration
         *
         * @generated from field: bytes msg = 4;
         */
        this.msg = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgMigrateContract().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgMigrateContract().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgMigrateContract().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgMigrateContract, a, b);
    }
}
MsgMigrateContract.runtime = proto3;
MsgMigrateContract.typeName = "cosmwasm.wasm.v1.MsgMigrateContract";
MsgMigrateContract.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgMigrateContractResponse returns contract migration result data.
 *
 * @generated from message cosmwasm.wasm.v1.MsgMigrateContractResponse
 */
export class MsgMigrateContractResponse extends Message {
    constructor(data) {
        super();
        /**
         * Data contains same raw bytes returned as data from the wasm contract.
         * (May be empty)
         *
         * @generated from field: bytes data = 1;
         */
        this.data = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgMigrateContractResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgMigrateContractResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgMigrateContractResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgMigrateContractResponse, a, b);
    }
}
MsgMigrateContractResponse.runtime = proto3;
MsgMigrateContractResponse.typeName = "cosmwasm.wasm.v1.MsgMigrateContractResponse";
MsgMigrateContractResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgUpdateAdmin sets a new admin for a smart contract
 *
 * @generated from message cosmwasm.wasm.v1.MsgUpdateAdmin
 */
export class MsgUpdateAdmin extends Message {
    constructor(data) {
        super();
        /**
         * Sender is the that actor that signed the messages
         *
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * NewAdmin address to be set
         *
         * @generated from field: string new_admin = 2;
         */
        this.newAdmin = "";
        /**
         * Contract is the address of the smart contract
         *
         * @generated from field: string contract = 3;
         */
        this.contract = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateAdmin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateAdmin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateAdmin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateAdmin, a, b);
    }
}
MsgUpdateAdmin.runtime = proto3;
MsgUpdateAdmin.typeName = "cosmwasm.wasm.v1.MsgUpdateAdmin";
MsgUpdateAdmin.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgUpdateAdminResponse returns empty data
 *
 * @generated from message cosmwasm.wasm.v1.MsgUpdateAdminResponse
 */
export class MsgUpdateAdminResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateAdminResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateAdminResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateAdminResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateAdminResponse, a, b);
    }
}
MsgUpdateAdminResponse.runtime = proto3;
MsgUpdateAdminResponse.typeName = "cosmwasm.wasm.v1.MsgUpdateAdminResponse";
MsgUpdateAdminResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgClearAdmin removes any admin stored for a smart contract
 *
 * @generated from message cosmwasm.wasm.v1.MsgClearAdmin
 */
export class MsgClearAdmin extends Message {
    constructor(data) {
        super();
        /**
         * Sender is the actor that signed the messages
         *
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * Contract is the address of the smart contract
         *
         * @generated from field: string contract = 3;
         */
        this.contract = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgClearAdmin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgClearAdmin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgClearAdmin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgClearAdmin, a, b);
    }
}
MsgClearAdmin.runtime = proto3;
MsgClearAdmin.typeName = "cosmwasm.wasm.v1.MsgClearAdmin";
MsgClearAdmin.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgClearAdminResponse returns empty data
 *
 * @generated from message cosmwasm.wasm.v1.MsgClearAdminResponse
 */
export class MsgClearAdminResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgClearAdminResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgClearAdminResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgClearAdminResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgClearAdminResponse, a, b);
    }
}
MsgClearAdminResponse.runtime = proto3;
MsgClearAdminResponse.typeName = "cosmwasm.wasm.v1.MsgClearAdminResponse";
MsgClearAdminResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgUpdateInstantiateConfig updates instantiate config for a smart contract
 *
 * @generated from message cosmwasm.wasm.v1.MsgUpdateInstantiateConfig
 */
export class MsgUpdateInstantiateConfig extends Message {
    constructor(data) {
        super();
        /**
         * Sender is the that actor that signed the messages
         *
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * CodeID references the stored WASM code
         *
         * @generated from field: uint64 code_id = 2;
         */
        this.codeId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateInstantiateConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateInstantiateConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateInstantiateConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateInstantiateConfig, a, b);
    }
}
MsgUpdateInstantiateConfig.runtime = proto3;
MsgUpdateInstantiateConfig.typeName = "cosmwasm.wasm.v1.MsgUpdateInstantiateConfig";
MsgUpdateInstantiateConfig.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "new_instantiate_permission", kind: "message", T: AccessConfig },
]);
/**
 * MsgUpdateInstantiateConfigResponse returns empty data
 *
 * @generated from message cosmwasm.wasm.v1.MsgUpdateInstantiateConfigResponse
 */
export class MsgUpdateInstantiateConfigResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateInstantiateConfigResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateInstantiateConfigResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateInstantiateConfigResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateInstantiateConfigResponse, a, b);
    }
}
MsgUpdateInstantiateConfigResponse.runtime = proto3;
MsgUpdateInstantiateConfigResponse.typeName = "cosmwasm.wasm.v1.MsgUpdateInstantiateConfigResponse";
MsgUpdateInstantiateConfigResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgUpdateParams is the MsgUpdateParams request type.
 *
 * Since: 0.40
 *
 * @generated from message cosmwasm.wasm.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message {
    constructor(data) {
        super();
        /**
         * Authority is the address of the governance account.
         *
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateParams, a, b);
    }
}
MsgUpdateParams.runtime = proto3;
MsgUpdateParams.typeName = "cosmwasm.wasm.v1.MsgUpdateParams";
MsgUpdateParams.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
]);
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: 0.40
 *
 * @generated from message cosmwasm.wasm.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateParamsResponse, a, b);
    }
}
MsgUpdateParamsResponse.runtime = proto3;
MsgUpdateParamsResponse.typeName = "cosmwasm.wasm.v1.MsgUpdateParamsResponse";
MsgUpdateParamsResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgSudoContract is the MsgSudoContract request type.
 *
 * Since: 0.40
 *
 * @generated from message cosmwasm.wasm.v1.MsgSudoContract
 */
export class MsgSudoContract extends Message {
    constructor(data) {
        super();
        /**
         * Authority is the address of the governance account.
         *
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        /**
         * Contract is the address of the smart contract
         *
         * @generated from field: string contract = 2;
         */
        this.contract = "";
        /**
         * Msg json encoded message to be passed to the contract as sudo
         *
         * @generated from field: bytes msg = 3;
         */
        this.msg = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSudoContract().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSudoContract().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSudoContract().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSudoContract, a, b);
    }
}
MsgSudoContract.runtime = proto3;
MsgSudoContract.typeName = "cosmwasm.wasm.v1.MsgSudoContract";
MsgSudoContract.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgSudoContractResponse defines the response structure for executing a
 * MsgSudoContract message.
 *
 * Since: 0.40
 *
 * @generated from message cosmwasm.wasm.v1.MsgSudoContractResponse
 */
export class MsgSudoContractResponse extends Message {
    constructor(data) {
        super();
        /**
         * Data contains bytes to returned from the contract
         *
         * @generated from field: bytes data = 1;
         */
        this.data = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSudoContractResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSudoContractResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSudoContractResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSudoContractResponse, a, b);
    }
}
MsgSudoContractResponse.runtime = proto3;
MsgSudoContractResponse.typeName = "cosmwasm.wasm.v1.MsgSudoContractResponse";
MsgSudoContractResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgPinCodes is the MsgPinCodes request type.
 *
 * Since: 0.40
 *
 * @generated from message cosmwasm.wasm.v1.MsgPinCodes
 */
export class MsgPinCodes extends Message {
    constructor(data) {
        super();
        /**
         * Authority is the address of the governance account.
         *
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        /**
         * CodeIDs references the new WASM codes
         *
         * @generated from field: repeated uint64 code_ids = 2;
         */
        this.codeIds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgPinCodes().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgPinCodes().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgPinCodes().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgPinCodes, a, b);
    }
}
MsgPinCodes.runtime = proto3;
MsgPinCodes.typeName = "cosmwasm.wasm.v1.MsgPinCodes";
MsgPinCodes.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
]);
/**
 * MsgPinCodesResponse defines the response structure for executing a
 * MsgPinCodes message.
 *
 * Since: 0.40
 *
 * @generated from message cosmwasm.wasm.v1.MsgPinCodesResponse
 */
export class MsgPinCodesResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgPinCodesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgPinCodesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgPinCodesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgPinCodesResponse, a, b);
    }
}
MsgPinCodesResponse.runtime = proto3;
MsgPinCodesResponse.typeName = "cosmwasm.wasm.v1.MsgPinCodesResponse";
MsgPinCodesResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgUnpinCodes is the MsgUnpinCodes request type.
 *
 * Since: 0.40
 *
 * @generated from message cosmwasm.wasm.v1.MsgUnpinCodes
 */
export class MsgUnpinCodes extends Message {
    constructor(data) {
        super();
        /**
         * Authority is the address of the governance account.
         *
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        /**
         * CodeIDs references the WASM codes
         *
         * @generated from field: repeated uint64 code_ids = 2;
         */
        this.codeIds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUnpinCodes().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUnpinCodes().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUnpinCodes().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUnpinCodes, a, b);
    }
}
MsgUnpinCodes.runtime = proto3;
MsgUnpinCodes.typeName = "cosmwasm.wasm.v1.MsgUnpinCodes";
MsgUnpinCodes.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
]);
/**
 * MsgUnpinCodesResponse defines the response structure for executing a
 * MsgUnpinCodes message.
 *
 * Since: 0.40
 *
 * @generated from message cosmwasm.wasm.v1.MsgUnpinCodesResponse
 */
export class MsgUnpinCodesResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUnpinCodesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUnpinCodesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUnpinCodesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUnpinCodesResponse, a, b);
    }
}
MsgUnpinCodesResponse.runtime = proto3;
MsgUnpinCodesResponse.typeName = "cosmwasm.wasm.v1.MsgUnpinCodesResponse";
MsgUnpinCodesResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgStoreAndInstantiateContract is the MsgStoreAndInstantiateContract
 * request type.
 *
 * Since: 0.40
 *
 * @generated from message cosmwasm.wasm.v1.MsgStoreAndInstantiateContract
 */
export class MsgStoreAndInstantiateContract extends Message {
    constructor(data) {
        super();
        /**
         * Authority is the address of the governance account.
         *
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        /**
         * WASMByteCode can be raw or gzip compressed
         *
         * @generated from field: bytes wasm_byte_code = 3;
         */
        this.wasmByteCode = new Uint8Array(0);
        /**
         * UnpinCode code on upload, optional. As default the uploaded contract is
         * pinned to cache.
         *
         * @generated from field: bool unpin_code = 5;
         */
        this.unpinCode = false;
        /**
         * Admin is an optional address that can execute migrations
         *
         * @generated from field: string admin = 6;
         */
        this.admin = "";
        /**
         * Label is optional metadata to be stored with a constract instance.
         *
         * @generated from field: string label = 7;
         */
        this.label = "";
        /**
         * Msg json encoded message to be passed to the contract on instantiation
         *
         * @generated from field: bytes msg = 8;
         */
        this.msg = new Uint8Array(0);
        /**
         * Funds coins that are transferred from the authority account to the contract
         * on instantiation
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 9;
         */
        this.funds = [];
        /**
         * Source is the URL where the code is hosted
         *
         * @generated from field: string source = 10;
         */
        this.source = "";
        /**
         * Builder is the docker image used to build the code deterministically, used
         * for smart contract verification
         *
         * @generated from field: string builder = 11;
         */
        this.builder = "";
        /**
         * CodeHash is the SHA256 sum of the code outputted by builder, used for smart
         * contract verification
         *
         * @generated from field: bytes code_hash = 12;
         */
        this.codeHash = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgStoreAndInstantiateContract().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgStoreAndInstantiateContract().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgStoreAndInstantiateContract().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgStoreAndInstantiateContract, a, b);
    }
}
MsgStoreAndInstantiateContract.runtime = proto3;
MsgStoreAndInstantiateContract.typeName = "cosmwasm.wasm.v1.MsgStoreAndInstantiateContract";
MsgStoreAndInstantiateContract.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "wasm_byte_code", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "instantiate_permission", kind: "message", T: AccessConfig },
    { no: 5, name: "unpin_code", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "funds", kind: "message", T: Coin, repeated: true },
    { no: 10, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "builder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "code_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgStoreAndInstantiateContractResponse defines the response structure
 * for executing a MsgStoreAndInstantiateContract message.
 *
 * Since: 0.40
 *
 * @generated from message cosmwasm.wasm.v1.MsgStoreAndInstantiateContractResponse
 */
export class MsgStoreAndInstantiateContractResponse extends Message {
    constructor(data) {
        super();
        /**
         * Address is the bech32 address of the new contract instance.
         *
         * @generated from field: string address = 1;
         */
        this.address = "";
        /**
         * Data contains bytes to returned from the contract
         *
         * @generated from field: bytes data = 2;
         */
        this.data = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgStoreAndInstantiateContractResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgStoreAndInstantiateContractResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgStoreAndInstantiateContractResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgStoreAndInstantiateContractResponse, a, b);
    }
}
MsgStoreAndInstantiateContractResponse.runtime = proto3;
MsgStoreAndInstantiateContractResponse.typeName = "cosmwasm.wasm.v1.MsgStoreAndInstantiateContractResponse";
MsgStoreAndInstantiateContractResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgAddCodeUploadParamsAddresses is the
 * MsgAddCodeUploadParamsAddresses request type.
 *
 * @generated from message cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddresses
 */
export class MsgAddCodeUploadParamsAddresses extends Message {
    constructor(data) {
        super();
        /**
         * Authority is the address of the governance account.
         *
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        /**
         * @generated from field: repeated string addresses = 2;
         */
        this.addresses = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgAddCodeUploadParamsAddresses().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgAddCodeUploadParamsAddresses().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgAddCodeUploadParamsAddresses().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgAddCodeUploadParamsAddresses, a, b);
    }
}
MsgAddCodeUploadParamsAddresses.runtime = proto3;
MsgAddCodeUploadParamsAddresses.typeName = "cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddresses";
MsgAddCodeUploadParamsAddresses.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * MsgAddCodeUploadParamsAddressesResponse defines the response
 * structure for executing a MsgAddCodeUploadParamsAddresses message.
 *
 * @generated from message cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddressesResponse
 */
export class MsgAddCodeUploadParamsAddressesResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgAddCodeUploadParamsAddressesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgAddCodeUploadParamsAddressesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgAddCodeUploadParamsAddressesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgAddCodeUploadParamsAddressesResponse, a, b);
    }
}
MsgAddCodeUploadParamsAddressesResponse.runtime = proto3;
MsgAddCodeUploadParamsAddressesResponse.typeName = "cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddressesResponse";
MsgAddCodeUploadParamsAddressesResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgRemoveCodeUploadParamsAddresses is the
 * MsgRemoveCodeUploadParamsAddresses request type.
 *
 * @generated from message cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddresses
 */
export class MsgRemoveCodeUploadParamsAddresses extends Message {
    constructor(data) {
        super();
        /**
         * Authority is the address of the governance account.
         *
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        /**
         * @generated from field: repeated string addresses = 2;
         */
        this.addresses = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgRemoveCodeUploadParamsAddresses().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgRemoveCodeUploadParamsAddresses().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgRemoveCodeUploadParamsAddresses().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgRemoveCodeUploadParamsAddresses, a, b);
    }
}
MsgRemoveCodeUploadParamsAddresses.runtime = proto3;
MsgRemoveCodeUploadParamsAddresses.typeName = "cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddresses";
MsgRemoveCodeUploadParamsAddresses.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * MsgRemoveCodeUploadParamsAddressesResponse defines the response
 * structure for executing a MsgRemoveCodeUploadParamsAddresses message.
 *
 * @generated from message cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddressesResponse
 */
export class MsgRemoveCodeUploadParamsAddressesResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgRemoveCodeUploadParamsAddressesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgRemoveCodeUploadParamsAddressesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgRemoveCodeUploadParamsAddressesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgRemoveCodeUploadParamsAddressesResponse, a, b);
    }
}
MsgRemoveCodeUploadParamsAddressesResponse.runtime = proto3;
MsgRemoveCodeUploadParamsAddressesResponse.typeName = "cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddressesResponse";
MsgRemoveCodeUploadParamsAddressesResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgStoreAndMigrateContract is the MsgStoreAndMigrateContract
 * request type.
 *
 * Since: 0.42
 *
 * @generated from message cosmwasm.wasm.v1.MsgStoreAndMigrateContract
 */
export class MsgStoreAndMigrateContract extends Message {
    constructor(data) {
        super();
        /**
         * Authority is the address of the governance account.
         *
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        /**
         * WASMByteCode can be raw or gzip compressed
         *
         * @generated from field: bytes wasm_byte_code = 2;
         */
        this.wasmByteCode = new Uint8Array(0);
        /**
         * Contract is the address of the smart contract
         *
         * @generated from field: string contract = 4;
         */
        this.contract = "";
        /**
         * Msg json encoded message to be passed to the contract on migration
         *
         * @generated from field: bytes msg = 5;
         */
        this.msg = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgStoreAndMigrateContract().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgStoreAndMigrateContract().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgStoreAndMigrateContract().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgStoreAndMigrateContract, a, b);
    }
}
MsgStoreAndMigrateContract.runtime = proto3;
MsgStoreAndMigrateContract.typeName = "cosmwasm.wasm.v1.MsgStoreAndMigrateContract";
MsgStoreAndMigrateContract.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "wasm_byte_code", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "instantiate_permission", kind: "message", T: AccessConfig },
    { no: 4, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgStoreAndMigrateContractResponse defines the response structure
 * for executing a MsgStoreAndMigrateContract message.
 *
 * Since: 0.42
 *
 * @generated from message cosmwasm.wasm.v1.MsgStoreAndMigrateContractResponse
 */
export class MsgStoreAndMigrateContractResponse extends Message {
    constructor(data) {
        super();
        /**
         * CodeID is the reference to the stored WASM code
         *
         * @generated from field: uint64 code_id = 1;
         */
        this.codeId = protoInt64.zero;
        /**
         * Checksum is the sha256 hash of the stored code
         *
         * @generated from field: bytes checksum = 2;
         */
        this.checksum = new Uint8Array(0);
        /**
         * Data contains bytes to returned from the contract
         *
         * @generated from field: bytes data = 3;
         */
        this.data = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgStoreAndMigrateContractResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgStoreAndMigrateContractResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgStoreAndMigrateContractResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgStoreAndMigrateContractResponse, a, b);
    }
}
MsgStoreAndMigrateContractResponse.runtime = proto3;
MsgStoreAndMigrateContractResponse.typeName = "cosmwasm.wasm.v1.MsgStoreAndMigrateContractResponse";
MsgStoreAndMigrateContractResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "checksum", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgUpdateContractLabel sets a new label for a smart contract
 *
 * @generated from message cosmwasm.wasm.v1.MsgUpdateContractLabel
 */
export class MsgUpdateContractLabel extends Message {
    constructor(data) {
        super();
        /**
         * Sender is the that actor that signed the messages
         *
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * NewLabel string to be set
         *
         * @generated from field: string new_label = 2;
         */
        this.newLabel = "";
        /**
         * Contract is the address of the smart contract
         *
         * @generated from field: string contract = 3;
         */
        this.contract = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateContractLabel().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateContractLabel().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateContractLabel().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateContractLabel, a, b);
    }
}
MsgUpdateContractLabel.runtime = proto3;
MsgUpdateContractLabel.typeName = "cosmwasm.wasm.v1.MsgUpdateContractLabel";
MsgUpdateContractLabel.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgUpdateContractLabelResponse returns empty data
 *
 * @generated from message cosmwasm.wasm.v1.MsgUpdateContractLabelResponse
 */
export class MsgUpdateContractLabelResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateContractLabelResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateContractLabelResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateContractLabelResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateContractLabelResponse, a, b);
    }
}
MsgUpdateContractLabelResponse.runtime = proto3;
MsgUpdateContractLabelResponse.typeName = "cosmwasm.wasm.v1.MsgUpdateContractLabelResponse";
MsgUpdateContractLabelResponse.fields = proto3.util.newFieldList(() => []);
//# sourceMappingURL=tx_pb.js.map