// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/exchange/v1beta1/tx.proto (package injective.exchange.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DerivativeOrder, MarketStatus, Params, PositionDelta, SpotOrder } from "./exchange_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { OracleType } from "../../oracle/v1beta1/oracle_pb.js";
/**
 * @generated from message injective.exchange.v1beta1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message {
    constructor(data) {
        super();
        /**
         * authority is the address of the governance account.
         *
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateParams, a, b);
    }
}
MsgUpdateParams.runtime = proto3;
MsgUpdateParams.typeName = "injective.exchange.v1beta1.MsgUpdateParams";
MsgUpdateParams.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
]);
/**
 * @generated from message injective.exchange.v1beta1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateParamsResponse, a, b);
    }
}
MsgUpdateParamsResponse.runtime = proto3;
MsgUpdateParamsResponse.typeName = "injective.exchange.v1beta1.MsgUpdateParamsResponse";
MsgUpdateParamsResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgDeposit defines a SDK message for transferring coins from the sender's
 * bank balance into the subaccount's exchange deposits
 *
 * @generated from message injective.exchange.v1beta1.MsgDeposit
 */
export class MsgDeposit extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * (Optional) bytes32 subaccount ID to deposit funds into. If empty, the coin
         * will be deposited to the sender's default subaccount address.
         *
         * @generated from field: string subaccount_id = 2;
         */
        this.subaccountId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgDeposit().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgDeposit().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgDeposit().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgDeposit, a, b);
    }
}
MsgDeposit.runtime = proto3;
MsgDeposit.typeName = "injective.exchange.v1beta1.MsgDeposit";
MsgDeposit.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
]);
/**
 * MsgDepositResponse defines the Msg/Deposit response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgDepositResponse
 */
export class MsgDepositResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgDepositResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgDepositResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgDepositResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgDepositResponse, a, b);
    }
}
MsgDepositResponse.runtime = proto3;
MsgDepositResponse.typeName = "injective.exchange.v1beta1.MsgDepositResponse";
MsgDepositResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgWithdraw defines a SDK message for withdrawing coins from a subaccount's
 * deposits to the user's bank balance
 *
 * @generated from message injective.exchange.v1beta1.MsgWithdraw
 */
export class MsgWithdraw extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * bytes32 subaccount ID to withdraw funds from
         *
         * @generated from field: string subaccount_id = 2;
         */
        this.subaccountId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgWithdraw().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgWithdraw().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgWithdraw().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgWithdraw, a, b);
    }
}
MsgWithdraw.runtime = proto3;
MsgWithdraw.typeName = "injective.exchange.v1beta1.MsgWithdraw";
MsgWithdraw.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
]);
/**
 * MsgWithdraw defines the Msg/Withdraw response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgWithdrawResponse
 */
export class MsgWithdrawResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgWithdrawResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgWithdrawResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgWithdrawResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgWithdrawResponse, a, b);
    }
}
MsgWithdrawResponse.runtime = proto3;
MsgWithdrawResponse.typeName = "injective.exchange.v1beta1.MsgWithdrawResponse";
MsgWithdrawResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgCreateSpotLimitOrder defines a SDK message for creating a new spot limit
 * order.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateSpotLimitOrder
 */
export class MsgCreateSpotLimitOrder extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateSpotLimitOrder().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateSpotLimitOrder().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateSpotLimitOrder().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateSpotLimitOrder, a, b);
    }
}
MsgCreateSpotLimitOrder.runtime = proto3;
MsgCreateSpotLimitOrder.typeName = "injective.exchange.v1beta1.MsgCreateSpotLimitOrder";
MsgCreateSpotLimitOrder.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: SpotOrder },
]);
/**
 * MsgCreateSpotLimitOrderResponse defines the Msg/CreateSpotOrder response
 * type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse
 */
export class MsgCreateSpotLimitOrderResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string order_hash = 1;
         */
        this.orderHash = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateSpotLimitOrderResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateSpotLimitOrderResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateSpotLimitOrderResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateSpotLimitOrderResponse, a, b);
    }
}
MsgCreateSpotLimitOrderResponse.runtime = proto3;
MsgCreateSpotLimitOrderResponse.typeName = "injective.exchange.v1beta1.MsgCreateSpotLimitOrderResponse";
MsgCreateSpotLimitOrderResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgBatchCreateSpotLimitOrders defines a SDK message for creating a new batch
 * of spot limit orders.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders
 */
export class MsgBatchCreateSpotLimitOrders extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.SpotOrder orders = 2;
         */
        this.orders = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBatchCreateSpotLimitOrders().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBatchCreateSpotLimitOrders().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBatchCreateSpotLimitOrders().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBatchCreateSpotLimitOrders, a, b);
    }
}
MsgBatchCreateSpotLimitOrders.runtime = proto3;
MsgBatchCreateSpotLimitOrders.typeName = "injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders";
MsgBatchCreateSpotLimitOrders.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orders", kind: "message", T: SpotOrder, repeated: true },
]);
/**
 * MsgBatchCreateSpotLimitOrdersResponse defines the
 * Msg/BatchCreateSpotLimitOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse
 */
export class MsgBatchCreateSpotLimitOrdersResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string order_hashes = 1;
         */
        this.orderHashes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBatchCreateSpotLimitOrdersResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBatchCreateSpotLimitOrdersResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBatchCreateSpotLimitOrdersResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBatchCreateSpotLimitOrdersResponse, a, b);
    }
}
MsgBatchCreateSpotLimitOrdersResponse.runtime = proto3;
MsgBatchCreateSpotLimitOrdersResponse.typeName = "injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrdersResponse";
MsgBatchCreateSpotLimitOrdersResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hashes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * MsgInstantSpotMarketLaunch defines a SDK message for creating a new spot
 * market by paying listing fee without governance
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantSpotMarketLaunch
 */
export class MsgInstantSpotMarketLaunch extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * Ticker for the spot market.
         *
         * @generated from field: string ticker = 2;
         */
        this.ticker = "";
        /**
         * type of coin to use as the base currency
         *
         * @generated from field: string base_denom = 3;
         */
        this.baseDenom = "";
        /**
         * type of coin to use as the quote currency
         *
         * @generated from field: string quote_denom = 4;
         */
        this.quoteDenom = "";
        /**
         * min_price_tick_size defines the minimum tick size of the order's price
         *
         * @generated from field: string min_price_tick_size = 5;
         */
        this.minPriceTickSize = "";
        /**
         * min_quantity_tick_size defines the minimum tick size of the order's
         * quantity
         *
         * @generated from field: string min_quantity_tick_size = 6;
         */
        this.minQuantityTickSize = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgInstantSpotMarketLaunch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgInstantSpotMarketLaunch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgInstantSpotMarketLaunch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgInstantSpotMarketLaunch, a, b);
    }
}
MsgInstantSpotMarketLaunch.runtime = proto3;
MsgInstantSpotMarketLaunch.typeName = "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch";
MsgInstantSpotMarketLaunch.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "base_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgInstantSpotMarketLaunchResponse defines the Msg/InstantSpotMarketLaunch
 * response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantSpotMarketLaunchResponse
 */
export class MsgInstantSpotMarketLaunchResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgInstantSpotMarketLaunchResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgInstantSpotMarketLaunchResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgInstantSpotMarketLaunchResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgInstantSpotMarketLaunchResponse, a, b);
    }
}
MsgInstantSpotMarketLaunchResponse.runtime = proto3;
MsgInstantSpotMarketLaunchResponse.typeName = "injective.exchange.v1beta1.MsgInstantSpotMarketLaunchResponse";
MsgInstantSpotMarketLaunchResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgInstantPerpetualMarketLaunch defines a SDK message for creating a new
 * perpetual futures market by paying listing fee without governance
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch
 */
export class MsgInstantPerpetualMarketLaunch extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * Ticker for the derivative market.
         *
         * @generated from field: string ticker = 2;
         */
        this.ticker = "";
        /**
         * type of coin to use as the base currency
         *
         * @generated from field: string quote_denom = 3;
         */
        this.quoteDenom = "";
        /**
         * Oracle base currency
         *
         * @generated from field: string oracle_base = 4;
         */
        this.oracleBase = "";
        /**
         * Oracle quote currency
         *
         * @generated from field: string oracle_quote = 5;
         */
        this.oracleQuote = "";
        /**
         * Scale factor for oracle prices.
         *
         * @generated from field: uint32 oracle_scale_factor = 6;
         */
        this.oracleScaleFactor = 0;
        /**
         * Oracle type
         *
         * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 7;
         */
        this.oracleType = OracleType.Unspecified;
        /**
         * maker_fee_rate defines the trade fee rate for makers on the perpetual
         * market
         *
         * @generated from field: string maker_fee_rate = 8;
         */
        this.makerFeeRate = "";
        /**
         * taker_fee_rate defines the trade fee rate for takers on the perpetual
         * market
         *
         * @generated from field: string taker_fee_rate = 9;
         */
        this.takerFeeRate = "";
        /**
         * initial_margin_ratio defines the initial margin ratio for the perpetual
         * market
         *
         * @generated from field: string initial_margin_ratio = 10;
         */
        this.initialMarginRatio = "";
        /**
         * maintenance_margin_ratio defines the maintenance margin ratio for the
         * perpetual market
         *
         * @generated from field: string maintenance_margin_ratio = 11;
         */
        this.maintenanceMarginRatio = "";
        /**
         * min_price_tick_size defines the minimum tick size of the order's price and
         * margin
         *
         * @generated from field: string min_price_tick_size = 12;
         */
        this.minPriceTickSize = "";
        /**
         * min_quantity_tick_size defines the minimum tick size of the order's
         * quantity
         *
         * @generated from field: string min_quantity_tick_size = 13;
         */
        this.minQuantityTickSize = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgInstantPerpetualMarketLaunch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgInstantPerpetualMarketLaunch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgInstantPerpetualMarketLaunch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgInstantPerpetualMarketLaunch, a, b);
    }
}
MsgInstantPerpetualMarketLaunch.runtime = proto3;
MsgInstantPerpetualMarketLaunch.typeName = "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch";
MsgInstantPerpetualMarketLaunch.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "oracle_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "oracle_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "oracle_scale_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 8, name: "maker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "taker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "initial_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "maintenance_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgInstantPerpetualMarketLaunchResponse defines the
 * Msg/InstantPerpetualMarketLaunchResponse response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunchResponse
 */
export class MsgInstantPerpetualMarketLaunchResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgInstantPerpetualMarketLaunchResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgInstantPerpetualMarketLaunchResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgInstantPerpetualMarketLaunchResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgInstantPerpetualMarketLaunchResponse, a, b);
    }
}
MsgInstantPerpetualMarketLaunchResponse.runtime = proto3;
MsgInstantPerpetualMarketLaunchResponse.typeName = "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunchResponse";
MsgInstantPerpetualMarketLaunchResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgInstantBinaryOptionsMarketLaunch defines a SDK message for creating a new
 * perpetual futures market by paying listing fee without governance
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch
 */
export class MsgInstantBinaryOptionsMarketLaunch extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * Ticker for the derivative contract.
         *
         * @generated from field: string ticker = 2;
         */
        this.ticker = "";
        /**
         * Oracle symbol
         *
         * @generated from field: string oracle_symbol = 3;
         */
        this.oracleSymbol = "";
        /**
         * Oracle Provider
         *
         * @generated from field: string oracle_provider = 4;
         */
        this.oracleProvider = "";
        /**
         * Oracle type
         *
         * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 5;
         */
        this.oracleType = OracleType.Unspecified;
        /**
         * Scale factor for oracle prices.
         *
         * @generated from field: uint32 oracle_scale_factor = 6;
         */
        this.oracleScaleFactor = 0;
        /**
         * maker_fee_rate defines the trade fee rate for makers on the perpetual
         * market
         *
         * @generated from field: string maker_fee_rate = 7;
         */
        this.makerFeeRate = "";
        /**
         * taker_fee_rate defines the trade fee rate for takers on the perpetual
         * market
         *
         * @generated from field: string taker_fee_rate = 8;
         */
        this.takerFeeRate = "";
        /**
         * expiration timestamp
         *
         * @generated from field: int64 expiration_timestamp = 9;
         */
        this.expirationTimestamp = protoInt64.zero;
        /**
         * expiration timestamp
         *
         * @generated from field: int64 settlement_timestamp = 10;
         */
        this.settlementTimestamp = protoInt64.zero;
        /**
         * admin of the market
         *
         * @generated from field: string admin = 11;
         */
        this.admin = "";
        /**
         * Address of the quote currency denomination for the binary options contract
         *
         * @generated from field: string quote_denom = 12;
         */
        this.quoteDenom = "";
        /**
         * min_price_tick_size defines the minimum tick size that the price and margin
         * required for orders in the market
         *
         * @generated from field: string min_price_tick_size = 13;
         */
        this.minPriceTickSize = "";
        /**
         * min_quantity_tick_size defines the minimum tick size of the quantity
         * required for orders in the market
         *
         * @generated from field: string min_quantity_tick_size = 14;
         */
        this.minQuantityTickSize = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgInstantBinaryOptionsMarketLaunch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgInstantBinaryOptionsMarketLaunch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgInstantBinaryOptionsMarketLaunch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgInstantBinaryOptionsMarketLaunch, a, b);
    }
}
MsgInstantBinaryOptionsMarketLaunch.runtime = proto3;
MsgInstantBinaryOptionsMarketLaunch.typeName = "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch";
MsgInstantBinaryOptionsMarketLaunch.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "oracle_symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "oracle_provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 6, name: "oracle_scale_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "maker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "taker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "expiration_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "settlement_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgInstantBinaryOptionsMarketLaunchResponse defines the
 * Msg/InstantBinaryOptionsMarketLaunchResponse response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunchResponse
 */
export class MsgInstantBinaryOptionsMarketLaunchResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgInstantBinaryOptionsMarketLaunchResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgInstantBinaryOptionsMarketLaunchResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgInstantBinaryOptionsMarketLaunchResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgInstantBinaryOptionsMarketLaunchResponse, a, b);
    }
}
MsgInstantBinaryOptionsMarketLaunchResponse.runtime = proto3;
MsgInstantBinaryOptionsMarketLaunchResponse.typeName = "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunchResponse";
MsgInstantBinaryOptionsMarketLaunchResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgInstantExpiryFuturesMarketLaunch defines a SDK message for creating a new
 * expiry futures market by paying listing fee without governance
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch
 */
export class MsgInstantExpiryFuturesMarketLaunch extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * Ticker for the derivative market.
         *
         * @generated from field: string ticker = 2;
         */
        this.ticker = "";
        /**
         * type of coin to use as the quote currency
         *
         * @generated from field: string quote_denom = 3;
         */
        this.quoteDenom = "";
        /**
         * Oracle base currency
         *
         * @generated from field: string oracle_base = 4;
         */
        this.oracleBase = "";
        /**
         * Oracle quote currency
         *
         * @generated from field: string oracle_quote = 5;
         */
        this.oracleQuote = "";
        /**
         * Oracle type
         *
         * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 6;
         */
        this.oracleType = OracleType.Unspecified;
        /**
         * Scale factor for oracle prices.
         *
         * @generated from field: uint32 oracle_scale_factor = 7;
         */
        this.oracleScaleFactor = 0;
        /**
         * Expiration time of the market
         *
         * @generated from field: int64 expiry = 8;
         */
        this.expiry = protoInt64.zero;
        /**
         * maker_fee_rate defines the trade fee rate for makers on the expiry futures
         * market
         *
         * @generated from field: string maker_fee_rate = 9;
         */
        this.makerFeeRate = "";
        /**
         * taker_fee_rate defines the trade fee rate for takers on the expiry futures
         * market
         *
         * @generated from field: string taker_fee_rate = 10;
         */
        this.takerFeeRate = "";
        /**
         * initial_margin_ratio defines the initial margin ratio for the derivative
         * market
         *
         * @generated from field: string initial_margin_ratio = 11;
         */
        this.initialMarginRatio = "";
        /**
         * maintenance_margin_ratio defines the maintenance margin ratio for the
         * derivative market
         *
         * @generated from field: string maintenance_margin_ratio = 12;
         */
        this.maintenanceMarginRatio = "";
        /**
         * min_price_tick_size defines the minimum tick size of the order's price and
         * margin
         *
         * @generated from field: string min_price_tick_size = 13;
         */
        this.minPriceTickSize = "";
        /**
         * min_quantity_tick_size defines the minimum tick size of the order's
         * quantity
         *
         * @generated from field: string min_quantity_tick_size = 14;
         */
        this.minQuantityTickSize = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgInstantExpiryFuturesMarketLaunch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgInstantExpiryFuturesMarketLaunch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgInstantExpiryFuturesMarketLaunch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgInstantExpiryFuturesMarketLaunch, a, b);
    }
}
MsgInstantExpiryFuturesMarketLaunch.runtime = proto3;
MsgInstantExpiryFuturesMarketLaunch.typeName = "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunch";
MsgInstantExpiryFuturesMarketLaunch.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "oracle_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "oracle_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 7, name: "oracle_scale_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "expiry", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "maker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "taker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "initial_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "maintenance_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgInstantExpiryFuturesMarketLaunchResponse defines the
 * Msg/InstantExpiryFuturesMarketLaunch response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunchResponse
 */
export class MsgInstantExpiryFuturesMarketLaunchResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgInstantExpiryFuturesMarketLaunchResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgInstantExpiryFuturesMarketLaunchResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgInstantExpiryFuturesMarketLaunchResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgInstantExpiryFuturesMarketLaunchResponse, a, b);
    }
}
MsgInstantExpiryFuturesMarketLaunchResponse.runtime = proto3;
MsgInstantExpiryFuturesMarketLaunchResponse.typeName = "injective.exchange.v1beta1.MsgInstantExpiryFuturesMarketLaunchResponse";
MsgInstantExpiryFuturesMarketLaunchResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgCreateSpotMarketOrder defines a SDK message for creating a new spot market
 * order.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateSpotMarketOrder
 */
export class MsgCreateSpotMarketOrder extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateSpotMarketOrder().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateSpotMarketOrder().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateSpotMarketOrder().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateSpotMarketOrder, a, b);
    }
}
MsgCreateSpotMarketOrder.runtime = proto3;
MsgCreateSpotMarketOrder.typeName = "injective.exchange.v1beta1.MsgCreateSpotMarketOrder";
MsgCreateSpotMarketOrder.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: SpotOrder },
]);
/**
 * MsgCreateSpotMarketOrderResponse defines the Msg/CreateSpotMarketLimitOrder
 * response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse
 */
export class MsgCreateSpotMarketOrderResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string order_hash = 1;
         */
        this.orderHash = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateSpotMarketOrderResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateSpotMarketOrderResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateSpotMarketOrderResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateSpotMarketOrderResponse, a, b);
    }
}
MsgCreateSpotMarketOrderResponse.runtime = proto3;
MsgCreateSpotMarketOrderResponse.typeName = "injective.exchange.v1beta1.MsgCreateSpotMarketOrderResponse";
MsgCreateSpotMarketOrderResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "results", kind: "message", T: SpotMarketOrderResults },
]);
/**
 * @generated from message injective.exchange.v1beta1.SpotMarketOrderResults
 */
export class SpotMarketOrderResults extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string quantity = 1;
         */
        this.quantity = "";
        /**
         * @generated from field: string price = 2;
         */
        this.price = "";
        /**
         * @generated from field: string fee = 3;
         */
        this.fee = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SpotMarketOrderResults().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SpotMarketOrderResults().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SpotMarketOrderResults().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SpotMarketOrderResults, a, b);
    }
}
SpotMarketOrderResults.runtime = proto3;
SpotMarketOrderResults.typeName = "injective.exchange.v1beta1.SpotMarketOrderResults";
SpotMarketOrderResults.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * A Cosmos-SDK MsgCreateDerivativeLimitOrder
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder
 */
export class MsgCreateDerivativeLimitOrder extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateDerivativeLimitOrder().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateDerivativeLimitOrder().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateDerivativeLimitOrder().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateDerivativeLimitOrder, a, b);
    }
}
MsgCreateDerivativeLimitOrder.runtime = proto3;
MsgCreateDerivativeLimitOrder.typeName = "injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder";
MsgCreateDerivativeLimitOrder.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: DerivativeOrder },
]);
/**
 * MsgCreateDerivativeLimitOrderResponse defines the
 * Msg/CreateDerivativeMarketOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse
 */
export class MsgCreateDerivativeLimitOrderResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string order_hash = 1;
         */
        this.orderHash = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateDerivativeLimitOrderResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateDerivativeLimitOrderResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateDerivativeLimitOrderResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateDerivativeLimitOrderResponse, a, b);
    }
}
MsgCreateDerivativeLimitOrderResponse.runtime = proto3;
MsgCreateDerivativeLimitOrderResponse.typeName = "injective.exchange.v1beta1.MsgCreateDerivativeLimitOrderResponse";
MsgCreateDerivativeLimitOrderResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * A Cosmos-SDK MsgCreateBinaryOptionsLimitOrder
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder
 */
export class MsgCreateBinaryOptionsLimitOrder extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateBinaryOptionsLimitOrder().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateBinaryOptionsLimitOrder().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateBinaryOptionsLimitOrder().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateBinaryOptionsLimitOrder, a, b);
    }
}
MsgCreateBinaryOptionsLimitOrder.runtime = proto3;
MsgCreateBinaryOptionsLimitOrder.typeName = "injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder";
MsgCreateBinaryOptionsLimitOrder.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: DerivativeOrder },
]);
/**
 * MsgCreateBinaryOptionsLimitOrderResponse defines the
 * Msg/CreateBinaryOptionsLimitOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse
 */
export class MsgCreateBinaryOptionsLimitOrderResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string order_hash = 1;
         */
        this.orderHash = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateBinaryOptionsLimitOrderResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateBinaryOptionsLimitOrderResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateBinaryOptionsLimitOrderResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateBinaryOptionsLimitOrderResponse, a, b);
    }
}
MsgCreateBinaryOptionsLimitOrderResponse.runtime = proto3;
MsgCreateBinaryOptionsLimitOrderResponse.typeName = "injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrderResponse";
MsgCreateBinaryOptionsLimitOrderResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * A Cosmos-SDK MsgBatchCreateDerivativeLimitOrders
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders
 */
export class MsgBatchCreateDerivativeLimitOrders extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeOrder orders = 2;
         */
        this.orders = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBatchCreateDerivativeLimitOrders().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBatchCreateDerivativeLimitOrders().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBatchCreateDerivativeLimitOrders().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBatchCreateDerivativeLimitOrders, a, b);
    }
}
MsgBatchCreateDerivativeLimitOrders.runtime = proto3;
MsgBatchCreateDerivativeLimitOrders.typeName = "injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders";
MsgBatchCreateDerivativeLimitOrders.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orders", kind: "message", T: DerivativeOrder, repeated: true },
]);
/**
 * MsgBatchCreateDerivativeLimitOrdersResponse defines the
 * Msg/BatchCreateDerivativeLimitOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse
 */
export class MsgBatchCreateDerivativeLimitOrdersResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string order_hashes = 1;
         */
        this.orderHashes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBatchCreateDerivativeLimitOrdersResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBatchCreateDerivativeLimitOrdersResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBatchCreateDerivativeLimitOrdersResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBatchCreateDerivativeLimitOrdersResponse, a, b);
    }
}
MsgBatchCreateDerivativeLimitOrdersResponse.runtime = proto3;
MsgBatchCreateDerivativeLimitOrdersResponse.typeName = "injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrdersResponse";
MsgBatchCreateDerivativeLimitOrdersResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hashes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * MsgCancelSpotOrder defines the Msg/CancelSpotOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCancelSpotOrder
 */
export class MsgCancelSpotOrder extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string market_id = 2;
         */
        this.marketId = "";
        /**
         * @generated from field: string subaccount_id = 3;
         */
        this.subaccountId = "";
        /**
         * @generated from field: string order_hash = 4;
         */
        this.orderHash = "";
        /**
         * @generated from field: string cid = 5;
         */
        this.cid = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCancelSpotOrder().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCancelSpotOrder().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCancelSpotOrder().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCancelSpotOrder, a, b);
    }
}
MsgCancelSpotOrder.runtime = proto3;
MsgCancelSpotOrder.typeName = "injective.exchange.v1beta1.MsgCancelSpotOrder";
MsgCancelSpotOrder.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgCancelSpotOrderResponse defines the Msg/CancelSpotOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCancelSpotOrderResponse
 */
export class MsgCancelSpotOrderResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCancelSpotOrderResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCancelSpotOrderResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCancelSpotOrderResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCancelSpotOrderResponse, a, b);
    }
}
MsgCancelSpotOrderResponse.runtime = proto3;
MsgCancelSpotOrderResponse.typeName = "injective.exchange.v1beta1.MsgCancelSpotOrderResponse";
MsgCancelSpotOrderResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgBatchCancelSpotOrders defines the Msg/BatchCancelSpotOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCancelSpotOrders
 */
export class MsgBatchCancelSpotOrders extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.OrderData data = 2;
         */
        this.data = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBatchCancelSpotOrders().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBatchCancelSpotOrders().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBatchCancelSpotOrders().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBatchCancelSpotOrders, a, b);
    }
}
MsgBatchCancelSpotOrders.runtime = proto3;
MsgBatchCancelSpotOrders.typeName = "injective.exchange.v1beta1.MsgBatchCancelSpotOrders";
MsgBatchCancelSpotOrders.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "message", T: OrderData, repeated: true },
]);
/**
 * MsgBatchCancelSpotOrdersResponse defines the Msg/BatchCancelSpotOrders
 * response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCancelSpotOrdersResponse
 */
export class MsgBatchCancelSpotOrdersResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated bool success = 1;
         */
        this.success = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBatchCancelSpotOrdersResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBatchCancelSpotOrdersResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBatchCancelSpotOrdersResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBatchCancelSpotOrdersResponse, a, b);
    }
}
MsgBatchCancelSpotOrdersResponse.runtime = proto3;
MsgBatchCancelSpotOrdersResponse.typeName = "injective.exchange.v1beta1.MsgBatchCancelSpotOrdersResponse";
MsgBatchCancelSpotOrdersResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
]);
/**
 * MsgBatchCancelBinaryOptionsOrders defines the
 * Msg/BatchCancelBinaryOptionsOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders
 */
export class MsgBatchCancelBinaryOptionsOrders extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.OrderData data = 2;
         */
        this.data = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBatchCancelBinaryOptionsOrders().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBatchCancelBinaryOptionsOrders().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBatchCancelBinaryOptionsOrders().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBatchCancelBinaryOptionsOrders, a, b);
    }
}
MsgBatchCancelBinaryOptionsOrders.runtime = proto3;
MsgBatchCancelBinaryOptionsOrders.typeName = "injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrders";
MsgBatchCancelBinaryOptionsOrders.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "message", T: OrderData, repeated: true },
]);
/**
 * BatchCancelBinaryOptionsOrdersResponse defines the
 * Msg/BatchCancelBinaryOptionsOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrdersResponse
 */
export class MsgBatchCancelBinaryOptionsOrdersResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated bool success = 1;
         */
        this.success = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBatchCancelBinaryOptionsOrdersResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBatchCancelBinaryOptionsOrdersResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBatchCancelBinaryOptionsOrdersResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBatchCancelBinaryOptionsOrdersResponse, a, b);
    }
}
MsgBatchCancelBinaryOptionsOrdersResponse.runtime = proto3;
MsgBatchCancelBinaryOptionsOrdersResponse.typeName = "injective.exchange.v1beta1.MsgBatchCancelBinaryOptionsOrdersResponse";
MsgBatchCancelBinaryOptionsOrdersResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
]);
/**
 * MsgBatchUpdateOrders defines the Msg/BatchUpdateOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchUpdateOrders
 */
export class MsgBatchUpdateOrders extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * subaccount_id only used for the spot_market_ids_to_cancel_all and
         * derivative_market_ids_to_cancel_all.
         *
         * @generated from field: string subaccount_id = 2;
         */
        this.subaccountId = "";
        /**
         * @generated from field: repeated string spot_market_ids_to_cancel_all = 3;
         */
        this.spotMarketIdsToCancelAll = [];
        /**
         * @generated from field: repeated string derivative_market_ids_to_cancel_all = 4;
         */
        this.derivativeMarketIdsToCancelAll = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.OrderData spot_orders_to_cancel = 5;
         */
        this.spotOrdersToCancel = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.OrderData derivative_orders_to_cancel = 6;
         */
        this.derivativeOrdersToCancel = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.SpotOrder spot_orders_to_create = 7;
         */
        this.spotOrdersToCreate = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeOrder derivative_orders_to_create = 8;
         */
        this.derivativeOrdersToCreate = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.OrderData binary_options_orders_to_cancel = 9;
         */
        this.binaryOptionsOrdersToCancel = [];
        /**
         * @generated from field: repeated string binary_options_market_ids_to_cancel_all = 10;
         */
        this.binaryOptionsMarketIdsToCancelAll = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeOrder binary_options_orders_to_create = 11;
         */
        this.binaryOptionsOrdersToCreate = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBatchUpdateOrders().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBatchUpdateOrders().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBatchUpdateOrders().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBatchUpdateOrders, a, b);
    }
}
MsgBatchUpdateOrders.runtime = proto3;
MsgBatchUpdateOrders.typeName = "injective.exchange.v1beta1.MsgBatchUpdateOrders";
MsgBatchUpdateOrders.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "spot_market_ids_to_cancel_all", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "derivative_market_ids_to_cancel_all", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "spot_orders_to_cancel", kind: "message", T: OrderData, repeated: true },
    { no: 6, name: "derivative_orders_to_cancel", kind: "message", T: OrderData, repeated: true },
    { no: 7, name: "spot_orders_to_create", kind: "message", T: SpotOrder, repeated: true },
    { no: 8, name: "derivative_orders_to_create", kind: "message", T: DerivativeOrder, repeated: true },
    { no: 9, name: "binary_options_orders_to_cancel", kind: "message", T: OrderData, repeated: true },
    { no: 10, name: "binary_options_market_ids_to_cancel_all", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "binary_options_orders_to_create", kind: "message", T: DerivativeOrder, repeated: true },
]);
/**
 * MsgBatchUpdateOrdersResponse defines the Msg/BatchUpdateOrders response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse
 */
export class MsgBatchUpdateOrdersResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated bool spot_cancel_success = 1;
         */
        this.spotCancelSuccess = [];
        /**
         * @generated from field: repeated bool derivative_cancel_success = 2;
         */
        this.derivativeCancelSuccess = [];
        /**
         * @generated from field: repeated string spot_order_hashes = 3;
         */
        this.spotOrderHashes = [];
        /**
         * @generated from field: repeated string derivative_order_hashes = 4;
         */
        this.derivativeOrderHashes = [];
        /**
         * @generated from field: repeated bool binary_options_cancel_success = 5;
         */
        this.binaryOptionsCancelSuccess = [];
        /**
         * @generated from field: repeated string binary_options_order_hashes = 6;
         */
        this.binaryOptionsOrderHashes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBatchUpdateOrdersResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBatchUpdateOrdersResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBatchUpdateOrdersResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBatchUpdateOrdersResponse, a, b);
    }
}
MsgBatchUpdateOrdersResponse.runtime = proto3;
MsgBatchUpdateOrdersResponse.typeName = "injective.exchange.v1beta1.MsgBatchUpdateOrdersResponse";
MsgBatchUpdateOrdersResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "spot_cancel_success", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
    { no: 2, name: "derivative_cancel_success", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
    { no: 3, name: "spot_order_hashes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "derivative_order_hashes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "binary_options_cancel_success", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
    { no: 6, name: "binary_options_order_hashes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * A Cosmos-SDK MsgCreateDerivativeMarketOrder
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder
 */
export class MsgCreateDerivativeMarketOrder extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateDerivativeMarketOrder().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateDerivativeMarketOrder().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateDerivativeMarketOrder().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateDerivativeMarketOrder, a, b);
    }
}
MsgCreateDerivativeMarketOrder.runtime = proto3;
MsgCreateDerivativeMarketOrder.typeName = "injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder";
MsgCreateDerivativeMarketOrder.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: DerivativeOrder },
]);
/**
 * MsgCreateDerivativeMarketOrderResponse defines the
 * Msg/CreateDerivativeMarketOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse
 */
export class MsgCreateDerivativeMarketOrderResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string order_hash = 1;
         */
        this.orderHash = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateDerivativeMarketOrderResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateDerivativeMarketOrderResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateDerivativeMarketOrderResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateDerivativeMarketOrderResponse, a, b);
    }
}
MsgCreateDerivativeMarketOrderResponse.runtime = proto3;
MsgCreateDerivativeMarketOrderResponse.typeName = "injective.exchange.v1beta1.MsgCreateDerivativeMarketOrderResponse";
MsgCreateDerivativeMarketOrderResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "results", kind: "message", T: DerivativeMarketOrderResults },
]);
/**
 * @generated from message injective.exchange.v1beta1.DerivativeMarketOrderResults
 */
export class DerivativeMarketOrderResults extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string quantity = 1;
         */
        this.quantity = "";
        /**
         * @generated from field: string price = 2;
         */
        this.price = "";
        /**
         * @generated from field: string fee = 3;
         */
        this.fee = "";
        /**
         * @generated from field: string payout = 5;
         */
        this.payout = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DerivativeMarketOrderResults().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DerivativeMarketOrderResults().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DerivativeMarketOrderResults().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DerivativeMarketOrderResults, a, b);
    }
}
DerivativeMarketOrderResults.runtime = proto3;
DerivativeMarketOrderResults.typeName = "injective.exchange.v1beta1.DerivativeMarketOrderResults";
DerivativeMarketOrderResults.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "position_delta", kind: "message", T: PositionDelta },
    { no: 5, name: "payout", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * A Cosmos-SDK MsgCreateBinaryOptionsMarketOrder
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder
 */
export class MsgCreateBinaryOptionsMarketOrder extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateBinaryOptionsMarketOrder().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateBinaryOptionsMarketOrder().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateBinaryOptionsMarketOrder().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateBinaryOptionsMarketOrder, a, b);
    }
}
MsgCreateBinaryOptionsMarketOrder.runtime = proto3;
MsgCreateBinaryOptionsMarketOrder.typeName = "injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder";
MsgCreateBinaryOptionsMarketOrder.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: DerivativeOrder },
]);
/**
 * MsgCreateBinaryOptionsMarketOrderResponse defines the
 * Msg/CreateBinaryOptionsMarketOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse
 */
export class MsgCreateBinaryOptionsMarketOrderResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string order_hash = 1;
         */
        this.orderHash = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateBinaryOptionsMarketOrderResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateBinaryOptionsMarketOrderResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateBinaryOptionsMarketOrderResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateBinaryOptionsMarketOrderResponse, a, b);
    }
}
MsgCreateBinaryOptionsMarketOrderResponse.runtime = proto3;
MsgCreateBinaryOptionsMarketOrderResponse.typeName = "injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrderResponse";
MsgCreateBinaryOptionsMarketOrderResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "results", kind: "message", T: DerivativeMarketOrderResults },
]);
/**
 * MsgCancelDerivativeOrder defines the Msg/CancelDerivativeOrder response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCancelDerivativeOrder
 */
export class MsgCancelDerivativeOrder extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string market_id = 2;
         */
        this.marketId = "";
        /**
         * @generated from field: string subaccount_id = 3;
         */
        this.subaccountId = "";
        /**
         * @generated from field: string order_hash = 4;
         */
        this.orderHash = "";
        /**
         * bitwise combination of OrderMask enum values
         *
         * @generated from field: int32 order_mask = 5;
         */
        this.orderMask = 0;
        /**
         * @generated from field: string cid = 6;
         */
        this.cid = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCancelDerivativeOrder().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCancelDerivativeOrder().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCancelDerivativeOrder().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCancelDerivativeOrder, a, b);
    }
}
MsgCancelDerivativeOrder.runtime = proto3;
MsgCancelDerivativeOrder.typeName = "injective.exchange.v1beta1.MsgCancelDerivativeOrder";
MsgCancelDerivativeOrder.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "order_mask", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgCancelDerivativeOrderResponse defines the
 * Msg/CancelDerivativeOrderResponse response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCancelDerivativeOrderResponse
 */
export class MsgCancelDerivativeOrderResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCancelDerivativeOrderResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCancelDerivativeOrderResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCancelDerivativeOrderResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCancelDerivativeOrderResponse, a, b);
    }
}
MsgCancelDerivativeOrderResponse.runtime = proto3;
MsgCancelDerivativeOrderResponse.typeName = "injective.exchange.v1beta1.MsgCancelDerivativeOrderResponse";
MsgCancelDerivativeOrderResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgCancelBinaryOptionsOrder defines the Msg/CancelBinaryOptionsOrder response
 * type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder
 */
export class MsgCancelBinaryOptionsOrder extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string market_id = 2;
         */
        this.marketId = "";
        /**
         * @generated from field: string subaccount_id = 3;
         */
        this.subaccountId = "";
        /**
         * @generated from field: string order_hash = 4;
         */
        this.orderHash = "";
        /**
         * bitwise combination of OrderMask enum values
         *
         * @generated from field: int32 order_mask = 5;
         */
        this.orderMask = 0;
        /**
         * @generated from field: string cid = 6;
         */
        this.cid = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCancelBinaryOptionsOrder().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCancelBinaryOptionsOrder().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCancelBinaryOptionsOrder().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCancelBinaryOptionsOrder, a, b);
    }
}
MsgCancelBinaryOptionsOrder.runtime = proto3;
MsgCancelBinaryOptionsOrder.typeName = "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder";
MsgCancelBinaryOptionsOrder.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "order_mask", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgCancelBinaryOptionsOrderResponse defines the
 * Msg/CancelBinaryOptionsOrderResponse response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgCancelBinaryOptionsOrderResponse
 */
export class MsgCancelBinaryOptionsOrderResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCancelBinaryOptionsOrderResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCancelBinaryOptionsOrderResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCancelBinaryOptionsOrderResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCancelBinaryOptionsOrderResponse, a, b);
    }
}
MsgCancelBinaryOptionsOrderResponse.runtime = proto3;
MsgCancelBinaryOptionsOrderResponse.typeName = "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrderResponse";
MsgCancelBinaryOptionsOrderResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message injective.exchange.v1beta1.OrderData
 */
export class OrderData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: string subaccount_id = 2;
         */
        this.subaccountId = "";
        /**
         * @generated from field: string order_hash = 3;
         */
        this.orderHash = "";
        /**
         * bitwise combination of OrderMask enum values
         *
         * @generated from field: int32 order_mask = 4;
         */
        this.orderMask = 0;
        /**
         * @generated from field: string cid = 5;
         */
        this.cid = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OrderData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OrderData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OrderData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OrderData, a, b);
    }
}
OrderData.runtime = proto3;
OrderData.typeName = "injective.exchange.v1beta1.OrderData";
OrderData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "order_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order_mask", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgBatchCancelDerivativeOrders defines the Msg/CancelDerivativeOrders
 * response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders
 */
export class MsgBatchCancelDerivativeOrders extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.OrderData data = 2;
         */
        this.data = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBatchCancelDerivativeOrders().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBatchCancelDerivativeOrders().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBatchCancelDerivativeOrders().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBatchCancelDerivativeOrders, a, b);
    }
}
MsgBatchCancelDerivativeOrders.runtime = proto3;
MsgBatchCancelDerivativeOrders.typeName = "injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders";
MsgBatchCancelDerivativeOrders.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "message", T: OrderData, repeated: true },
]);
/**
 * MsgBatchCancelDerivativeOrdersResponse defines the
 * Msg/CancelDerivativeOrderResponse response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgBatchCancelDerivativeOrdersResponse
 */
export class MsgBatchCancelDerivativeOrdersResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated bool success = 1;
         */
        this.success = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBatchCancelDerivativeOrdersResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBatchCancelDerivativeOrdersResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBatchCancelDerivativeOrdersResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBatchCancelDerivativeOrdersResponse, a, b);
    }
}
MsgBatchCancelDerivativeOrdersResponse.runtime = proto3;
MsgBatchCancelDerivativeOrdersResponse.typeName = "injective.exchange.v1beta1.MsgBatchCancelDerivativeOrdersResponse";
MsgBatchCancelDerivativeOrdersResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
]);
/**
 * A Cosmos-SDK MsgSubaccountTransfer
 *
 * @generated from message injective.exchange.v1beta1.MsgSubaccountTransfer
 */
export class MsgSubaccountTransfer extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string source_subaccount_id = 2;
         */
        this.sourceSubaccountId = "";
        /**
         * @generated from field: string destination_subaccount_id = 3;
         */
        this.destinationSubaccountId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSubaccountTransfer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSubaccountTransfer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSubaccountTransfer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSubaccountTransfer, a, b);
    }
}
MsgSubaccountTransfer.runtime = proto3;
MsgSubaccountTransfer.typeName = "injective.exchange.v1beta1.MsgSubaccountTransfer";
MsgSubaccountTransfer.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "destination_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "message", T: Coin },
]);
/**
 * MsgSubaccountTransferResponse defines the Msg/SubaccountTransfer response
 * type.
 *
 * @generated from message injective.exchange.v1beta1.MsgSubaccountTransferResponse
 */
export class MsgSubaccountTransferResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSubaccountTransferResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSubaccountTransferResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSubaccountTransferResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSubaccountTransferResponse, a, b);
    }
}
MsgSubaccountTransferResponse.runtime = proto3;
MsgSubaccountTransferResponse.typeName = "injective.exchange.v1beta1.MsgSubaccountTransferResponse";
MsgSubaccountTransferResponse.fields = proto3.util.newFieldList(() => []);
/**
 * A Cosmos-SDK MsgExternalTransfer
 *
 * @generated from message injective.exchange.v1beta1.MsgExternalTransfer
 */
export class MsgExternalTransfer extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string source_subaccount_id = 2;
         */
        this.sourceSubaccountId = "";
        /**
         * @generated from field: string destination_subaccount_id = 3;
         */
        this.destinationSubaccountId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgExternalTransfer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgExternalTransfer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgExternalTransfer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgExternalTransfer, a, b);
    }
}
MsgExternalTransfer.runtime = proto3;
MsgExternalTransfer.typeName = "injective.exchange.v1beta1.MsgExternalTransfer";
MsgExternalTransfer.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "destination_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "message", T: Coin },
]);
/**
 * MsgExternalTransferResponse defines the Msg/ExternalTransfer response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgExternalTransferResponse
 */
export class MsgExternalTransferResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgExternalTransferResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgExternalTransferResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgExternalTransferResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgExternalTransferResponse, a, b);
    }
}
MsgExternalTransferResponse.runtime = proto3;
MsgExternalTransferResponse.typeName = "injective.exchange.v1beta1.MsgExternalTransferResponse";
MsgExternalTransferResponse.fields = proto3.util.newFieldList(() => []);
/**
 * A Cosmos-SDK MsgLiquidatePosition
 *
 * @generated from message injective.exchange.v1beta1.MsgLiquidatePosition
 */
export class MsgLiquidatePosition extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string subaccount_id = 2;
         */
        this.subaccountId = "";
        /**
         * @generated from field: string market_id = 3;
         */
        this.marketId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgLiquidatePosition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgLiquidatePosition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgLiquidatePosition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgLiquidatePosition, a, b);
    }
}
MsgLiquidatePosition.runtime = proto3;
MsgLiquidatePosition.typeName = "injective.exchange.v1beta1.MsgLiquidatePosition";
MsgLiquidatePosition.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order", kind: "message", T: DerivativeOrder },
]);
/**
 * MsgLiquidatePositionResponse defines the Msg/LiquidatePosition response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgLiquidatePositionResponse
 */
export class MsgLiquidatePositionResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgLiquidatePositionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgLiquidatePositionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgLiquidatePositionResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgLiquidatePositionResponse, a, b);
    }
}
MsgLiquidatePositionResponse.runtime = proto3;
MsgLiquidatePositionResponse.typeName = "injective.exchange.v1beta1.MsgLiquidatePositionResponse";
MsgLiquidatePositionResponse.fields = proto3.util.newFieldList(() => []);
/**
 * A Cosmos-SDK MsgEmergencySettleMarket
 *
 * @generated from message injective.exchange.v1beta1.MsgEmergencySettleMarket
 */
export class MsgEmergencySettleMarket extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string subaccount_id = 2;
         */
        this.subaccountId = "";
        /**
         * @generated from field: string market_id = 3;
         */
        this.marketId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgEmergencySettleMarket().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgEmergencySettleMarket().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgEmergencySettleMarket().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgEmergencySettleMarket, a, b);
    }
}
MsgEmergencySettleMarket.runtime = proto3;
MsgEmergencySettleMarket.typeName = "injective.exchange.v1beta1.MsgEmergencySettleMarket";
MsgEmergencySettleMarket.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgEmergencySettleMarketResponse defines the Msg/EmergencySettleMarket
 * response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgEmergencySettleMarketResponse
 */
export class MsgEmergencySettleMarketResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgEmergencySettleMarketResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgEmergencySettleMarketResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgEmergencySettleMarketResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgEmergencySettleMarketResponse, a, b);
    }
}
MsgEmergencySettleMarketResponse.runtime = proto3;
MsgEmergencySettleMarketResponse.typeName = "injective.exchange.v1beta1.MsgEmergencySettleMarketResponse";
MsgEmergencySettleMarketResponse.fields = proto3.util.newFieldList(() => []);
/**
 * A Cosmos-SDK MsgIncreasePositionMargin
 *
 * @generated from message injective.exchange.v1beta1.MsgIncreasePositionMargin
 */
export class MsgIncreasePositionMargin extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string source_subaccount_id = 2;
         */
        this.sourceSubaccountId = "";
        /**
         * @generated from field: string destination_subaccount_id = 3;
         */
        this.destinationSubaccountId = "";
        /**
         * @generated from field: string market_id = 4;
         */
        this.marketId = "";
        /**
         * amount defines the amount of margin to add to the position
         *
         * @generated from field: string amount = 5;
         */
        this.amount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgIncreasePositionMargin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgIncreasePositionMargin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgIncreasePositionMargin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgIncreasePositionMargin, a, b);
    }
}
MsgIncreasePositionMargin.runtime = proto3;
MsgIncreasePositionMargin.typeName = "injective.exchange.v1beta1.MsgIncreasePositionMargin";
MsgIncreasePositionMargin.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "destination_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgIncreasePositionMarginResponse defines the Msg/IncreasePositionMargin
 * response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgIncreasePositionMarginResponse
 */
export class MsgIncreasePositionMarginResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgIncreasePositionMarginResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgIncreasePositionMarginResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgIncreasePositionMarginResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgIncreasePositionMarginResponse, a, b);
    }
}
MsgIncreasePositionMarginResponse.runtime = proto3;
MsgIncreasePositionMarginResponse.typeName = "injective.exchange.v1beta1.MsgIncreasePositionMarginResponse";
MsgIncreasePositionMarginResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgPrivilegedExecuteContract defines the Msg/Exec message type
 *
 * @generated from message injective.exchange.v1beta1.MsgPrivilegedExecuteContract
 */
export class MsgPrivilegedExecuteContract extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * funds defines the user's bank coins used to fund the execution (e.g.
         * 100inj).
         *
         * @generated from field: string funds = 2;
         */
        this.funds = "";
        /**
         * contract_address defines the contract address to execute
         *
         * @generated from field: string contract_address = 3;
         */
        this.contractAddress = "";
        /**
         * data defines the call data used when executing the contract
         *
         * @generated from field: string data = 4;
         */
        this.data = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgPrivilegedExecuteContract().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgPrivilegedExecuteContract().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgPrivilegedExecuteContract().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgPrivilegedExecuteContract, a, b);
    }
}
MsgPrivilegedExecuteContract.runtime = proto3;
MsgPrivilegedExecuteContract.typeName = "injective.exchange.v1beta1.MsgPrivilegedExecuteContract";
MsgPrivilegedExecuteContract.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "funds", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgPrivilegedExecuteContractResponse defines the Msg/Exec response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgPrivilegedExecuteContractResponse
 */
export class MsgPrivilegedExecuteContractResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin funds_diff = 1;
         */
        this.fundsDiff = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgPrivilegedExecuteContractResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgPrivilegedExecuteContractResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgPrivilegedExecuteContractResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgPrivilegedExecuteContractResponse, a, b);
    }
}
MsgPrivilegedExecuteContractResponse.runtime = proto3;
MsgPrivilegedExecuteContractResponse.typeName = "injective.exchange.v1beta1.MsgPrivilegedExecuteContractResponse";
MsgPrivilegedExecuteContractResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "funds_diff", kind: "message", T: Coin, repeated: true },
]);
/**
 * A Cosmos-SDK MsgRewardsOptOut
 *
 * @generated from message injective.exchange.v1beta1.MsgRewardsOptOut
 */
export class MsgRewardsOptOut extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgRewardsOptOut().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgRewardsOptOut().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgRewardsOptOut().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgRewardsOptOut, a, b);
    }
}
MsgRewardsOptOut.runtime = proto3;
MsgRewardsOptOut.typeName = "injective.exchange.v1beta1.MsgRewardsOptOut";
MsgRewardsOptOut.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgRewardsOptOutResponse defines the Msg/RewardsOptOut response type.
 *
 * @generated from message injective.exchange.v1beta1.MsgRewardsOptOutResponse
 */
export class MsgRewardsOptOutResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgRewardsOptOutResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgRewardsOptOutResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgRewardsOptOutResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgRewardsOptOutResponse, a, b);
    }
}
MsgRewardsOptOutResponse.runtime = proto3;
MsgRewardsOptOutResponse.typeName = "injective.exchange.v1beta1.MsgRewardsOptOutResponse";
MsgRewardsOptOutResponse.fields = proto3.util.newFieldList(() => []);
/**
 * A Cosmos-SDK MsgReclaimLockedFunds
 *
 * @generated from message injective.exchange.v1beta1.MsgReclaimLockedFunds
 */
export class MsgReclaimLockedFunds extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: bytes lockedAccountPubKey = 2;
         */
        this.lockedAccountPubKey = new Uint8Array(0);
        /**
         * @generated from field: bytes signature = 3;
         */
        this.signature = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgReclaimLockedFunds().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgReclaimLockedFunds().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgReclaimLockedFunds().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgReclaimLockedFunds, a, b);
    }
}
MsgReclaimLockedFunds.runtime = proto3;
MsgReclaimLockedFunds.typeName = "injective.exchange.v1beta1.MsgReclaimLockedFunds";
MsgReclaimLockedFunds.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lockedAccountPubKey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgReclaimLockedFundsResponse defines the Msg/ReclaimLockedFunds response
 * type.
 *
 * @generated from message injective.exchange.v1beta1.MsgReclaimLockedFundsResponse
 */
export class MsgReclaimLockedFundsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgReclaimLockedFundsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgReclaimLockedFundsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgReclaimLockedFundsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgReclaimLockedFundsResponse, a, b);
    }
}
MsgReclaimLockedFundsResponse.runtime = proto3;
MsgReclaimLockedFundsResponse.typeName = "injective.exchange.v1beta1.MsgReclaimLockedFundsResponse";
MsgReclaimLockedFundsResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgSignData defines an arbitrary, general-purpose, off-chain message
 *
 * @generated from message injective.exchange.v1beta1.MsgSignData
 */
export class MsgSignData extends Message {
    constructor(data) {
        super();
        /**
         * Signer is the sdk.AccAddress of the message signer
         *
         * @generated from field: bytes Signer = 1;
         */
        this.Signer = new Uint8Array(0);
        /**
         * Data represents the raw bytes of the content that is signed (text, json,
         * etc)
         *
         * @generated from field: bytes Data = 2;
         */
        this.Data = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSignData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSignData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSignData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSignData, a, b);
    }
}
MsgSignData.runtime = proto3;
MsgSignData.typeName = "injective.exchange.v1beta1.MsgSignData";
MsgSignData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "Signer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "Data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgSignDoc defines an arbitrary, general-purpose, off-chain message
 *
 * @generated from message injective.exchange.v1beta1.MsgSignDoc
 */
export class MsgSignDoc extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sign_type = 1;
         */
        this.signType = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSignDoc().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSignDoc().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSignDoc().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSignDoc, a, b);
    }
}
MsgSignDoc.runtime = proto3;
MsgSignDoc.typeName = "injective.exchange.v1beta1.MsgSignDoc";
MsgSignDoc.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sign_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "message", T: MsgSignData },
]);
/**
 * MsgAdminUpdateBinaryOptionsMarket is used by the market Admin to operate the
 * market
 *
 * @generated from message injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket
 */
export class MsgAdminUpdateBinaryOptionsMarket extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string market_id = 2;
         */
        this.marketId = "";
        /**
         * new price at which market will be settled
         *
         * @generated from field: string settlement_price = 3;
         */
        this.settlementPrice = "";
        /**
         * expiration timestamp
         *
         * @generated from field: int64 expiration_timestamp = 4;
         */
        this.expirationTimestamp = protoInt64.zero;
        /**
         * expiration timestamp
         *
         * @generated from field: int64 settlement_timestamp = 5;
         */
        this.settlementTimestamp = protoInt64.zero;
        /**
         * Status of the market
         *
         * @generated from field: injective.exchange.v1beta1.MarketStatus status = 6;
         */
        this.status = MarketStatus.Unspecified;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgAdminUpdateBinaryOptionsMarket().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgAdminUpdateBinaryOptionsMarket().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgAdminUpdateBinaryOptionsMarket().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgAdminUpdateBinaryOptionsMarket, a, b);
    }
}
MsgAdminUpdateBinaryOptionsMarket.runtime = proto3;
MsgAdminUpdateBinaryOptionsMarket.typeName = "injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket";
MsgAdminUpdateBinaryOptionsMarket.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "settlement_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expiration_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "settlement_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(MarketStatus) },
]);
/**
 * MsgAdminUpdateBinaryOptionsMarketResponse is the response for
 * AdminUpdateBinaryOptionsMarket rpc method
 *
 * @generated from message injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarketResponse
 */
export class MsgAdminUpdateBinaryOptionsMarketResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgAdminUpdateBinaryOptionsMarketResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgAdminUpdateBinaryOptionsMarketResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgAdminUpdateBinaryOptionsMarketResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgAdminUpdateBinaryOptionsMarketResponse, a, b);
    }
}
MsgAdminUpdateBinaryOptionsMarketResponse.runtime = proto3;
MsgAdminUpdateBinaryOptionsMarketResponse.typeName = "injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarketResponse";
MsgAdminUpdateBinaryOptionsMarketResponse.fields = proto3.util.newFieldList(() => []);
//# sourceMappingURL=tx_pb.js.map