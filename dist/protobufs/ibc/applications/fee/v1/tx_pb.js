// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/applications/fee/v1/tx.proto (package ibc.applications.fee.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { Fee, PacketFee } from "./fee_pb.js";
import { PacketId } from "../../../core/channel/v1/channel_pb.js";
/**
 * MsgRegisterPayee defines the request type for the RegisterPayee rpc
 *
 * @generated from message ibc.applications.fee.v1.MsgRegisterPayee
 */
export class MsgRegisterPayee extends Message {
    constructor(data) {
        super();
        /**
         * unique port identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * unique channel identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        /**
         * the relayer address
         *
         * @generated from field: string relayer = 3;
         */
        this.relayer = "";
        /**
         * the payee address
         *
         * @generated from field: string payee = 4;
         */
        this.payee = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgRegisterPayee().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgRegisterPayee().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgRegisterPayee().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgRegisterPayee, a, b);
    }
}
MsgRegisterPayee.runtime = proto3;
MsgRegisterPayee.typeName = "ibc.applications.fee.v1.MsgRegisterPayee";
MsgRegisterPayee.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relayer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "payee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgRegisterPayeeResponse defines the response type for the RegisterPayee rpc
 *
 * @generated from message ibc.applications.fee.v1.MsgRegisterPayeeResponse
 */
export class MsgRegisterPayeeResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgRegisterPayeeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgRegisterPayeeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgRegisterPayeeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgRegisterPayeeResponse, a, b);
    }
}
MsgRegisterPayeeResponse.runtime = proto3;
MsgRegisterPayeeResponse.typeName = "ibc.applications.fee.v1.MsgRegisterPayeeResponse";
MsgRegisterPayeeResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgRegisterCounterpartyPayee defines the request type for the RegisterCounterpartyPayee rpc
 *
 * @generated from message ibc.applications.fee.v1.MsgRegisterCounterpartyPayee
 */
export class MsgRegisterCounterpartyPayee extends Message {
    constructor(data) {
        super();
        /**
         * unique port identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * unique channel identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        /**
         * the relayer address
         *
         * @generated from field: string relayer = 3;
         */
        this.relayer = "";
        /**
         * the counterparty payee address
         *
         * @generated from field: string counterparty_payee = 4;
         */
        this.counterpartyPayee = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgRegisterCounterpartyPayee().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgRegisterCounterpartyPayee().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgRegisterCounterpartyPayee().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgRegisterCounterpartyPayee, a, b);
    }
}
MsgRegisterCounterpartyPayee.runtime = proto3;
MsgRegisterCounterpartyPayee.typeName = "ibc.applications.fee.v1.MsgRegisterCounterpartyPayee";
MsgRegisterCounterpartyPayee.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relayer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "counterparty_payee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgRegisterCounterpartyPayeeResponse defines the response type for the RegisterCounterpartyPayee rpc
 *
 * @generated from message ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse
 */
export class MsgRegisterCounterpartyPayeeResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgRegisterCounterpartyPayeeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgRegisterCounterpartyPayeeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgRegisterCounterpartyPayeeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgRegisterCounterpartyPayeeResponse, a, b);
    }
}
MsgRegisterCounterpartyPayeeResponse.runtime = proto3;
MsgRegisterCounterpartyPayeeResponse.typeName = "ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse";
MsgRegisterCounterpartyPayeeResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgPayPacketFee defines the request type for the PayPacketFee rpc
 * This Msg can be used to pay for a packet at the next sequence send & should be combined with the Msg that will be
 * paid for
 *
 * @generated from message ibc.applications.fee.v1.MsgPayPacketFee
 */
export class MsgPayPacketFee extends Message {
    constructor(data) {
        super();
        /**
         * the source port unique identifier
         *
         * @generated from field: string source_port_id = 2;
         */
        this.sourcePortId = "";
        /**
         * the source channel unique identifier
         *
         * @generated from field: string source_channel_id = 3;
         */
        this.sourceChannelId = "";
        /**
         * account address to refund fee if necessary
         *
         * @generated from field: string signer = 4;
         */
        this.signer = "";
        /**
         * optional list of relayers permitted to the receive packet fees
         *
         * @generated from field: repeated string relayers = 5;
         */
        this.relayers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgPayPacketFee().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgPayPacketFee().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgPayPacketFee().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgPayPacketFee, a, b);
    }
}
MsgPayPacketFee.runtime = proto3;
MsgPayPacketFee.typeName = "ibc.applications.fee.v1.MsgPayPacketFee";
MsgPayPacketFee.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "fee", kind: "message", T: Fee },
    { no: 2, name: "source_port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "source_channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "relayers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * MsgPayPacketFeeResponse defines the response type for the PayPacketFee rpc
 *
 * @generated from message ibc.applications.fee.v1.MsgPayPacketFeeResponse
 */
export class MsgPayPacketFeeResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgPayPacketFeeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgPayPacketFeeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgPayPacketFeeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgPayPacketFeeResponse, a, b);
    }
}
MsgPayPacketFeeResponse.runtime = proto3;
MsgPayPacketFeeResponse.typeName = "ibc.applications.fee.v1.MsgPayPacketFeeResponse";
MsgPayPacketFeeResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgPayPacketFeeAsync defines the request type for the PayPacketFeeAsync rpc
 * This Msg can be used to pay for a packet at a specified sequence (instead of the next sequence send)
 *
 * @generated from message ibc.applications.fee.v1.MsgPayPacketFeeAsync
 */
export class MsgPayPacketFeeAsync extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgPayPacketFeeAsync().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgPayPacketFeeAsync().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgPayPacketFeeAsync().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgPayPacketFeeAsync, a, b);
    }
}
MsgPayPacketFeeAsync.runtime = proto3;
MsgPayPacketFeeAsync.typeName = "ibc.applications.fee.v1.MsgPayPacketFeeAsync";
MsgPayPacketFeeAsync.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "packet_id", kind: "message", T: PacketId },
    { no: 2, name: "packet_fee", kind: "message", T: PacketFee },
]);
/**
 * MsgPayPacketFeeAsyncResponse defines the response type for the PayPacketFeeAsync rpc
 *
 * @generated from message ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse
 */
export class MsgPayPacketFeeAsyncResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgPayPacketFeeAsyncResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgPayPacketFeeAsyncResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgPayPacketFeeAsyncResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgPayPacketFeeAsyncResponse, a, b);
    }
}
MsgPayPacketFeeAsyncResponse.runtime = proto3;
MsgPayPacketFeeAsyncResponse.typeName = "ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse";
MsgPayPacketFeeAsyncResponse.fields = proto3.util.newFieldList(() => []);
//# sourceMappingURL=tx_pb.js.map