// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/lightclients/solomachine/v3/solomachine.proto (package ibc.lightclients.solomachine.v3, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * ClientState defines a solo machine client that tracks the current consensus
 * state and if the client is frozen.
 *
 * @generated from message ibc.lightclients.solomachine.v3.ClientState
 */
export class ClientState extends Message {
    constructor(data) {
        super();
        /**
         * latest sequence of the client state
         *
         * @generated from field: uint64 sequence = 1;
         */
        this.sequence = protoInt64.zero;
        /**
         * frozen sequence of the solo machine
         *
         * @generated from field: bool is_frozen = 2;
         */
        this.isFrozen = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClientState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClientState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClientState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClientState, a, b);
    }
}
ClientState.runtime = proto3;
ClientState.typeName = "ibc.lightclients.solomachine.v3.ClientState";
ClientState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "is_frozen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "consensus_state", kind: "message", T: ConsensusState },
]);
/**
 * ConsensusState defines a solo machine consensus state. The sequence of a
 * consensus state is contained in the "height" key used in storing the
 * consensus state.
 *
 * @generated from message ibc.lightclients.solomachine.v3.ConsensusState
 */
export class ConsensusState extends Message {
    constructor(data) {
        super();
        /**
         * diversifier allows the same public key to be re-used across different solo
         * machine clients (potentially on different chains) without being considered
         * misbehaviour.
         *
         * @generated from field: string diversifier = 2;
         */
        this.diversifier = "";
        /**
         * @generated from field: uint64 timestamp = 3;
         */
        this.timestamp = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConsensusState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConsensusState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConsensusState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConsensusState, a, b);
    }
}
ConsensusState.runtime = proto3;
ConsensusState.typeName = "ibc.lightclients.solomachine.v3.ConsensusState";
ConsensusState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "message", T: Any },
    { no: 2, name: "diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Header defines a solo machine consensus header
 *
 * @generated from message ibc.lightclients.solomachine.v3.Header
 */
export class Header extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 timestamp = 1;
         */
        this.timestamp = protoInt64.zero;
        /**
         * @generated from field: bytes signature = 2;
         */
        this.signature = new Uint8Array(0);
        /**
         * @generated from field: string new_diversifier = 4;
         */
        this.newDiversifier = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Header().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Header().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Header().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Header, a, b);
    }
}
Header.runtime = proto3;
Header.typeName = "ibc.lightclients.solomachine.v3.Header";
Header.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "new_public_key", kind: "message", T: Any },
    { no: 4, name: "new_diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Misbehaviour defines misbehaviour for a solo machine which consists
 * of a sequence and two signatures over different messages at that sequence.
 *
 * @generated from message ibc.lightclients.solomachine.v3.Misbehaviour
 */
export class Misbehaviour extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 sequence = 1;
         */
        this.sequence = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Misbehaviour().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Misbehaviour().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Misbehaviour().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Misbehaviour, a, b);
    }
}
Misbehaviour.runtime = proto3;
Misbehaviour.typeName = "ibc.lightclients.solomachine.v3.Misbehaviour";
Misbehaviour.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "signature_one", kind: "message", T: SignatureAndData },
    { no: 3, name: "signature_two", kind: "message", T: SignatureAndData },
]);
/**
 * SignatureAndData contains a signature and the data signed over to create that
 * signature.
 *
 * @generated from message ibc.lightclients.solomachine.v3.SignatureAndData
 */
export class SignatureAndData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes signature = 1;
         */
        this.signature = new Uint8Array(0);
        /**
         * @generated from field: bytes path = 2;
         */
        this.path = new Uint8Array(0);
        /**
         * @generated from field: bytes data = 3;
         */
        this.data = new Uint8Array(0);
        /**
         * @generated from field: uint64 timestamp = 4;
         */
        this.timestamp = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SignatureAndData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SignatureAndData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SignatureAndData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SignatureAndData, a, b);
    }
}
SignatureAndData.runtime = proto3;
SignatureAndData.typeName = "ibc.lightclients.solomachine.v3.SignatureAndData";
SignatureAndData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * TimestampedSignatureData contains the signature data and the timestamp of the
 * signature.
 *
 * @generated from message ibc.lightclients.solomachine.v3.TimestampedSignatureData
 */
export class TimestampedSignatureData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes signature_data = 1;
         */
        this.signatureData = new Uint8Array(0);
        /**
         * @generated from field: uint64 timestamp = 2;
         */
        this.timestamp = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TimestampedSignatureData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TimestampedSignatureData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TimestampedSignatureData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TimestampedSignatureData, a, b);
    }
}
TimestampedSignatureData.runtime = proto3;
TimestampedSignatureData.typeName = "ibc.lightclients.solomachine.v3.TimestampedSignatureData";
TimestampedSignatureData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "signature_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * SignBytes defines the signed bytes used for signature verification.
 *
 * @generated from message ibc.lightclients.solomachine.v3.SignBytes
 */
export class SignBytes extends Message {
    constructor(data) {
        super();
        /**
         * the sequence number
         *
         * @generated from field: uint64 sequence = 1;
         */
        this.sequence = protoInt64.zero;
        /**
         * the proof timestamp
         *
         * @generated from field: uint64 timestamp = 2;
         */
        this.timestamp = protoInt64.zero;
        /**
         * the public key diversifier
         *
         * @generated from field: string diversifier = 3;
         */
        this.diversifier = "";
        /**
         * the standardised path bytes
         *
         * @generated from field: bytes path = 4;
         */
        this.path = new Uint8Array(0);
        /**
         * the marshaled data bytes
         *
         * @generated from field: bytes data = 5;
         */
        this.data = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SignBytes().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SignBytes().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SignBytes().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SignBytes, a, b);
    }
}
SignBytes.runtime = proto3;
SignBytes.typeName = "ibc.lightclients.solomachine.v3.SignBytes";
SignBytes.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * HeaderData returns the SignBytes data for update verification.
 *
 * @generated from message ibc.lightclients.solomachine.v3.HeaderData
 */
export class HeaderData extends Message {
    constructor(data) {
        super();
        /**
         * header diversifier
         *
         * @generated from field: string new_diversifier = 2;
         */
        this.newDiversifier = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HeaderData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HeaderData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HeaderData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(HeaderData, a, b);
    }
}
HeaderData.runtime = proto3;
HeaderData.typeName = "ibc.lightclients.solomachine.v3.HeaderData";
HeaderData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "new_pub_key", kind: "message", T: Any },
    { no: 2, name: "new_diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=solomachine_pb.js.map