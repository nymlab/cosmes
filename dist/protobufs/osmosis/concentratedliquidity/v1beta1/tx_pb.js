// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/concentratedliquidity/v1beta1/tx.proto (package osmosis.concentratedliquidity.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * ===================== MsgCreatePosition
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgCreatePosition
 */
export class MsgCreatePosition extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        /**
         * @generated from field: string sender = 2;
         */
        this.sender = "";
        /**
         * @generated from field: int64 lower_tick = 3;
         */
        this.lowerTick = protoInt64.zero;
        /**
         * @generated from field: int64 upper_tick = 4;
         */
        this.upperTick = protoInt64.zero;
        /**
         * tokens_provided is the amount of tokens provided for the position.
         * It must at a minimum be of length 1 (for a single sided position)
         * and at a maximum be of length 2 (for a position that straddles the current
         * tick).
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin tokens_provided = 5;
         */
        this.tokensProvided = [];
        /**
         * @generated from field: string token_min_amount0 = 6;
         */
        this.tokenMinAmount0 = "";
        /**
         * @generated from field: string token_min_amount1 = 7;
         */
        this.tokenMinAmount1 = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreatePosition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreatePosition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreatePosition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreatePosition, a, b);
    }
}
MsgCreatePosition.runtime = proto3;
MsgCreatePosition.typeName = "osmosis.concentratedliquidity.v1beta1.MsgCreatePosition";
MsgCreatePosition.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lower_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "upper_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "tokens_provided", kind: "message", T: Coin, repeated: true },
    { no: 6, name: "token_min_amount0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "token_min_amount1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgCreatePositionResponse
 */
export class MsgCreatePositionResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 position_id = 1;
         */
        this.positionId = protoInt64.zero;
        /**
         * @generated from field: string amount0 = 2;
         */
        this.amount0 = "";
        /**
         * @generated from field: string amount1 = 3;
         */
        this.amount1 = "";
        /**
         * @generated from field: string liquidity_created = 5;
         */
        this.liquidityCreated = "";
        /**
         * the lower and upper tick are in the response because there are
         * instances in which multiple ticks represent the same price, so
         * we may move their provided tick to the canonical tick that represents
         * the same price.
         *
         * @generated from field: int64 lower_tick = 6;
         */
        this.lowerTick = protoInt64.zero;
        /**
         * @generated from field: int64 upper_tick = 7;
         */
        this.upperTick = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreatePositionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreatePositionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreatePositionResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreatePositionResponse, a, b);
    }
}
MsgCreatePositionResponse.runtime = proto3;
MsgCreatePositionResponse.typeName = "osmosis.concentratedliquidity.v1beta1.MsgCreatePositionResponse";
MsgCreatePositionResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amount0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "liquidity_created", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "lower_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "upper_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * ===================== MsgAddToPosition
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgAddToPosition
 */
export class MsgAddToPosition extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 position_id = 1;
         */
        this.positionId = protoInt64.zero;
        /**
         * @generated from field: string sender = 2;
         */
        this.sender = "";
        /**
         * amount0 represents the amount of token0 willing to put in.
         *
         * @generated from field: string amount0 = 3;
         */
        this.amount0 = "";
        /**
         * amount1 represents the amount of token1 willing to put in.
         *
         * @generated from field: string amount1 = 4;
         */
        this.amount1 = "";
        /**
         * token_min_amount0 represents the minimum amount of token0 desired from the
         * new position being created. Note that this field indicates the min amount0
         * corresponding to the liquidity that is being added, not the total
         * liquidity of the position.
         *
         * @generated from field: string token_min_amount0 = 5;
         */
        this.tokenMinAmount0 = "";
        /**
         * token_min_amount1 represents the minimum amount of token1 desired from the
         * new position being created. Note that this field indicates the min amount1
         * corresponding to the liquidity that is being added, not the total
         * liquidity of the position.
         *
         * @generated from field: string token_min_amount1 = 6;
         */
        this.tokenMinAmount1 = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgAddToPosition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgAddToPosition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgAddToPosition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgAddToPosition, a, b);
    }
}
MsgAddToPosition.runtime = proto3;
MsgAddToPosition.typeName = "osmosis.concentratedliquidity.v1beta1.MsgAddToPosition";
MsgAddToPosition.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "token_min_amount0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "token_min_amount1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgAddToPositionResponse
 */
export class MsgAddToPositionResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 position_id = 1;
         */
        this.positionId = protoInt64.zero;
        /**
         * @generated from field: string amount0 = 2;
         */
        this.amount0 = "";
        /**
         * @generated from field: string amount1 = 3;
         */
        this.amount1 = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgAddToPositionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgAddToPositionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgAddToPositionResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgAddToPositionResponse, a, b);
    }
}
MsgAddToPositionResponse.runtime = proto3;
MsgAddToPositionResponse.typeName = "osmosis.concentratedliquidity.v1beta1.MsgAddToPositionResponse";
MsgAddToPositionResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amount0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ===================== MsgWithdrawPosition
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgWithdrawPosition
 */
export class MsgWithdrawPosition extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 position_id = 1;
         */
        this.positionId = protoInt64.zero;
        /**
         * @generated from field: string sender = 2;
         */
        this.sender = "";
        /**
         * @generated from field: string liquidity_amount = 3;
         */
        this.liquidityAmount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgWithdrawPosition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgWithdrawPosition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgWithdrawPosition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgWithdrawPosition, a, b);
    }
}
MsgWithdrawPosition.runtime = proto3;
MsgWithdrawPosition.typeName = "osmosis.concentratedliquidity.v1beta1.MsgWithdrawPosition";
MsgWithdrawPosition.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "liquidity_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgWithdrawPositionResponse
 */
export class MsgWithdrawPositionResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string amount0 = 1;
         */
        this.amount0 = "";
        /**
         * @generated from field: string amount1 = 2;
         */
        this.amount1 = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgWithdrawPositionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgWithdrawPositionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgWithdrawPositionResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgWithdrawPositionResponse, a, b);
    }
}
MsgWithdrawPositionResponse.runtime = proto3;
MsgWithdrawPositionResponse.typeName = "osmosis.concentratedliquidity.v1beta1.MsgWithdrawPositionResponse";
MsgWithdrawPositionResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "amount0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ===================== MsgCollectSpreadRewards
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewards
 */
export class MsgCollectSpreadRewards extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated uint64 position_ids = 1;
         */
        this.positionIds = [];
        /**
         * @generated from field: string sender = 2;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCollectSpreadRewards().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCollectSpreadRewards().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCollectSpreadRewards().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCollectSpreadRewards, a, b);
    }
}
MsgCollectSpreadRewards.runtime = proto3;
MsgCollectSpreadRewards.typeName = "osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewards";
MsgCollectSpreadRewards.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewardsResponse
 */
export class MsgCollectSpreadRewardsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin collected_spread_rewards = 1;
         */
        this.collectedSpreadRewards = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCollectSpreadRewardsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCollectSpreadRewardsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCollectSpreadRewardsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCollectSpreadRewardsResponse, a, b);
    }
}
MsgCollectSpreadRewardsResponse.runtime = proto3;
MsgCollectSpreadRewardsResponse.typeName = "osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewardsResponse";
MsgCollectSpreadRewardsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "collected_spread_rewards", kind: "message", T: Coin, repeated: true },
]);
/**
 * ===================== MsgCollectIncentives
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgCollectIncentives
 */
export class MsgCollectIncentives extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated uint64 position_ids = 1;
         */
        this.positionIds = [];
        /**
         * @generated from field: string sender = 2;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCollectIncentives().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCollectIncentives().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCollectIncentives().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCollectIncentives, a, b);
    }
}
MsgCollectIncentives.runtime = proto3;
MsgCollectIncentives.typeName = "osmosis.concentratedliquidity.v1beta1.MsgCollectIncentives";
MsgCollectIncentives.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgCollectIncentivesResponse
 */
export class MsgCollectIncentivesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin collected_incentives = 1;
         */
        this.collectedIncentives = [];
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin forfeited_incentives = 2;
         */
        this.forfeitedIncentives = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCollectIncentivesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCollectIncentivesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCollectIncentivesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCollectIncentivesResponse, a, b);
    }
}
MsgCollectIncentivesResponse.runtime = proto3;
MsgCollectIncentivesResponse.typeName = "osmosis.concentratedliquidity.v1beta1.MsgCollectIncentivesResponse";
MsgCollectIncentivesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "collected_incentives", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "forfeited_incentives", kind: "message", T: Coin, repeated: true },
]);
/**
 * ===================== MsgFungifyChargedPositions
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositions
 */
export class MsgFungifyChargedPositions extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated uint64 position_ids = 1;
         */
        this.positionIds = [];
        /**
         * @generated from field: string sender = 2;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgFungifyChargedPositions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgFungifyChargedPositions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgFungifyChargedPositions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgFungifyChargedPositions, a, b);
    }
}
MsgFungifyChargedPositions.runtime = proto3;
MsgFungifyChargedPositions.typeName = "osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositions";
MsgFungifyChargedPositions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositionsResponse
 */
export class MsgFungifyChargedPositionsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 new_position_id = 1;
         */
        this.newPositionId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgFungifyChargedPositionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgFungifyChargedPositionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgFungifyChargedPositionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgFungifyChargedPositionsResponse, a, b);
    }
}
MsgFungifyChargedPositionsResponse.runtime = proto3;
MsgFungifyChargedPositionsResponse.typeName = "osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositionsResponse";
MsgFungifyChargedPositionsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "new_position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * ===================== MsgTransferPositions
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgTransferPositions
 */
export class MsgTransferPositions extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated uint64 position_ids = 1;
         */
        this.positionIds = [];
        /**
         * @generated from field: string sender = 2;
         */
        this.sender = "";
        /**
         * @generated from field: string new_owner = 3;
         */
        this.newOwner = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgTransferPositions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgTransferPositions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgTransferPositions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgTransferPositions, a, b);
    }
}
MsgTransferPositions.runtime = proto3;
MsgTransferPositions.typeName = "osmosis.concentratedliquidity.v1beta1.MsgTransferPositions";
MsgTransferPositions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.MsgTransferPositionsResponse
 */
export class MsgTransferPositionsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgTransferPositionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgTransferPositionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgTransferPositionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgTransferPositionsResponse, a, b);
    }
}
MsgTransferPositionsResponse.runtime = proto3;
MsgTransferPositionsResponse.typeName = "osmosis.concentratedliquidity.v1beta1.MsgTransferPositionsResponse";
MsgTransferPositionsResponse.fields = proto3.util.newFieldList(() => []);
//# sourceMappingURL=tx_pb.js.map