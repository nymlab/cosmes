// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ethermint/evm/v1/tx.proto (package ethermint.evm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AccessTuple, Log, Params } from "./evm_pb.js";
/**
 * MsgEthereumTx encapsulates an Ethereum transaction as an SDK message.
 *
 * @generated from message ethermint.evm.v1.MsgEthereumTx
 */
export class MsgEthereumTx extends Message {
    constructor(data) {
        super();
        /**
         * size is the encoded storage size of the transaction (DEPRECATED)
         *
         * @generated from field: double size = 2;
         */
        this.size = 0;
        /**
         * hash of the transaction in hex format
         *
         * @generated from field: string hash = 3;
         */
        this.hash = "";
        /**
         * from is the ethereum signer address in hex format. This address value is checked
         * against the address derived from the signature (V, R, S) using the
         * secp256k1 elliptic curve
         *
         * @generated from field: string from = 4;
         */
        this.from = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgEthereumTx().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgEthereumTx().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgEthereumTx().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgEthereumTx, a, b);
    }
}
MsgEthereumTx.runtime = proto3;
MsgEthereumTx.typeName = "ethermint.evm.v1.MsgEthereumTx";
MsgEthereumTx.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Any },
    { no: 2, name: "size", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * LegacyTx is the transaction data of regular Ethereum transactions.
 * NOTE: All non-protected transactions (i.e non EIP155 signed) will fail if the
 * AllowUnprotectedTxs parameter is disabled.
 *
 * @generated from message ethermint.evm.v1.LegacyTx
 */
export class LegacyTx extends Message {
    constructor(data) {
        super();
        /**
         * nonce corresponds to the account nonce (transaction sequence).
         *
         * @generated from field: uint64 nonce = 1;
         */
        this.nonce = protoInt64.zero;
        /**
         * gas_price defines the value for each gas unit
         *
         * @generated from field: string gas_price = 2;
         */
        this.gasPrice = "";
        /**
         * gas defines the gas limit defined for the transaction.
         *
         * @generated from field: uint64 gas = 3;
         */
        this.gas = protoInt64.zero;
        /**
         * to is the hex formatted address of the recipient
         *
         * @generated from field: string to = 4;
         */
        this.to = "";
        /**
         * value defines the unsigned integer value of the transaction amount.
         *
         * @generated from field: string value = 5;
         */
        this.value = "";
        /**
         * data is the data payload bytes of the transaction.
         *
         * @generated from field: bytes data = 6;
         */
        this.data = new Uint8Array(0);
        /**
         * v defines the signature value
         *
         * @generated from field: bytes v = 7;
         */
        this.v = new Uint8Array(0);
        /**
         * r defines the signature value
         *
         * @generated from field: bytes r = 8;
         */
        this.r = new Uint8Array(0);
        /**
         * s define the signature value
         *
         * @generated from field: bytes s = 9;
         */
        this.s = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LegacyTx().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LegacyTx().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LegacyTx().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LegacyTx, a, b);
    }
}
LegacyTx.runtime = proto3;
LegacyTx.typeName = "ethermint.evm.v1.LegacyTx";
LegacyTx.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "gas_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "v", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "r", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "s", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * AccessListTx is the data of EIP-2930 access list transactions.
 *
 * @generated from message ethermint.evm.v1.AccessListTx
 */
export class AccessListTx extends Message {
    constructor(data) {
        super();
        /**
         * chain_id of the destination EVM chain
         *
         * @generated from field: string chain_id = 1;
         */
        this.chainId = "";
        /**
         * nonce corresponds to the account nonce (transaction sequence).
         *
         * @generated from field: uint64 nonce = 2;
         */
        this.nonce = protoInt64.zero;
        /**
         * gas_price defines the value for each gas unit
         *
         * @generated from field: string gas_price = 3;
         */
        this.gasPrice = "";
        /**
         * gas defines the gas limit defined for the transaction.
         *
         * @generated from field: uint64 gas = 4;
         */
        this.gas = protoInt64.zero;
        /**
         * to is the recipient address in hex format
         *
         * @generated from field: string to = 5;
         */
        this.to = "";
        /**
         * value defines the unsigned integer value of the transaction amount.
         *
         * @generated from field: string value = 6;
         */
        this.value = "";
        /**
         * data is the data payload bytes of the transaction.
         *
         * @generated from field: bytes data = 7;
         */
        this.data = new Uint8Array(0);
        /**
         * accesses is an array of access tuples
         *
         * @generated from field: repeated ethermint.evm.v1.AccessTuple accesses = 8;
         */
        this.accesses = [];
        /**
         * v defines the signature value
         *
         * @generated from field: bytes v = 9;
         */
        this.v = new Uint8Array(0);
        /**
         * r defines the signature value
         *
         * @generated from field: bytes r = 10;
         */
        this.r = new Uint8Array(0);
        /**
         * s define the signature value
         *
         * @generated from field: bytes s = 11;
         */
        this.s = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AccessListTx().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AccessListTx().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AccessListTx().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AccessListTx, a, b);
    }
}
AccessListTx.runtime = proto3;
AccessListTx.typeName = "ethermint.evm.v1.AccessListTx";
AccessListTx.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "gas_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "gas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "accesses", kind: "message", T: AccessTuple, repeated: true },
    { no: 9, name: "v", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "r", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "s", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * DynamicFeeTx is the data of EIP-1559 dinamic fee transactions.
 *
 * @generated from message ethermint.evm.v1.DynamicFeeTx
 */
export class DynamicFeeTx extends Message {
    constructor(data) {
        super();
        /**
         * chain_id of the destination EVM chain
         *
         * @generated from field: string chain_id = 1;
         */
        this.chainId = "";
        /**
         * nonce corresponds to the account nonce (transaction sequence).
         *
         * @generated from field: uint64 nonce = 2;
         */
        this.nonce = protoInt64.zero;
        /**
         * gas_tip_cap defines the max value for the gas tip
         *
         * @generated from field: string gas_tip_cap = 3;
         */
        this.gasTipCap = "";
        /**
         * gas_fee_cap defines the max value for the gas fee
         *
         * @generated from field: string gas_fee_cap = 4;
         */
        this.gasFeeCap = "";
        /**
         * gas defines the gas limit defined for the transaction.
         *
         * @generated from field: uint64 gas = 5;
         */
        this.gas = protoInt64.zero;
        /**
         * to is the hex formatted address of the recipient
         *
         * @generated from field: string to = 6;
         */
        this.to = "";
        /**
         * value defines the the transaction amount.
         *
         * @generated from field: string value = 7;
         */
        this.value = "";
        /**
         * data is the data payload bytes of the transaction.
         *
         * @generated from field: bytes data = 8;
         */
        this.data = new Uint8Array(0);
        /**
         * accesses is an array of access tuples
         *
         * @generated from field: repeated ethermint.evm.v1.AccessTuple accesses = 9;
         */
        this.accesses = [];
        /**
         * v defines the signature value
         *
         * @generated from field: bytes v = 10;
         */
        this.v = new Uint8Array(0);
        /**
         * r defines the signature value
         *
         * @generated from field: bytes r = 11;
         */
        this.r = new Uint8Array(0);
        /**
         * s define the signature value
         *
         * @generated from field: bytes s = 12;
         */
        this.s = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DynamicFeeTx().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DynamicFeeTx().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DynamicFeeTx().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DynamicFeeTx, a, b);
    }
}
DynamicFeeTx.runtime = proto3;
DynamicFeeTx.typeName = "ethermint.evm.v1.DynamicFeeTx";
DynamicFeeTx.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "gas_tip_cap", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "gas_fee_cap", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "gas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "accesses", kind: "message", T: AccessTuple, repeated: true },
    { no: 10, name: "v", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "r", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 12, name: "s", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * ExtensionOptionsEthereumTx is an extension option for ethereum transactions
 *
 * @generated from message ethermint.evm.v1.ExtensionOptionsEthereumTx
 */
export class ExtensionOptionsEthereumTx extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExtensionOptionsEthereumTx().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExtensionOptionsEthereumTx().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExtensionOptionsEthereumTx().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ExtensionOptionsEthereumTx, a, b);
    }
}
ExtensionOptionsEthereumTx.runtime = proto3;
ExtensionOptionsEthereumTx.typeName = "ethermint.evm.v1.ExtensionOptionsEthereumTx";
ExtensionOptionsEthereumTx.fields = proto3.util.newFieldList(() => []);
/**
 * MsgEthereumTxResponse defines the Msg/EthereumTx response type.
 *
 * @generated from message ethermint.evm.v1.MsgEthereumTxResponse
 */
export class MsgEthereumTxResponse extends Message {
    constructor(data) {
        super();
        /**
         * hash of the ethereum transaction in hex format. This hash differs from the
         * Tendermint sha256 hash of the transaction bytes. See
         * https://github.com/tendermint/tendermint/issues/6539 for reference
         *
         * @generated from field: string hash = 1;
         */
        this.hash = "";
        /**
         * logs contains the transaction hash and the proto-compatible ethereum
         * logs.
         *
         * @generated from field: repeated ethermint.evm.v1.Log logs = 2;
         */
        this.logs = [];
        /**
         * ret is the returned data from evm function (result or data supplied with revert
         * opcode)
         *
         * @generated from field: bytes ret = 3;
         */
        this.ret = new Uint8Array(0);
        /**
         * vm_error is the error returned by vm execution
         *
         * @generated from field: string vm_error = 4;
         */
        this.vmError = "";
        /**
         * gas_used specifies how much gas was consumed by the transaction
         *
         * @generated from field: uint64 gas_used = 5;
         */
        this.gasUsed = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgEthereumTxResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgEthereumTxResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgEthereumTxResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgEthereumTxResponse, a, b);
    }
}
MsgEthereumTxResponse.runtime = proto3;
MsgEthereumTxResponse.typeName = "ethermint.evm.v1.MsgEthereumTxResponse";
MsgEthereumTxResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "logs", kind: "message", T: Log, repeated: true },
    { no: 3, name: "ret", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "vm_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "gas_used", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * MsgUpdateParams defines a Msg for updating the x/evm module parameters.
 *
 * @generated from message ethermint.evm.v1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message {
    constructor(data) {
        super();
        /**
         * authority is the address of the governance account.
         *
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateParams, a, b);
    }
}
MsgUpdateParams.runtime = proto3;
MsgUpdateParams.typeName = "ethermint.evm.v1.MsgUpdateParams";
MsgUpdateParams.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
]);
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message ethermint.evm.v1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateParamsResponse, a, b);
    }
}
MsgUpdateParamsResponse.runtime = proto3;
MsgUpdateParamsResponse.typeName = "ethermint.evm.v1.MsgUpdateParamsResponse";
MsgUpdateParamsResponse.fields = proto3.util.newFieldList(() => []);
//# sourceMappingURL=tx_pb.js.map