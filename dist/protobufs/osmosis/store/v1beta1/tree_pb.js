// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/store/v1beta1/tree.proto (package osmosis.store.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * @generated from message osmosis.store.v1beta1.Node
 */
export class Node extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.store.v1beta1.Child children = 1;
         */
        this.children = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Node().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Node().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Node().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Node, a, b);
    }
}
Node.runtime = proto3;
Node.typeName = "osmosis.store.v1beta1.Node";
Node.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "children", kind: "message", T: Child, repeated: true },
]);
/**
 * @generated from message osmosis.store.v1beta1.Child
 */
export class Child extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes index = 1;
         */
        this.index = new Uint8Array(0);
        /**
         * @generated from field: string accumulation = 2;
         */
        this.accumulation = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Child().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Child().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Child().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Child, a, b);
    }
}
Child.runtime = proto3;
Child.typeName = "osmosis.store.v1beta1.Child";
Child.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "accumulation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.store.v1beta1.Leaf
 */
export class Leaf extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Leaf().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Leaf().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Leaf().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Leaf, a, b);
    }
}
Leaf.runtime = proto3;
Leaf.typeName = "osmosis.store.v1beta1.Leaf";
Leaf.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "leaf", kind: "message", T: Child },
]);
//# sourceMappingURL=tree_pb.js.map