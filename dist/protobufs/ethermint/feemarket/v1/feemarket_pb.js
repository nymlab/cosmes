// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ethermint/feemarket/v1/feemarket.proto (package ethermint.feemarket.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * Params defines the EVM module parameters
 *
 * @generated from message ethermint.feemarket.v1.Params
 */
export class Params extends Message {
    constructor(data) {
        super();
        /**
         * no_base_fee forces the EIP-1559 base fee to 0 (needed for 0 price calls)
         *
         * @generated from field: bool no_base_fee = 1;
         */
        this.noBaseFee = false;
        /**
         * base_fee_change_denominator bounds the amount the base fee can change
         * between blocks.
         *
         * @generated from field: uint32 base_fee_change_denominator = 2;
         */
        this.baseFeeChangeDenominator = 0;
        /**
         * elasticity_multiplier bounds the maximum gas limit an EIP-1559 block may
         * have.
         *
         * @generated from field: uint32 elasticity_multiplier = 3;
         */
        this.elasticityMultiplier = 0;
        /**
         * enable_height defines at which block height the base fee calculation is enabled.
         *
         * @generated from field: int64 enable_height = 5;
         */
        this.enableHeight = protoInt64.zero;
        /**
         * base_fee for EIP-1559 blocks.
         *
         * @generated from field: string base_fee = 6;
         */
        this.baseFee = "";
        /**
         * min_gas_price defines the minimum gas price value for cosmos and eth transactions
         *
         * @generated from field: string min_gas_price = 7;
         */
        this.minGasPrice = "";
        /**
         * min_gas_multiplier bounds the minimum gas used to be charged
         * to senders based on gas limit
         *
         * @generated from field: string min_gas_multiplier = 8;
         */
        this.minGasMultiplier = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Params().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Params().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Params().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Params, a, b);
    }
}
Params.runtime = proto3;
Params.typeName = "ethermint.feemarket.v1.Params";
Params.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "no_base_fee", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "base_fee_change_denominator", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "elasticity_multiplier", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "enable_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "base_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "min_gas_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "min_gas_multiplier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=feemarket_pb.js.map