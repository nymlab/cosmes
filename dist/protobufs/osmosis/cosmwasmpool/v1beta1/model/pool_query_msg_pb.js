// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/cosmwasmpool/v1beta1/model/pool_query_msg.proto (package osmosis.cosmwasmpool.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * ===================== GetSwapFeeQueryMsg
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsg
 */
export class GetSwapFeeQueryMsg extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSwapFeeQueryMsg().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSwapFeeQueryMsg().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSwapFeeQueryMsg().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetSwapFeeQueryMsg, a, b);
    }
}
GetSwapFeeQueryMsg.runtime = proto3;
GetSwapFeeQueryMsg.typeName = "osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsg";
GetSwapFeeQueryMsg.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "get_swap_fee", kind: "message", T: EmptyStruct },
]);
/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsgResponse
 */
export class GetSwapFeeQueryMsgResponse extends Message {
    constructor(data) {
        super();
        /**
         * swap_fee is the swap fee for this swap estimate.
         *
         * @generated from field: string swap_fee = 3;
         */
        this.swapFee = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetSwapFeeQueryMsgResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetSwapFeeQueryMsgResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetSwapFeeQueryMsgResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetSwapFeeQueryMsgResponse, a, b);
    }
}
GetSwapFeeQueryMsgResponse.runtime = proto3;
GetSwapFeeQueryMsgResponse.typeName = "osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsgResponse";
GetSwapFeeQueryMsgResponse.fields = proto3.util.newFieldList(() => [
    { no: 3, name: "swap_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ===================== SpotPriceQueryMsg
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.SpotPrice
 */
export class SpotPrice extends Message {
    constructor(data) {
        super();
        /**
         * quote_asset_denom is the quote asset of the spot query.
         *
         * @generated from field: string quote_asset_denom = 1;
         */
        this.quoteAssetDenom = "";
        /**
         * base_asset_denom is the base asset of the spot query.
         *
         * @generated from field: string base_asset_denom = 2;
         */
        this.baseAssetDenom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SpotPrice().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SpotPrice().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SpotPrice().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SpotPrice, a, b);
    }
}
SpotPrice.runtime = proto3;
SpotPrice.typeName = "osmosis.cosmwasmpool.v1beta1.SpotPrice";
SpotPrice.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "quote_asset_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base_asset_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsg
 */
export class SpotPriceQueryMsg extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SpotPriceQueryMsg().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SpotPriceQueryMsg().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SpotPriceQueryMsg().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SpotPriceQueryMsg, a, b);
    }
}
SpotPriceQueryMsg.runtime = proto3;
SpotPriceQueryMsg.typeName = "osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsg";
SpotPriceQueryMsg.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "spot_price", kind: "message", T: SpotPrice },
]);
/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsgResponse
 */
export class SpotPriceQueryMsgResponse extends Message {
    constructor(data) {
        super();
        /**
         * spot_price is the spot price returned.
         *
         * @generated from field: string spot_price = 1;
         */
        this.spotPrice = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SpotPriceQueryMsgResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SpotPriceQueryMsgResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SpotPriceQueryMsgResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SpotPriceQueryMsgResponse, a, b);
    }
}
SpotPriceQueryMsgResponse.runtime = proto3;
SpotPriceQueryMsgResponse.typeName = "osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsgResponse";
SpotPriceQueryMsgResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "spot_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ===================== GetTotalPoolLiquidityQueryMsg
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.EmptyStruct
 */
export class EmptyStruct extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EmptyStruct().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EmptyStruct().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EmptyStruct().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EmptyStruct, a, b);
    }
}
EmptyStruct.runtime = proto3;
EmptyStruct.typeName = "osmosis.cosmwasmpool.v1beta1.EmptyStruct";
EmptyStruct.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsg
 */
export class GetTotalPoolLiquidityQueryMsg extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetTotalPoolLiquidityQueryMsg().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetTotalPoolLiquidityQueryMsg().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetTotalPoolLiquidityQueryMsg().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetTotalPoolLiquidityQueryMsg, a, b);
    }
}
GetTotalPoolLiquidityQueryMsg.runtime = proto3;
GetTotalPoolLiquidityQueryMsg.typeName = "osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsg";
GetTotalPoolLiquidityQueryMsg.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "get_total_pool_liquidity", kind: "message", T: EmptyStruct },
]);
/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsgResponse
 */
export class GetTotalPoolLiquidityQueryMsgResponse extends Message {
    constructor(data) {
        super();
        /**
         *  total_pool_liquidity is the total liquidity in the pool denominated in
         *  coins.
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin total_pool_liquidity = 1;
         */
        this.totalPoolLiquidity = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetTotalPoolLiquidityQueryMsgResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetTotalPoolLiquidityQueryMsgResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetTotalPoolLiquidityQueryMsgResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetTotalPoolLiquidityQueryMsgResponse, a, b);
    }
}
GetTotalPoolLiquidityQueryMsgResponse.runtime = proto3;
GetTotalPoolLiquidityQueryMsgResponse.typeName = "osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsgResponse";
GetTotalPoolLiquidityQueryMsgResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "total_pool_liquidity", kind: "message", T: Coin, repeated: true },
]);
/**
 * ===================== GetTotalSharesQueryMsg
 *
 * @generated from message osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsg
 */
export class GetTotalSharesQueryMsg extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetTotalSharesQueryMsg().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetTotalSharesQueryMsg().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetTotalSharesQueryMsg().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetTotalSharesQueryMsg, a, b);
    }
}
GetTotalSharesQueryMsg.runtime = proto3;
GetTotalSharesQueryMsg.typeName = "osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsg";
GetTotalSharesQueryMsg.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "get_total_shares", kind: "message", T: EmptyStruct },
]);
/**
 * @generated from message osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsgResponse
 */
export class GetTotalSharesQueryMsgResponse extends Message {
    constructor(data) {
        super();
        /**
         * total_shares is the amount of shares returned.
         *
         * @generated from field: string total_shares = 1;
         */
        this.totalShares = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetTotalSharesQueryMsgResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetTotalSharesQueryMsgResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetTotalSharesQueryMsgResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetTotalSharesQueryMsgResponse, a, b);
    }
}
GetTotalSharesQueryMsgResponse.runtime = proto3;
GetTotalSharesQueryMsgResponse.typeName = "osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsgResponse";
GetTotalSharesQueryMsgResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "total_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=pool_query_msg_pb.js.map