// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/oracle/v1beta1/oracle.proto (package injective.oracle.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * @generated from enum injective.oracle.v1beta1.OracleType
 */
export var OracleType;
(function (OracleType) {
    /**
     * @generated from enum value: Unspecified = 0;
     */
    OracleType[OracleType["Unspecified"] = 0] = "Unspecified";
    /**
     * @generated from enum value: Band = 1;
     */
    OracleType[OracleType["Band"] = 1] = "Band";
    /**
     * @generated from enum value: PriceFeed = 2;
     */
    OracleType[OracleType["PriceFeed"] = 2] = "PriceFeed";
    /**
     * @generated from enum value: Coinbase = 3;
     */
    OracleType[OracleType["Coinbase"] = 3] = "Coinbase";
    /**
     * @generated from enum value: Chainlink = 4;
     */
    OracleType[OracleType["Chainlink"] = 4] = "Chainlink";
    /**
     * @generated from enum value: Razor = 5;
     */
    OracleType[OracleType["Razor"] = 5] = "Razor";
    /**
     * @generated from enum value: Dia = 6;
     */
    OracleType[OracleType["Dia"] = 6] = "Dia";
    /**
     * @generated from enum value: API3 = 7;
     */
    OracleType[OracleType["API3"] = 7] = "API3";
    /**
     * @generated from enum value: Uma = 8;
     */
    OracleType[OracleType["Uma"] = 8] = "Uma";
    /**
     * @generated from enum value: Pyth = 9;
     */
    OracleType[OracleType["Pyth"] = 9] = "Pyth";
    /**
     * @generated from enum value: BandIBC = 10;
     */
    OracleType[OracleType["BandIBC"] = 10] = "BandIBC";
    /**
     * @generated from enum value: Provider = 11;
     */
    OracleType[OracleType["Provider"] = 11] = "Provider";
})(OracleType || (OracleType = {}));
// Retrieve enum metadata with: proto3.getEnumType(OracleType)
proto3.util.setEnumType(OracleType, "injective.oracle.v1beta1.OracleType", [
    { no: 0, name: "Unspecified" },
    { no: 1, name: "Band" },
    { no: 2, name: "PriceFeed" },
    { no: 3, name: "Coinbase" },
    { no: 4, name: "Chainlink" },
    { no: 5, name: "Razor" },
    { no: 6, name: "Dia" },
    { no: 7, name: "API3" },
    { no: 8, name: "Uma" },
    { no: 9, name: "Pyth" },
    { no: 10, name: "BandIBC" },
    { no: 11, name: "Provider" },
]);
/**
 * @generated from message injective.oracle.v1beta1.Params
 */
export class Params extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string pyth_contract = 1;
         */
        this.pythContract = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Params().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Params().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Params().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Params, a, b);
    }
}
Params.runtime = proto3;
Params.typeName = "injective.oracle.v1beta1.Params";
Params.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pyth_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.oracle.v1beta1.OracleInfo
 */
export class OracleInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string symbol = 1;
         */
        this.symbol = "";
        /**
         * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 2;
         */
        this.oracleType = OracleType.Unspecified;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OracleInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OracleInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OracleInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OracleInfo, a, b);
    }
}
OracleInfo.runtime = proto3;
OracleInfo.typeName = "injective.oracle.v1beta1.OracleInfo";
OracleInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
]);
/**
 * @generated from message injective.oracle.v1beta1.ChainlinkPriceState
 */
export class ChainlinkPriceState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string feed_id = 1;
         */
        this.feedId = "";
        /**
         * @generated from field: string answer = 2;
         */
        this.answer = "";
        /**
         * @generated from field: uint64 timestamp = 3;
         */
        this.timestamp = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ChainlinkPriceState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ChainlinkPriceState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ChainlinkPriceState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ChainlinkPriceState, a, b);
    }
}
ChainlinkPriceState.runtime = proto3;
ChainlinkPriceState.typeName = "injective.oracle.v1beta1.ChainlinkPriceState";
ChainlinkPriceState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "price_state", kind: "message", T: PriceState },
]);
/**
 * @generated from message injective.oracle.v1beta1.BandPriceState
 */
export class BandPriceState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string symbol = 1;
         */
        this.symbol = "";
        /**
         * @generated from field: string rate = 2;
         */
        this.rate = "";
        /**
         * @generated from field: uint64 resolve_time = 3;
         */
        this.resolveTime = protoInt64.zero;
        /**
         * @generated from field: uint64 request_ID = 4;
         */
        this.requestID = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BandPriceState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BandPriceState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BandPriceState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BandPriceState, a, b);
    }
}
BandPriceState.runtime = proto3;
BandPriceState.typeName = "injective.oracle.v1beta1.BandPriceState";
BandPriceState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resolve_time", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "request_ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "price_state", kind: "message", T: PriceState },
]);
/**
 * @generated from message injective.oracle.v1beta1.PriceFeedState
 */
export class PriceFeedState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string base = 1;
         */
        this.base = "";
        /**
         * @generated from field: string quote = 2;
         */
        this.quote = "";
        /**
         * @generated from field: repeated string relayers = 4;
         */
        this.relayers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PriceFeedState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PriceFeedState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PriceFeedState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PriceFeedState, a, b);
    }
}
PriceFeedState.runtime = proto3;
PriceFeedState.typeName = "injective.oracle.v1beta1.PriceFeedState";
PriceFeedState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "price_state", kind: "message", T: PriceState },
    { no: 4, name: "relayers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message injective.oracle.v1beta1.ProviderInfo
 */
export class ProviderInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string provider = 1;
         */
        this.provider = "";
        /**
         * @generated from field: repeated string relayers = 2;
         */
        this.relayers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProviderInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProviderInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProviderInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProviderInfo, a, b);
    }
}
ProviderInfo.runtime = proto3;
ProviderInfo.typeName = "injective.oracle.v1beta1.ProviderInfo";
ProviderInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "relayers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message injective.oracle.v1beta1.ProviderState
 */
export class ProviderState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.oracle.v1beta1.ProviderPriceState provider_price_states = 2;
         */
        this.providerPriceStates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProviderState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProviderState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProviderState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProviderState, a, b);
    }
}
ProviderState.runtime = proto3;
ProviderState.typeName = "injective.oracle.v1beta1.ProviderState";
ProviderState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "provider_info", kind: "message", T: ProviderInfo },
    { no: 2, name: "provider_price_states", kind: "message", T: ProviderPriceState, repeated: true },
]);
/**
 * @generated from message injective.oracle.v1beta1.ProviderPriceState
 */
export class ProviderPriceState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string symbol = 1;
         */
        this.symbol = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProviderPriceState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProviderPriceState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProviderPriceState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProviderPriceState, a, b);
    }
}
ProviderPriceState.runtime = proto3;
ProviderPriceState.typeName = "injective.oracle.v1beta1.ProviderPriceState";
ProviderPriceState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "message", T: PriceState },
]);
/**
 * @generated from message injective.oracle.v1beta1.PriceFeedInfo
 */
export class PriceFeedInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string base = 1;
         */
        this.base = "";
        /**
         * @generated from field: string quote = 2;
         */
        this.quote = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PriceFeedInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PriceFeedInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PriceFeedInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PriceFeedInfo, a, b);
    }
}
PriceFeedInfo.runtime = proto3;
PriceFeedInfo.typeName = "injective.oracle.v1beta1.PriceFeedInfo";
PriceFeedInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.oracle.v1beta1.PriceFeedPrice
 */
export class PriceFeedPrice extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string price = 1;
         */
        this.price = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PriceFeedPrice().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PriceFeedPrice().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PriceFeedPrice().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PriceFeedPrice, a, b);
    }
}
PriceFeedPrice.runtime = proto3;
PriceFeedPrice.typeName = "injective.oracle.v1beta1.PriceFeedPrice";
PriceFeedPrice.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.oracle.v1beta1.CoinbasePriceState
 */
export class CoinbasePriceState extends Message {
    constructor(data) {
        super();
        /**
         * kind should always be "prices"
         *
         * @generated from field: string kind = 1;
         */
        this.kind = "";
        /**
         * timestamp of the when the price was signed by coinbase
         *
         * @generated from field: uint64 timestamp = 2;
         */
        this.timestamp = protoInt64.zero;
        /**
         * the symbol of the price, e.g. BTC
         *
         * @generated from field: string key = 3;
         */
        this.key = "";
        /**
         * the value of the price scaled by 1e6
         *
         * @generated from field: uint64 value = 4;
         */
        this.value = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CoinbasePriceState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CoinbasePriceState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CoinbasePriceState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CoinbasePriceState, a, b);
    }
}
CoinbasePriceState.runtime = proto3;
CoinbasePriceState.typeName = "injective.oracle.v1beta1.CoinbasePriceState";
CoinbasePriceState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "price_state", kind: "message", T: PriceState },
]);
/**
 * @generated from message injective.oracle.v1beta1.PriceState
 */
export class PriceState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string price = 1;
         */
        this.price = "";
        /**
         * @generated from field: string cumulative_price = 2;
         */
        this.cumulativePrice = "";
        /**
         * @generated from field: int64 timestamp = 3;
         */
        this.timestamp = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PriceState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PriceState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PriceState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PriceState, a, b);
    }
}
PriceState.runtime = proto3;
PriceState.typeName = "injective.oracle.v1beta1.PriceState";
PriceState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cumulative_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message injective.oracle.v1beta1.PythPriceState
 */
export class PythPriceState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string price_id = 1;
         */
        this.priceId = "";
        /**
         * @generated from field: string ema_price = 2;
         */
        this.emaPrice = "";
        /**
         * @generated from field: string ema_conf = 3;
         */
        this.emaConf = "";
        /**
         * @generated from field: string conf = 4;
         */
        this.conf = "";
        /**
         * @generated from field: uint64 publish_time = 5;
         */
        this.publishTime = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PythPriceState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PythPriceState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PythPriceState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PythPriceState, a, b);
    }
}
PythPriceState.runtime = proto3;
PythPriceState.typeName = "injective.oracle.v1beta1.PythPriceState";
PythPriceState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ema_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ema_conf", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "conf", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "publish_time", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "price_state", kind: "message", T: PriceState },
]);
/**
 * @generated from message injective.oracle.v1beta1.BandOracleRequest
 */
export class BandOracleRequest extends Message {
    constructor(data) {
        super();
        /**
         * Unique Identifier for band ibc oracle request
         *
         * @generated from field: uint64 request_id = 1;
         */
        this.requestId = protoInt64.zero;
        /**
         * OracleScriptID is the unique identifier of the oracle script to be
         * executed.
         *
         * @generated from field: int64 oracle_script_id = 2;
         */
        this.oracleScriptId = protoInt64.zero;
        /**
         * Symbols is the list of symbols to prepare in the calldata
         *
         * @generated from field: repeated string symbols = 3;
         */
        this.symbols = [];
        /**
         * AskCount is the number of validators that are requested to respond to this
         * oracle request. Higher value means more security, at a higher gas cost.
         *
         * @generated from field: uint64 ask_count = 4;
         */
        this.askCount = protoInt64.zero;
        /**
         * MinCount is the minimum number of validators necessary for the request to
         * proceed to the execution phase. Higher value means more security, at the
         * cost of liveness.
         *
         * @generated from field: uint64 min_count = 5;
         */
        this.minCount = protoInt64.zero;
        /**
         * FeeLimit is the maximum tokens that will be paid to all data source
         * providers.
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin fee_limit = 6;
         */
        this.feeLimit = [];
        /**
         * PrepareGas is amount of gas to pay to prepare raw requests
         *
         * @generated from field: uint64 prepare_gas = 7;
         */
        this.prepareGas = protoInt64.zero;
        /**
         * ExecuteGas is amount of gas to reserve for executing
         *
         * @generated from field: uint64 execute_gas = 8;
         */
        this.executeGas = protoInt64.zero;
        /**
         * MinSourceCount is the minimum number of data sources that must be used by
         * each validator
         *
         * @generated from field: uint64 min_source_count = 9;
         */
        this.minSourceCount = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BandOracleRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BandOracleRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BandOracleRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BandOracleRequest, a, b);
    }
}
BandOracleRequest.runtime = proto3;
BandOracleRequest.typeName = "injective.oracle.v1beta1.BandOracleRequest";
BandOracleRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "oracle_script_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "symbols", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "ask_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "min_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "fee_limit", kind: "message", T: Coin, repeated: true },
    { no: 7, name: "prepare_gas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "execute_gas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "min_source_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message injective.oracle.v1beta1.BandIBCParams
 */
export class BandIBCParams extends Message {
    constructor(data) {
        super();
        /**
         * true if Band IBC should be enabled
         *
         * @generated from field: bool band_ibc_enabled = 1;
         */
        this.bandIbcEnabled = false;
        /**
         * block request interval to send Band IBC prices
         *
         * @generated from field: int64 ibc_request_interval = 2;
         */
        this.ibcRequestInterval = protoInt64.zero;
        /**
         * band IBC source channel
         *
         * @generated from field: string ibc_source_channel = 3;
         */
        this.ibcSourceChannel = "";
        /**
         * band IBC version
         *
         * @generated from field: string ibc_version = 4;
         */
        this.ibcVersion = "";
        /**
         * band IBC portID
         *
         * @generated from field: string ibc_port_id = 5;
         */
        this.ibcPortId = "";
        /**
         *  legacy oracle scheme ids
         *
         * @generated from field: repeated int64 legacy_oracle_ids = 6;
         */
        this.legacyOracleIds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BandIBCParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BandIBCParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BandIBCParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BandIBCParams, a, b);
    }
}
BandIBCParams.runtime = proto3;
BandIBCParams.typeName = "injective.oracle.v1beta1.BandIBCParams";
BandIBCParams.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "band_ibc_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "ibc_request_interval", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ibc_source_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ibc_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ibc_port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "legacy_oracle_ids", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
]);
/**
 * @generated from message injective.oracle.v1beta1.SymbolPriceTimestamp
 */
export class SymbolPriceTimestamp extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: injective.oracle.v1beta1.OracleType oracle = 1;
         */
        this.oracle = OracleType.Unspecified;
        /**
         * @generated from field: string symbol_id = 2;
         */
        this.symbolId = "";
        /**
         * @generated from field: int64 timestamp = 3;
         */
        this.timestamp = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SymbolPriceTimestamp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SymbolPriceTimestamp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SymbolPriceTimestamp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SymbolPriceTimestamp, a, b);
    }
}
SymbolPriceTimestamp.runtime = proto3;
SymbolPriceTimestamp.typeName = "injective.oracle.v1beta1.SymbolPriceTimestamp";
SymbolPriceTimestamp.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "oracle", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 2, name: "symbol_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message injective.oracle.v1beta1.LastPriceTimestamps
 */
export class LastPriceTimestamps extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.oracle.v1beta1.SymbolPriceTimestamp last_price_timestamps = 1;
         */
        this.lastPriceTimestamps = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LastPriceTimestamps().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LastPriceTimestamps().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LastPriceTimestamps().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LastPriceTimestamps, a, b);
    }
}
LastPriceTimestamps.runtime = proto3;
LastPriceTimestamps.typeName = "injective.oracle.v1beta1.LastPriceTimestamps";
LastPriceTimestamps.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "last_price_timestamps", kind: "message", T: SymbolPriceTimestamp, repeated: true },
]);
/**
 * @generated from message injective.oracle.v1beta1.PriceRecords
 */
export class PriceRecords extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: injective.oracle.v1beta1.OracleType oracle = 1;
         */
        this.oracle = OracleType.Unspecified;
        /**
         * @generated from field: string symbol_id = 2;
         */
        this.symbolId = "";
        /**
         * @generated from field: repeated injective.oracle.v1beta1.PriceRecord latest_price_records = 3;
         */
        this.latestPriceRecords = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PriceRecords().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PriceRecords().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PriceRecords().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PriceRecords, a, b);
    }
}
PriceRecords.runtime = proto3;
PriceRecords.typeName = "injective.oracle.v1beta1.PriceRecords";
PriceRecords.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "oracle", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 2, name: "symbol_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "latest_price_records", kind: "message", T: PriceRecord, repeated: true },
]);
/**
 * @generated from message injective.oracle.v1beta1.PriceRecord
 */
export class PriceRecord extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 timestamp = 1;
         */
        this.timestamp = protoInt64.zero;
        /**
         * @generated from field: string price = 2;
         */
        this.price = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PriceRecord().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PriceRecord().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PriceRecord().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PriceRecord, a, b);
    }
}
PriceRecord.runtime = proto3;
PriceRecord.typeName = "injective.oracle.v1beta1.PriceRecord";
PriceRecord.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MetadataStatistics refers to the metadata summary statistics of the
 * historical sample considered
 *
 * @generated from message injective.oracle.v1beta1.MetadataStatistics
 */
export class MetadataStatistics extends Message {
    constructor(data) {
        super();
        /**
         * GroupCount refers to the number of groups used. Equals RecordsSampleSize if
         * no grouping is used
         *
         * @generated from field: uint32 group_count = 1;
         */
        this.groupCount = 0;
        /**
         * RecordsSampleSize refers to the total number of records used.
         *
         * @generated from field: uint32 records_sample_size = 2;
         */
        this.recordsSampleSize = 0;
        /**
         * Mean refers to the arithmetic mean
         * For trades, the mean is the VWAP computed over the grouped trade records ∑
         * (price * quantity) / ∑ quantity For oracle prices, the mean is computed
         * over the price records ∑ (price) / prices_count
         *
         * @generated from field: string mean = 3;
         */
        this.mean = "";
        /**
         * TWAP refers to the time-weighted average price which equals ∑ (price_i *
         * ∆t_i) / ∑ ∆t_i where ∆t_i = t_i - t_{i-1}
         *
         * @generated from field: string twap = 4;
         */
        this.twap = "";
        /**
         * FirstTimestamp is the timestamp of the oldest record considered
         *
         * @generated from field: int64 first_timestamp = 5;
         */
        this.firstTimestamp = protoInt64.zero;
        /**
         * LastTimestamp is the timestamp of the youngest record considered
         *
         * @generated from field: int64 last_timestamp = 6;
         */
        this.lastTimestamp = protoInt64.zero;
        /**
         * MinPrice refers to the smallest individual raw price considered
         *
         * @generated from field: string min_price = 7;
         */
        this.minPrice = "";
        /**
         * MaxPrice refers to the largest individual raw price considered
         *
         * @generated from field: string max_price = 8;
         */
        this.maxPrice = "";
        /**
         * MedianPrice refers to the median individual raw price considered
         *
         * @generated from field: string median_price = 9;
         */
        this.medianPrice = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MetadataStatistics().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MetadataStatistics().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MetadataStatistics().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MetadataStatistics, a, b);
    }
}
MetadataStatistics.runtime = proto3;
MetadataStatistics.typeName = "injective.oracle.v1beta1.MetadataStatistics";
MetadataStatistics.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "group_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "records_sample_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "mean", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "twap", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "first_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "last_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "min_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "max_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "median_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.oracle.v1beta1.PriceAttestation
 */
export class PriceAttestation extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string price_id = 1;
         */
        this.priceId = "";
        /**
         * MaxPrice refers to the largest individual raw price considered
         *
         * @generated from field: int64 price = 2;
         */
        this.price = protoInt64.zero;
        /**
         * @generated from field: uint64 conf = 3;
         */
        this.conf = protoInt64.zero;
        /**
         * @generated from field: int32 expo = 4;
         */
        this.expo = 0;
        /**
         * @generated from field: int64 ema_price = 5;
         */
        this.emaPrice = protoInt64.zero;
        /**
         * @generated from field: uint64 ema_conf = 6;
         */
        this.emaConf = protoInt64.zero;
        /**
         * @generated from field: int32 ema_expo = 7;
         */
        this.emaExpo = 0;
        /**
         * @generated from field: int64 publish_time = 8;
         */
        this.publishTime = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PriceAttestation().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PriceAttestation().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PriceAttestation().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PriceAttestation, a, b);
    }
}
PriceAttestation.runtime = proto3;
PriceAttestation.typeName = "injective.oracle.v1beta1.PriceAttestation";
PriceAttestation.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "conf", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "expo", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "ema_price", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "ema_conf", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "ema_expo", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "publish_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
//# sourceMappingURL=oracle_pb.js.map