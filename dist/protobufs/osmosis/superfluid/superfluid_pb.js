// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/superfluid/superfluid.proto (package osmosis.superfluid, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { SyntheticLock } from "../lockup/lock_pb.js";
/**
 * SuperfluidAssetType indicates whether the superfluid asset is
 * a native token, lp share of a pool, or concentrated share of a pool
 *
 * @generated from enum osmosis.superfluid.SuperfluidAssetType
 */
export var SuperfluidAssetType;
(function (SuperfluidAssetType) {
    /**
     * @generated from enum value: SuperfluidAssetTypeNative = 0;
     */
    SuperfluidAssetType[SuperfluidAssetType["SuperfluidAssetTypeNative"] = 0] = "SuperfluidAssetTypeNative";
    /**
     * @generated from enum value: SuperfluidAssetTypeLPShare = 1;
     */
    SuperfluidAssetType[SuperfluidAssetType["SuperfluidAssetTypeLPShare"] = 1] = "SuperfluidAssetTypeLPShare";
    /**
     * SuperfluidAssetTypeLendingShare = 3; // for now not exist
     *
     * @generated from enum value: SuperfluidAssetTypeConcentratedShare = 2;
     */
    SuperfluidAssetType[SuperfluidAssetType["SuperfluidAssetTypeConcentratedShare"] = 2] = "SuperfluidAssetTypeConcentratedShare";
})(SuperfluidAssetType || (SuperfluidAssetType = {}));
// Retrieve enum metadata with: proto3.getEnumType(SuperfluidAssetType)
proto3.util.setEnumType(SuperfluidAssetType, "osmosis.superfluid.SuperfluidAssetType", [
    { no: 0, name: "SuperfluidAssetTypeNative" },
    { no: 1, name: "SuperfluidAssetTypeLPShare" },
    { no: 2, name: "SuperfluidAssetTypeConcentratedShare" },
]);
/**
 * SuperfluidAsset stores the pair of superfluid asset type and denom pair
 *
 * @generated from message osmosis.superfluid.SuperfluidAsset
 */
export class SuperfluidAsset extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        /**
         * AssetType indicates whether the superfluid asset is a native token or an lp
         * share
         *
         * @generated from field: osmosis.superfluid.SuperfluidAssetType asset_type = 2;
         */
        this.assetType = SuperfluidAssetType.SuperfluidAssetTypeNative;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuperfluidAsset().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperfluidAsset().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperfluidAsset().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuperfluidAsset, a, b);
    }
}
SuperfluidAsset.runtime = proto3;
SuperfluidAsset.typeName = "osmosis.superfluid.SuperfluidAsset";
SuperfluidAsset.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset_type", kind: "enum", T: proto3.getEnumType(SuperfluidAssetType) },
]);
/**
 * SuperfluidIntermediaryAccount takes the role of intermediary between LP token
 * and OSMO tokens for superfluid staking. The intermediary account is the
 * actual account responsible for delegation, not the validator account itself.
 *
 * @generated from message osmosis.superfluid.SuperfluidIntermediaryAccount
 */
export class SuperfluidIntermediaryAccount extends Message {
    constructor(data) {
        super();
        /**
         * Denom indicates the denom of the superfluid asset.
         *
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        /**
         * @generated from field: string val_addr = 2;
         */
        this.valAddr = "";
        /**
         * perpetual gauge for rewards distribution
         *
         * @generated from field: uint64 gauge_id = 3;
         */
        this.gaugeId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuperfluidIntermediaryAccount().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperfluidIntermediaryAccount().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperfluidIntermediaryAccount().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuperfluidIntermediaryAccount, a, b);
    }
}
SuperfluidIntermediaryAccount.runtime = proto3;
SuperfluidIntermediaryAccount.typeName = "osmosis.superfluid.SuperfluidIntermediaryAccount";
SuperfluidIntermediaryAccount.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gauge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * The Osmo-Equivalent-Multiplier Record for epoch N refers to the osmo worth we
 * treat an LP share as having, for all of epoch N. Eventually this is intended
 * to be set as the Time-weighted-average-osmo-backing for the entire duration
 * of epoch N-1. (Thereby locking what's in use for epoch N as based on the
 * prior epochs rewards) However for now, this is not the TWAP but instead the
 * spot price at the boundary. For different types of assets in the future, it
 * could change.
 *
 * @generated from message osmosis.superfluid.OsmoEquivalentMultiplierRecord
 */
export class OsmoEquivalentMultiplierRecord extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 epoch_number = 1;
         */
        this.epochNumber = protoInt64.zero;
        /**
         * superfluid asset denom, can be LP token or native token
         *
         * @generated from field: string denom = 2;
         */
        this.denom = "";
        /**
         * @generated from field: string multiplier = 3;
         */
        this.multiplier = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OsmoEquivalentMultiplierRecord().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OsmoEquivalentMultiplierRecord().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OsmoEquivalentMultiplierRecord().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OsmoEquivalentMultiplierRecord, a, b);
    }
}
OsmoEquivalentMultiplierRecord.runtime = proto3;
OsmoEquivalentMultiplierRecord.typeName = "osmosis.superfluid.OsmoEquivalentMultiplierRecord";
OsmoEquivalentMultiplierRecord.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "multiplier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * SuperfluidDelegationRecord is a struct used to indicate superfluid
 * delegations of an account in the state machine in a user friendly form.
 *
 * @generated from message osmosis.superfluid.SuperfluidDelegationRecord
 */
export class SuperfluidDelegationRecord extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string delegator_address = 1;
         */
        this.delegatorAddress = "";
        /**
         * @generated from field: string validator_address = 2;
         */
        this.validatorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuperfluidDelegationRecord().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperfluidDelegationRecord().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperfluidDelegationRecord().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuperfluidDelegationRecord, a, b);
    }
}
SuperfluidDelegationRecord.runtime = proto3;
SuperfluidDelegationRecord.typeName = "osmosis.superfluid.SuperfluidDelegationRecord";
SuperfluidDelegationRecord.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "delegation_amount", kind: "message", T: Coin },
    { no: 4, name: "equivalent_staked_amount", kind: "message", T: Coin },
]);
/**
 * LockIdIntermediaryAccountConnection is a struct used to indicate the
 * relationship between the underlying lock id and superfluid delegation done
 * via lp shares.
 *
 * @generated from message osmosis.superfluid.LockIdIntermediaryAccountConnection
 */
export class LockIdIntermediaryAccountConnection extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 lock_id = 1;
         */
        this.lockId = protoInt64.zero;
        /**
         * @generated from field: string intermediary_account = 2;
         */
        this.intermediaryAccount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LockIdIntermediaryAccountConnection().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LockIdIntermediaryAccountConnection().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LockIdIntermediaryAccountConnection().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LockIdIntermediaryAccountConnection, a, b);
    }
}
LockIdIntermediaryAccountConnection.runtime = proto3;
LockIdIntermediaryAccountConnection.typeName = "osmosis.superfluid.LockIdIntermediaryAccountConnection";
LockIdIntermediaryAccountConnection.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "intermediary_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.UnpoolWhitelistedPools
 */
export class UnpoolWhitelistedPools extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated uint64 ids = 1;
         */
        this.ids = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnpoolWhitelistedPools().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnpoolWhitelistedPools().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnpoolWhitelistedPools().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UnpoolWhitelistedPools, a, b);
    }
}
UnpoolWhitelistedPools.runtime = proto3;
UnpoolWhitelistedPools.typeName = "osmosis.superfluid.UnpoolWhitelistedPools";
UnpoolWhitelistedPools.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
]);
/**
 * @generated from message osmosis.superfluid.ConcentratedPoolUserPositionRecord
 */
export class ConcentratedPoolUserPositionRecord extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string validator_address = 1;
         */
        this.validatorAddress = "";
        /**
         * @generated from field: uint64 position_id = 2;
         */
        this.positionId = protoInt64.zero;
        /**
         * @generated from field: uint64 lock_id = 3;
         */
        this.lockId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConcentratedPoolUserPositionRecord().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConcentratedPoolUserPositionRecord().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConcentratedPoolUserPositionRecord().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConcentratedPoolUserPositionRecord, a, b);
    }
}
ConcentratedPoolUserPositionRecord.runtime = proto3;
ConcentratedPoolUserPositionRecord.typeName = "osmosis.superfluid.ConcentratedPoolUserPositionRecord";
ConcentratedPoolUserPositionRecord.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "synthetic_lock", kind: "message", T: SyntheticLock },
    { no: 5, name: "delegation_amount", kind: "message", T: Coin },
    { no: 6, name: "equivalent_staked_amount", kind: "message", T: Coin },
]);
//# sourceMappingURL=superfluid_pb.js.map