// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/tokenfactory/v1beta1/authorityMetadata.proto (package osmosis.tokenfactory.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * DenomAuthorityMetadata specifies metadata for addresses that have specific
 * capabilities over a token factory denom. Right now there is only one Admin
 * permission, but is planned to be extended to the future.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata
 */
export class DenomAuthorityMetadata extends Message {
    constructor(data) {
        super();
        /**
         * Can be empty for no admin, or a valid osmosis address
         *
         * @generated from field: string admin = 1;
         */
        this.admin = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DenomAuthorityMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DenomAuthorityMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DenomAuthorityMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DenomAuthorityMetadata, a, b);
    }
}
DenomAuthorityMetadata.runtime = proto3;
DenomAuthorityMetadata.typeName = "osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata";
DenomAuthorityMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=authorityMetadata_pb.js.map