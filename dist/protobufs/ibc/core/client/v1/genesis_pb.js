// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/core/client/v1/genesis.proto (package ibc.core.client.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ClientConsensusStates, IdentifiedClientState, Params } from "./client_pb.js";
/**
 * GenesisState defines the ibc client submodule's genesis state.
 *
 * @generated from message ibc.core.client.v1.GenesisState
 */
export class GenesisState extends Message {
    constructor(data) {
        super();
        /**
         * client states with their corresponding identifiers
         *
         * @generated from field: repeated ibc.core.client.v1.IdentifiedClientState clients = 1;
         */
        this.clients = [];
        /**
         * consensus states from each client
         *
         * @generated from field: repeated ibc.core.client.v1.ClientConsensusStates clients_consensus = 2;
         */
        this.clientsConsensus = [];
        /**
         * metadata from each client
         *
         * @generated from field: repeated ibc.core.client.v1.IdentifiedGenesisMetadata clients_metadata = 3;
         */
        this.clientsMetadata = [];
        /**
         * Deprecated: create_localhost has been deprecated.
         * The localhost client is automatically created at genesis.
         *
         * @generated from field: bool create_localhost = 5 [deprecated = true];
         * @deprecated
         */
        this.createLocalhost = false;
        /**
         * the sequence for the next generated client identifier
         *
         * @generated from field: uint64 next_client_sequence = 6;
         */
        this.nextClientSequence = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GenesisState, a, b);
    }
}
GenesisState.runtime = proto3;
GenesisState.typeName = "ibc.core.client.v1.GenesisState";
GenesisState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "clients", kind: "message", T: IdentifiedClientState, repeated: true },
    { no: 2, name: "clients_consensus", kind: "message", T: ClientConsensusStates, repeated: true },
    { no: 3, name: "clients_metadata", kind: "message", T: IdentifiedGenesisMetadata, repeated: true },
    { no: 4, name: "params", kind: "message", T: Params },
    { no: 5, name: "create_localhost", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "next_client_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * GenesisMetadata defines the genesis type for metadata that will be used
 * to export all client store keys that are not client or consensus states.
 *
 * @generated from message ibc.core.client.v1.GenesisMetadata
 */
export class GenesisMetadata extends Message {
    constructor(data) {
        super();
        /**
         * store key of metadata without clientID-prefix
         *
         * @generated from field: bytes key = 1;
         */
        this.key = new Uint8Array(0);
        /**
         * metadata value
         *
         * @generated from field: bytes value = 2;
         */
        this.value = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GenesisMetadata, a, b);
    }
}
GenesisMetadata.runtime = proto3;
GenesisMetadata.typeName = "ibc.core.client.v1.GenesisMetadata";
GenesisMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * IdentifiedGenesisMetadata has the client metadata with the corresponding
 * client id.
 *
 * @generated from message ibc.core.client.v1.IdentifiedGenesisMetadata
 */
export class IdentifiedGenesisMetadata extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string client_id = 1;
         */
        this.clientId = "";
        /**
         * @generated from field: repeated ibc.core.client.v1.GenesisMetadata client_metadata = 2;
         */
        this.clientMetadata = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IdentifiedGenesisMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IdentifiedGenesisMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IdentifiedGenesisMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IdentifiedGenesisMetadata, a, b);
    }
}
IdentifiedGenesisMetadata.runtime = proto3;
IdentifiedGenesisMetadata.typeName = "ibc.core.client.v1.IdentifiedGenesisMetadata";
IdentifiedGenesisMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_metadata", kind: "message", T: GenesisMetadata, repeated: true },
]);
//# sourceMappingURL=genesis_pb.js.map