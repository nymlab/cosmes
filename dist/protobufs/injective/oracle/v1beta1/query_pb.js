// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/oracle/v1beta1/query.proto (package injective.oracle.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BandPriceState, CoinbasePriceState, MetadataStatistics, OracleInfo, OracleType, Params, PriceFeedState, PriceRecord, PriceRecords, PriceState, ProviderInfo, ProviderState, PythPriceState } from "./oracle_pb.js";
import { GenesisState } from "./genesis_pb.js";
/**
 * @generated from message injective.oracle.v1beta1.QueryPythPriceRequest
 */
export class QueryPythPriceRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string price_id = 1;
         */
        this.priceId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPythPriceRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPythPriceRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPythPriceRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPythPriceRequest, a, b);
    }
}
QueryPythPriceRequest.runtime = proto3;
QueryPythPriceRequest.typeName = "injective.oracle.v1beta1.QueryPythPriceRequest";
QueryPythPriceRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.oracle.v1beta1.QueryPythPriceResponse
 */
export class QueryPythPriceResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPythPriceResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPythPriceResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPythPriceResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPythPriceResponse, a, b);
    }
}
QueryPythPriceResponse.runtime = proto3;
QueryPythPriceResponse.typeName = "injective.oracle.v1beta1.QueryPythPriceResponse";
QueryPythPriceResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price_state", kind: "message", T: PythPriceState },
]);
/**
 * QueryOracleParamsRequest is the request type for the Query/OracleParams RPC
 * method.
 *
 * @generated from message injective.oracle.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "injective.oracle.v1beta1.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryOracleParamsResponse is the response type for the Query/OracleParams RPC
 * method.
 *
 * @generated from message injective.oracle.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "injective.oracle.v1beta1.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * QueryBandRelayersRequest is the request type for the Query/BandRelayers RPC
 * method.
 *
 * @generated from message injective.oracle.v1beta1.QueryBandRelayersRequest
 */
export class QueryBandRelayersRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBandRelayersRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBandRelayersRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBandRelayersRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBandRelayersRequest, a, b);
    }
}
QueryBandRelayersRequest.runtime = proto3;
QueryBandRelayersRequest.typeName = "injective.oracle.v1beta1.QueryBandRelayersRequest";
QueryBandRelayersRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryBandRelayersResponse is the response type for the Query/BandRelayers RPC
 * method.
 *
 * @generated from message injective.oracle.v1beta1.QueryBandRelayersResponse
 */
export class QueryBandRelayersResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string relayers = 1;
         */
        this.relayers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBandRelayersResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBandRelayersResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBandRelayersResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBandRelayersResponse, a, b);
    }
}
QueryBandRelayersResponse.runtime = proto3;
QueryBandRelayersResponse.typeName = "injective.oracle.v1beta1.QueryBandRelayersResponse";
QueryBandRelayersResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "relayers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * QueryBandPriceStatesRequest is the request type for the Query/BandPriceStates
 * RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryBandPriceStatesRequest
 */
export class QueryBandPriceStatesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBandPriceStatesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBandPriceStatesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBandPriceStatesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBandPriceStatesRequest, a, b);
    }
}
QueryBandPriceStatesRequest.runtime = proto3;
QueryBandPriceStatesRequest.typeName = "injective.oracle.v1beta1.QueryBandPriceStatesRequest";
QueryBandPriceStatesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryBandPriceStatesResponse is the response type for the
 * Query/BandPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryBandPriceStatesResponse
 */
export class QueryBandPriceStatesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.oracle.v1beta1.BandPriceState price_states = 1;
         */
        this.priceStates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBandPriceStatesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBandPriceStatesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBandPriceStatesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBandPriceStatesResponse, a, b);
    }
}
QueryBandPriceStatesResponse.runtime = proto3;
QueryBandPriceStatesResponse.typeName = "injective.oracle.v1beta1.QueryBandPriceStatesResponse";
QueryBandPriceStatesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price_states", kind: "message", T: BandPriceState, repeated: true },
]);
/**
 * QueryBandIBCPriceStatesRequest is the request type for the
 * Query/BandIBCPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest
 */
export class QueryBandIBCPriceStatesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBandIBCPriceStatesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBandIBCPriceStatesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBandIBCPriceStatesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBandIBCPriceStatesRequest, a, b);
    }
}
QueryBandIBCPriceStatesRequest.runtime = proto3;
QueryBandIBCPriceStatesRequest.typeName = "injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest";
QueryBandIBCPriceStatesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryBandIBCPriceStatesResponse is the response type for the
 * Query/BandIBCPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse
 */
export class QueryBandIBCPriceStatesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.oracle.v1beta1.BandPriceState price_states = 1;
         */
        this.priceStates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBandIBCPriceStatesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBandIBCPriceStatesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBandIBCPriceStatesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBandIBCPriceStatesResponse, a, b);
    }
}
QueryBandIBCPriceStatesResponse.runtime = proto3;
QueryBandIBCPriceStatesResponse.typeName = "injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse";
QueryBandIBCPriceStatesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price_states", kind: "message", T: BandPriceState, repeated: true },
]);
/**
 * QueryPriceFeedPriceStatesRequest is the request type for the
 * Query/PriceFeedPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest
 */
export class QueryPriceFeedPriceStatesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPriceFeedPriceStatesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPriceFeedPriceStatesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPriceFeedPriceStatesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPriceFeedPriceStatesRequest, a, b);
    }
}
QueryPriceFeedPriceStatesRequest.runtime = proto3;
QueryPriceFeedPriceStatesRequest.typeName = "injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest";
QueryPriceFeedPriceStatesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryPriceFeedPriceStatesResponse is the response type for the
 * Query/PriceFeedPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse
 */
export class QueryPriceFeedPriceStatesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.oracle.v1beta1.PriceFeedState price_states = 1;
         */
        this.priceStates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPriceFeedPriceStatesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPriceFeedPriceStatesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPriceFeedPriceStatesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPriceFeedPriceStatesResponse, a, b);
    }
}
QueryPriceFeedPriceStatesResponse.runtime = proto3;
QueryPriceFeedPriceStatesResponse.typeName = "injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse";
QueryPriceFeedPriceStatesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price_states", kind: "message", T: PriceFeedState, repeated: true },
]);
/**
 * QueryCoinbasePriceStatesRequest is the request type for the
 * Query/CoinbasePriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest
 */
export class QueryCoinbasePriceStatesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryCoinbasePriceStatesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryCoinbasePriceStatesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryCoinbasePriceStatesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryCoinbasePriceStatesRequest, a, b);
    }
}
QueryCoinbasePriceStatesRequest.runtime = proto3;
QueryCoinbasePriceStatesRequest.typeName = "injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest";
QueryCoinbasePriceStatesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryCoinbasePriceStatesResponse is the response type for the
 * Query/CoinbasePriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse
 */
export class QueryCoinbasePriceStatesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.oracle.v1beta1.CoinbasePriceState price_states = 1;
         */
        this.priceStates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryCoinbasePriceStatesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryCoinbasePriceStatesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryCoinbasePriceStatesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryCoinbasePriceStatesResponse, a, b);
    }
}
QueryCoinbasePriceStatesResponse.runtime = proto3;
QueryCoinbasePriceStatesResponse.typeName = "injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse";
QueryCoinbasePriceStatesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price_states", kind: "message", T: CoinbasePriceState, repeated: true },
]);
/**
 * QueryPythPriceStatesRequest is the request type for the
 * Query/CoinbasePriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryPythPriceStatesRequest
 */
export class QueryPythPriceStatesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPythPriceStatesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPythPriceStatesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPythPriceStatesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPythPriceStatesRequest, a, b);
    }
}
QueryPythPriceStatesRequest.runtime = proto3;
QueryPythPriceStatesRequest.typeName = "injective.oracle.v1beta1.QueryPythPriceStatesRequest";
QueryPythPriceStatesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryPythPriceStatesResponse is the response type for the
 * Query/CoinbasePriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryPythPriceStatesResponse
 */
export class QueryPythPriceStatesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.oracle.v1beta1.PythPriceState price_states = 1;
         */
        this.priceStates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPythPriceStatesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPythPriceStatesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPythPriceStatesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPythPriceStatesResponse, a, b);
    }
}
QueryPythPriceStatesResponse.runtime = proto3;
QueryPythPriceStatesResponse.typeName = "injective.oracle.v1beta1.QueryPythPriceStatesResponse";
QueryPythPriceStatesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price_states", kind: "message", T: PythPriceState, repeated: true },
]);
/**
 * QueryProviderPriceStateRequest is the request type for the
 * Query/ProviderPriceState RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryProviderPriceStateRequest
 */
export class QueryProviderPriceStateRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string provider = 1;
         */
        this.provider = "";
        /**
         * @generated from field: string symbol = 2;
         */
        this.symbol = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryProviderPriceStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryProviderPriceStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryProviderPriceStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryProviderPriceStateRequest, a, b);
    }
}
QueryProviderPriceStateRequest.runtime = proto3;
QueryProviderPriceStateRequest.typeName = "injective.oracle.v1beta1.QueryProviderPriceStateRequest";
QueryProviderPriceStateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryProviderPriceStatesResponse is the response type for the
 * Query/ProviderPriceStates RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryProviderPriceStateResponse
 */
export class QueryProviderPriceStateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryProviderPriceStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryProviderPriceStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryProviderPriceStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryProviderPriceStateResponse, a, b);
    }
}
QueryProviderPriceStateResponse.runtime = proto3;
QueryProviderPriceStateResponse.typeName = "injective.oracle.v1beta1.QueryProviderPriceStateResponse";
QueryProviderPriceStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price_state", kind: "message", T: PriceState },
]);
/**
 * QueryModuleStateRequest is the request type for the Query/OracleModuleState
 * RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryModuleStateRequest
 */
export class QueryModuleStateRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleStateRequest, a, b);
    }
}
QueryModuleStateRequest.runtime = proto3;
QueryModuleStateRequest.typeName = "injective.oracle.v1beta1.QueryModuleStateRequest";
QueryModuleStateRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryModuleStateResponse is the response type for the Query/OracleModuleState
 * RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryModuleStateResponse
 */
export class QueryModuleStateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleStateResponse, a, b);
    }
}
QueryModuleStateResponse.runtime = proto3;
QueryModuleStateResponse.typeName = "injective.oracle.v1beta1.QueryModuleStateResponse";
QueryModuleStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: GenesisState },
]);
/**
 * @generated from message injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest
 */
export class QueryHistoricalPriceRecordsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: injective.oracle.v1beta1.OracleType oracle = 1;
         */
        this.oracle = OracleType.Unspecified;
        /**
         * @generated from field: string symbol_id = 2;
         */
        this.symbolId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryHistoricalPriceRecordsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryHistoricalPriceRecordsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryHistoricalPriceRecordsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryHistoricalPriceRecordsRequest, a, b);
    }
}
QueryHistoricalPriceRecordsRequest.runtime = proto3;
QueryHistoricalPriceRecordsRequest.typeName = "injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest";
QueryHistoricalPriceRecordsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "oracle", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 2, name: "symbol_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse
 */
export class QueryHistoricalPriceRecordsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.oracle.v1beta1.PriceRecords price_records = 1;
         */
        this.priceRecords = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryHistoricalPriceRecordsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryHistoricalPriceRecordsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryHistoricalPriceRecordsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryHistoricalPriceRecordsResponse, a, b);
    }
}
QueryHistoricalPriceRecordsResponse.runtime = proto3;
QueryHistoricalPriceRecordsResponse.typeName = "injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse";
QueryHistoricalPriceRecordsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price_records", kind: "message", T: PriceRecords, repeated: true },
]);
/**
 * @generated from message injective.oracle.v1beta1.OracleHistoryOptions
 */
export class OracleHistoryOptions extends Message {
    constructor(data) {
        super();
        /**
         * MaxAge restricts the oracle price records oldest age in seconds from the
         * current block time to consider. A value of 0 means use all the records
         * present on the chain.
         *
         * @generated from field: uint64 max_age = 1;
         */
        this.maxAge = protoInt64.zero;
        /**
         * If IncludeRawHistory is true, the raw underlying data used for the
         * computation is included in the response
         *
         * @generated from field: bool include_raw_history = 2;
         */
        this.includeRawHistory = false;
        /**
         * If IncludeMetadata is true, metadata on the computation is included in the
         * response
         *
         * @generated from field: bool include_metadata = 3;
         */
        this.includeMetadata = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OracleHistoryOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OracleHistoryOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OracleHistoryOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OracleHistoryOptions, a, b);
    }
}
OracleHistoryOptions.runtime = proto3;
OracleHistoryOptions.typeName = "injective.oracle.v1beta1.OracleHistoryOptions";
OracleHistoryOptions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "max_age", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "include_raw_history", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "include_metadata", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * QueryOracleVolatilityRequest is the request type for Query/OracleVolatility
 * RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryOracleVolatilityRequest
 */
export class QueryOracleVolatilityRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryOracleVolatilityRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryOracleVolatilityRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryOracleVolatilityRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryOracleVolatilityRequest, a, b);
    }
}
QueryOracleVolatilityRequest.runtime = proto3;
QueryOracleVolatilityRequest.typeName = "injective.oracle.v1beta1.QueryOracleVolatilityRequest";
QueryOracleVolatilityRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "base_info", kind: "message", T: OracleInfo },
    { no: 2, name: "quote_info", kind: "message", T: OracleInfo },
    { no: 3, name: "oracle_history_options", kind: "message", T: OracleHistoryOptions },
]);
/**
 * QueryOracleVolatilityResponse is the response type for Query/OracleVolatility
 * RPC method.
 *
 * @generated from message injective.oracle.v1beta1.QueryOracleVolatilityResponse
 */
export class QueryOracleVolatilityResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string volatility = 1;
         */
        this.volatility = "";
        /**
         * @generated from field: repeated injective.oracle.v1beta1.PriceRecord raw_history = 3;
         */
        this.rawHistory = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryOracleVolatilityResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryOracleVolatilityResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryOracleVolatilityResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryOracleVolatilityResponse, a, b);
    }
}
QueryOracleVolatilityResponse.runtime = proto3;
QueryOracleVolatilityResponse.typeName = "injective.oracle.v1beta1.QueryOracleVolatilityResponse";
QueryOracleVolatilityResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "volatility", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "history_metadata", kind: "message", T: MetadataStatistics },
    { no: 3, name: "raw_history", kind: "message", T: PriceRecord, repeated: true },
]);
/**
 * @generated from message injective.oracle.v1beta1.QueryOracleProvidersInfoRequest
 */
export class QueryOracleProvidersInfoRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryOracleProvidersInfoRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryOracleProvidersInfoRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryOracleProvidersInfoRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryOracleProvidersInfoRequest, a, b);
    }
}
QueryOracleProvidersInfoRequest.runtime = proto3;
QueryOracleProvidersInfoRequest.typeName = "injective.oracle.v1beta1.QueryOracleProvidersInfoRequest";
QueryOracleProvidersInfoRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message injective.oracle.v1beta1.QueryOracleProvidersInfoResponse
 */
export class QueryOracleProvidersInfoResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.oracle.v1beta1.ProviderInfo providers = 1;
         */
        this.providers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryOracleProvidersInfoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryOracleProvidersInfoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryOracleProvidersInfoResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryOracleProvidersInfoResponse, a, b);
    }
}
QueryOracleProvidersInfoResponse.runtime = proto3;
QueryOracleProvidersInfoResponse.typeName = "injective.oracle.v1beta1.QueryOracleProvidersInfoResponse";
QueryOracleProvidersInfoResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "providers", kind: "message", T: ProviderInfo, repeated: true },
]);
/**
 * @generated from message injective.oracle.v1beta1.QueryOracleProviderPricesRequest
 */
export class QueryOracleProviderPricesRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string provider = 1;
         */
        this.provider = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryOracleProviderPricesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryOracleProviderPricesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryOracleProviderPricesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryOracleProviderPricesRequest, a, b);
    }
}
QueryOracleProviderPricesRequest.runtime = proto3;
QueryOracleProviderPricesRequest.typeName = "injective.oracle.v1beta1.QueryOracleProviderPricesRequest";
QueryOracleProviderPricesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.oracle.v1beta1.QueryOracleProviderPricesResponse
 */
export class QueryOracleProviderPricesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.oracle.v1beta1.ProviderState providerState = 1;
         */
        this.providerState = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryOracleProviderPricesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryOracleProviderPricesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryOracleProviderPricesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryOracleProviderPricesResponse, a, b);
    }
}
QueryOracleProviderPricesResponse.runtime = proto3;
QueryOracleProviderPricesResponse.typeName = "injective.oracle.v1beta1.QueryOracleProviderPricesResponse";
QueryOracleProviderPricesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "providerState", kind: "message", T: ProviderState, repeated: true },
]);
/**
 * QueryOraclePriceRequest is the request type for the Query/OraclePrice RPC
 * method.
 *
 * @generated from message injective.oracle.v1beta1.QueryOraclePriceRequest
 */
export class QueryOraclePriceRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 1;
         */
        this.oracleType = OracleType.Unspecified;
        /**
         * @generated from field: string base = 2;
         */
        this.base = "";
        /**
         * @generated from field: string quote = 3;
         */
        this.quote = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryOraclePriceRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryOraclePriceRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryOraclePriceRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryOraclePriceRequest, a, b);
    }
}
QueryOraclePriceRequest.runtime = proto3;
QueryOraclePriceRequest.typeName = "injective.oracle.v1beta1.QueryOraclePriceRequest";
QueryOraclePriceRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 2, name: "base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.oracle.v1beta1.PricePairState
 */
export class PricePairState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string pair_price = 1;
         */
        this.pairPrice = "";
        /**
         * @generated from field: string base_price = 2;
         */
        this.basePrice = "";
        /**
         * @generated from field: string quote_price = 3;
         */
        this.quotePrice = "";
        /**
         * @generated from field: string base_cumulative_price = 4;
         */
        this.baseCumulativePrice = "";
        /**
         * @generated from field: string quote_cumulative_price = 5;
         */
        this.quoteCumulativePrice = "";
        /**
         * @generated from field: int64 base_timestamp = 6;
         */
        this.baseTimestamp = protoInt64.zero;
        /**
         * @generated from field: int64 quote_timestamp = 7;
         */
        this.quoteTimestamp = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PricePairState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PricePairState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PricePairState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PricePairState, a, b);
    }
}
PricePairState.runtime = proto3;
PricePairState.typeName = "injective.oracle.v1beta1.PricePairState";
PricePairState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pair_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "base_cumulative_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "quote_cumulative_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "base_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "quote_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * QueryOraclePriceResponse is the response type for the Query/OraclePrice RPC
 * method.
 *
 * @generated from message injective.oracle.v1beta1.QueryOraclePriceResponse
 */
export class QueryOraclePriceResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryOraclePriceResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryOraclePriceResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryOraclePriceResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryOraclePriceResponse, a, b);
    }
}
QueryOraclePriceResponse.runtime = proto3;
QueryOraclePriceResponse.typeName = "injective.oracle.v1beta1.QueryOraclePriceResponse";
QueryOraclePriceResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "price_pair_state", kind: "message", T: PricePairState },
]);
//# sourceMappingURL=query_pb.js.map