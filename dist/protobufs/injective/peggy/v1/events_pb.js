// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/peggy/v1/events.proto (package injective.peggy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ClaimType } from "./attestation_pb.js";
import { BridgeValidator } from "./types_pb.js";
/**
 * @generated from message injective.peggy.v1.EventAttestationObserved
 */
export class EventAttestationObserved extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: injective.peggy.v1.ClaimType attestation_type = 1;
         */
        this.attestationType = ClaimType.UNKNOWN;
        /**
         * @generated from field: string bridge_contract = 2;
         */
        this.bridgeContract = "";
        /**
         * @generated from field: uint64 bridge_chain_id = 3;
         */
        this.bridgeChainId = protoInt64.zero;
        /**
         * @generated from field: bytes attestation_id = 4;
         */
        this.attestationId = new Uint8Array(0);
        /**
         * @generated from field: uint64 nonce = 5;
         */
        this.nonce = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventAttestationObserved().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventAttestationObserved().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventAttestationObserved().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventAttestationObserved, a, b);
    }
}
EventAttestationObserved.runtime = proto3;
EventAttestationObserved.typeName = "injective.peggy.v1.EventAttestationObserved";
EventAttestationObserved.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "attestation_type", kind: "enum", T: proto3.getEnumType(ClaimType) },
    { no: 2, name: "bridge_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bridge_chain_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "attestation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message injective.peggy.v1.EventBridgeWithdrawCanceled
 */
export class EventBridgeWithdrawCanceled extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bridge_contract = 1;
         */
        this.bridgeContract = "";
        /**
         * @generated from field: uint64 bridge_chain_id = 2;
         */
        this.bridgeChainId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventBridgeWithdrawCanceled().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventBridgeWithdrawCanceled().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventBridgeWithdrawCanceled().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventBridgeWithdrawCanceled, a, b);
    }
}
EventBridgeWithdrawCanceled.runtime = proto3;
EventBridgeWithdrawCanceled.typeName = "injective.peggy.v1.EventBridgeWithdrawCanceled";
EventBridgeWithdrawCanceled.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bridge_chain_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message injective.peggy.v1.EventOutgoingBatch
 */
export class EventOutgoingBatch extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        /**
         * @generated from field: string orchestrator_address = 2;
         */
        this.orchestratorAddress = "";
        /**
         * @generated from field: uint64 batch_nonce = 3;
         */
        this.batchNonce = protoInt64.zero;
        /**
         * @generated from field: uint64 batch_timeout = 4;
         */
        this.batchTimeout = protoInt64.zero;
        /**
         * @generated from field: repeated uint64 batch_tx_ids = 5;
         */
        this.batchTxIds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventOutgoingBatch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventOutgoingBatch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventOutgoingBatch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventOutgoingBatch, a, b);
    }
}
EventOutgoingBatch.runtime = proto3;
EventOutgoingBatch.typeName = "injective.peggy.v1.EventOutgoingBatch";
EventOutgoingBatch.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "batch_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "batch_timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "batch_tx_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
]);
/**
 * @generated from message injective.peggy.v1.EventOutgoingBatchCanceled
 */
export class EventOutgoingBatchCanceled extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bridge_contract = 1;
         */
        this.bridgeContract = "";
        /**
         * @generated from field: uint64 bridge_chain_id = 2;
         */
        this.bridgeChainId = protoInt64.zero;
        /**
         * @generated from field: uint64 batch_id = 3;
         */
        this.batchId = protoInt64.zero;
        /**
         * @generated from field: uint64 nonce = 4;
         */
        this.nonce = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventOutgoingBatchCanceled().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventOutgoingBatchCanceled().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventOutgoingBatchCanceled().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventOutgoingBatchCanceled, a, b);
    }
}
EventOutgoingBatchCanceled.runtime = proto3;
EventOutgoingBatchCanceled.typeName = "injective.peggy.v1.EventOutgoingBatchCanceled";
EventOutgoingBatchCanceled.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "bridge_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bridge_chain_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "batch_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message injective.peggy.v1.EventValsetUpdateRequest
 */
export class EventValsetUpdateRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 valset_nonce = 1;
         */
        this.valsetNonce = protoInt64.zero;
        /**
         * @generated from field: uint64 valset_height = 2;
         */
        this.valsetHeight = protoInt64.zero;
        /**
         * @generated from field: repeated injective.peggy.v1.BridgeValidator valset_members = 3;
         */
        this.valsetMembers = [];
        /**
         * @generated from field: string reward_amount = 4;
         */
        this.rewardAmount = "";
        /**
         * @generated from field: string reward_token = 5;
         */
        this.rewardToken = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventValsetUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventValsetUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventValsetUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventValsetUpdateRequest, a, b);
    }
}
EventValsetUpdateRequest.runtime = proto3;
EventValsetUpdateRequest.typeName = "injective.peggy.v1.EventValsetUpdateRequest";
EventValsetUpdateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "valset_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "valset_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "valset_members", kind: "message", T: BridgeValidator, repeated: true },
    { no: 4, name: "reward_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "reward_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.peggy.v1.EventSetOrchestratorAddresses
 */
export class EventSetOrchestratorAddresses extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string validator_address = 1;
         */
        this.validatorAddress = "";
        /**
         * @generated from field: string orchestrator_address = 2;
         */
        this.orchestratorAddress = "";
        /**
         * @generated from field: string operator_eth_address = 3;
         */
        this.operatorEthAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventSetOrchestratorAddresses().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventSetOrchestratorAddresses().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventSetOrchestratorAddresses().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventSetOrchestratorAddresses, a, b);
    }
}
EventSetOrchestratorAddresses.runtime = proto3;
EventSetOrchestratorAddresses.typeName = "injective.peggy.v1.EventSetOrchestratorAddresses";
EventSetOrchestratorAddresses.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "operator_eth_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.peggy.v1.EventValsetConfirm
 */
export class EventValsetConfirm extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 valset_nonce = 1;
         */
        this.valsetNonce = protoInt64.zero;
        /**
         * @generated from field: string orchestrator_address = 2;
         */
        this.orchestratorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventValsetConfirm().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventValsetConfirm().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventValsetConfirm().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventValsetConfirm, a, b);
    }
}
EventValsetConfirm.runtime = proto3;
EventValsetConfirm.typeName = "injective.peggy.v1.EventValsetConfirm";
EventValsetConfirm.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "valset_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.peggy.v1.EventSendToEth
 */
export class EventSendToEth extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 outgoing_tx_id = 1;
         */
        this.outgoingTxId = protoInt64.zero;
        /**
         * @generated from field: string sender = 2;
         */
        this.sender = "";
        /**
         * @generated from field: string receiver = 3;
         */
        this.receiver = "";
        /**
         * @generated from field: string amount = 4;
         */
        this.amount = "";
        /**
         * @generated from field: string bridge_fee = 5;
         */
        this.bridgeFee = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventSendToEth().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventSendToEth().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventSendToEth().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventSendToEth, a, b);
    }
}
EventSendToEth.runtime = proto3;
EventSendToEth.typeName = "injective.peggy.v1.EventSendToEth";
EventSendToEth.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "outgoing_tx_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "bridge_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.peggy.v1.EventConfirmBatch
 */
export class EventConfirmBatch extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 batch_nonce = 1;
         */
        this.batchNonce = protoInt64.zero;
        /**
         * @generated from field: string orchestrator_address = 2;
         */
        this.orchestratorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventConfirmBatch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventConfirmBatch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventConfirmBatch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventConfirmBatch, a, b);
    }
}
EventConfirmBatch.runtime = proto3;
EventConfirmBatch.typeName = "injective.peggy.v1.EventConfirmBatch";
EventConfirmBatch.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "batch_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.peggy.v1.EventAttestationVote
 */
export class EventAttestationVote extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 event_nonce = 1;
         */
        this.eventNonce = protoInt64.zero;
        /**
         * @generated from field: bytes attestation_id = 2;
         */
        this.attestationId = new Uint8Array(0);
        /**
         * @generated from field: string voter = 3;
         */
        this.voter = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventAttestationVote().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventAttestationVote().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventAttestationVote().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventAttestationVote, a, b);
    }
}
EventAttestationVote.runtime = proto3;
EventAttestationVote.typeName = "injective.peggy.v1.EventAttestationVote";
EventAttestationVote.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "attestation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.peggy.v1.EventDepositClaim
 */
export class EventDepositClaim extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 event_nonce = 1;
         */
        this.eventNonce = protoInt64.zero;
        /**
         * @generated from field: uint64 event_height = 2;
         */
        this.eventHeight = protoInt64.zero;
        /**
         * @generated from field: bytes attestation_id = 3;
         */
        this.attestationId = new Uint8Array(0);
        /**
         * @generated from field: string ethereum_sender = 4;
         */
        this.ethereumSender = "";
        /**
         * @generated from field: string cosmos_receiver = 5;
         */
        this.cosmosReceiver = "";
        /**
         * @generated from field: string token_contract = 6;
         */
        this.tokenContract = "";
        /**
         * @generated from field: string amount = 7;
         */
        this.amount = "";
        /**
         * @generated from field: string orchestrator_address = 8;
         */
        this.orchestratorAddress = "";
        /**
         * @generated from field: string data = 9;
         */
        this.data = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventDepositClaim().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventDepositClaim().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventDepositClaim().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventDepositClaim, a, b);
    }
}
EventDepositClaim.runtime = proto3;
EventDepositClaim.typeName = "injective.peggy.v1.EventDepositClaim";
EventDepositClaim.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "event_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "attestation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "ethereum_sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "cosmos_receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.peggy.v1.EventWithdrawClaim
 */
export class EventWithdrawClaim extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 event_nonce = 1;
         */
        this.eventNonce = protoInt64.zero;
        /**
         * @generated from field: uint64 event_height = 2;
         */
        this.eventHeight = protoInt64.zero;
        /**
         * @generated from field: bytes attestation_id = 3;
         */
        this.attestationId = new Uint8Array(0);
        /**
         * @generated from field: uint64 batch_nonce = 4;
         */
        this.batchNonce = protoInt64.zero;
        /**
         * @generated from field: string token_contract = 5;
         */
        this.tokenContract = "";
        /**
         * @generated from field: string orchestrator_address = 6;
         */
        this.orchestratorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventWithdrawClaim().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventWithdrawClaim().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventWithdrawClaim().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventWithdrawClaim, a, b);
    }
}
EventWithdrawClaim.runtime = proto3;
EventWithdrawClaim.typeName = "injective.peggy.v1.EventWithdrawClaim";
EventWithdrawClaim.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "event_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "attestation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "batch_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.peggy.v1.EventERC20DeployedClaim
 */
export class EventERC20DeployedClaim extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 event_nonce = 1;
         */
        this.eventNonce = protoInt64.zero;
        /**
         * @generated from field: uint64 event_height = 2;
         */
        this.eventHeight = protoInt64.zero;
        /**
         * @generated from field: bytes attestation_id = 3;
         */
        this.attestationId = new Uint8Array(0);
        /**
         * @generated from field: string cosmos_denom = 4;
         */
        this.cosmosDenom = "";
        /**
         * @generated from field: string token_contract = 5;
         */
        this.tokenContract = "";
        /**
         * @generated from field: string name = 6;
         */
        this.name = "";
        /**
         * @generated from field: string symbol = 7;
         */
        this.symbol = "";
        /**
         * @generated from field: uint64 decimals = 8;
         */
        this.decimals = protoInt64.zero;
        /**
         * @generated from field: string orchestrator_address = 9;
         */
        this.orchestratorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventERC20DeployedClaim().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventERC20DeployedClaim().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventERC20DeployedClaim().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventERC20DeployedClaim, a, b);
    }
}
EventERC20DeployedClaim.runtime = proto3;
EventERC20DeployedClaim.typeName = "injective.peggy.v1.EventERC20DeployedClaim";
EventERC20DeployedClaim.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "event_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "attestation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "cosmos_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "decimals", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.peggy.v1.EventValsetUpdateClaim
 */
export class EventValsetUpdateClaim extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 event_nonce = 1;
         */
        this.eventNonce = protoInt64.zero;
        /**
         * @generated from field: uint64 event_height = 2;
         */
        this.eventHeight = protoInt64.zero;
        /**
         * @generated from field: bytes attestation_id = 3;
         */
        this.attestationId = new Uint8Array(0);
        /**
         * @generated from field: uint64 valset_nonce = 4;
         */
        this.valsetNonce = protoInt64.zero;
        /**
         * @generated from field: repeated injective.peggy.v1.BridgeValidator valset_members = 5;
         */
        this.valsetMembers = [];
        /**
         * @generated from field: string reward_amount = 6;
         */
        this.rewardAmount = "";
        /**
         * @generated from field: string reward_token = 7;
         */
        this.rewardToken = "";
        /**
         * @generated from field: string orchestrator_address = 8;
         */
        this.orchestratorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventValsetUpdateClaim().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventValsetUpdateClaim().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventValsetUpdateClaim().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventValsetUpdateClaim, a, b);
    }
}
EventValsetUpdateClaim.runtime = proto3;
EventValsetUpdateClaim.typeName = "injective.peggy.v1.EventValsetUpdateClaim";
EventValsetUpdateClaim.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "event_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "event_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "attestation_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "valset_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "valset_members", kind: "message", T: BridgeValidator, repeated: true },
    { no: 6, name: "reward_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "reward_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.peggy.v1.EventCancelSendToEth
 */
export class EventCancelSendToEth extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 outgoing_tx_id = 1;
         */
        this.outgoingTxId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventCancelSendToEth().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventCancelSendToEth().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventCancelSendToEth().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventCancelSendToEth, a, b);
    }
}
EventCancelSendToEth.runtime = proto3;
EventCancelSendToEth.typeName = "injective.peggy.v1.EventCancelSendToEth";
EventCancelSendToEth.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "outgoing_tx_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message injective.peggy.v1.EventSubmitBadSignatureEvidence
 */
export class EventSubmitBadSignatureEvidence extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bad_eth_signature = 1;
         */
        this.badEthSignature = "";
        /**
         * @generated from field: string bad_eth_signature_subject = 2;
         */
        this.badEthSignatureSubject = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventSubmitBadSignatureEvidence().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventSubmitBadSignatureEvidence().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventSubmitBadSignatureEvidence().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventSubmitBadSignatureEvidence, a, b);
    }
}
EventSubmitBadSignatureEvidence.runtime = proto3;
EventSubmitBadSignatureEvidence.typeName = "injective.peggy.v1.EventSubmitBadSignatureEvidence";
EventSubmitBadSignatureEvidence.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "bad_eth_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bad_eth_signature_subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.peggy.v1.EventValidatorSlash
 */
export class EventValidatorSlash extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 power = 1;
         */
        this.power = protoInt64.zero;
        /**
         * @generated from field: string reason = 2;
         */
        this.reason = "";
        /**
         * @generated from field: string consensus_address = 3;
         */
        this.consensusAddress = "";
        /**
         * @generated from field: string operator_address = 4;
         */
        this.operatorAddress = "";
        /**
         * @generated from field: string moniker = 5;
         */
        this.moniker = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventValidatorSlash().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventValidatorSlash().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventValidatorSlash().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventValidatorSlash, a, b);
    }
}
EventValidatorSlash.runtime = proto3;
EventValidatorSlash.typeName = "injective.peggy.v1.EventValidatorSlash";
EventValidatorSlash.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "consensus_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "operator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "moniker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=events_pb.js.map