// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/exchange/v1beta1/events.proto (package injective.exchange.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AccountRewards, BinaryOptionsMarket, CampaignRewardPool, DepositUpdate, DerivativeLimitOrder, DerivativeMarket, DerivativeMarketOrder, DerivativeOrder, DerivativeTradeLog, ExecutionType, ExpiryFuturesMarketInfo, FeeDiscountSchedule, Level, MarketFeeMultiplier, PerpetualMarketFunding, PerpetualMarketInfo, SpotLimitOrder, SpotMarket, SubaccountPosition, TradeLog, TradingRewardCampaignInfo } from "./exchange_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * @generated from message injective.exchange.v1beta1.EventBatchSpotExecution
 */
export class EventBatchSpotExecution extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: bool is_buy = 2;
         */
        this.isBuy = false;
        /**
         * @generated from field: injective.exchange.v1beta1.ExecutionType executionType = 3;
         */
        this.executionType = ExecutionType.UnspecifiedExecutionType;
        /**
         * @generated from field: repeated injective.exchange.v1beta1.TradeLog trades = 4;
         */
        this.trades = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventBatchSpotExecution().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventBatchSpotExecution().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventBatchSpotExecution().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventBatchSpotExecution, a, b);
    }
}
EventBatchSpotExecution.runtime = proto3;
EventBatchSpotExecution.typeName = "injective.exchange.v1beta1.EventBatchSpotExecution";
EventBatchSpotExecution.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_buy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "executionType", kind: "enum", T: proto3.getEnumType(ExecutionType) },
    { no: 4, name: "trades", kind: "message", T: TradeLog, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventBatchDerivativeExecution
 */
export class EventBatchDerivativeExecution extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: bool is_buy = 2;
         */
        this.isBuy = false;
        /**
         * @generated from field: bool is_liquidation = 3;
         */
        this.isLiquidation = false;
        /**
         * nil for time expiry futures
         *
         * @generated from field: string cumulative_funding = 4;
         */
        this.cumulativeFunding = "";
        /**
         * @generated from field: injective.exchange.v1beta1.ExecutionType executionType = 5;
         */
        this.executionType = ExecutionType.UnspecifiedExecutionType;
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeTradeLog trades = 6;
         */
        this.trades = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventBatchDerivativeExecution().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventBatchDerivativeExecution().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventBatchDerivativeExecution().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventBatchDerivativeExecution, a, b);
    }
}
EventBatchDerivativeExecution.runtime = proto3;
EventBatchDerivativeExecution.typeName = "injective.exchange.v1beta1.EventBatchDerivativeExecution";
EventBatchDerivativeExecution.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_buy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "is_liquidation", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "cumulative_funding", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "executionType", kind: "enum", T: proto3.getEnumType(ExecutionType) },
    { no: 6, name: "trades", kind: "message", T: DerivativeTradeLog, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventLostFundsFromLiquidation
 */
export class EventLostFundsFromLiquidation extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: bytes subaccount_id = 2;
         */
        this.subaccountId = new Uint8Array(0);
        /**
         * @generated from field: string lost_funds_from_available_during_payout = 3;
         */
        this.lostFundsFromAvailableDuringPayout = "";
        /**
         * @generated from field: string lost_funds_from_order_cancels = 4;
         */
        this.lostFundsFromOrderCancels = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventLostFundsFromLiquidation().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventLostFundsFromLiquidation().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventLostFundsFromLiquidation().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventLostFundsFromLiquidation, a, b);
    }
}
EventLostFundsFromLiquidation.runtime = proto3;
EventLostFundsFromLiquidation.typeName = "injective.exchange.v1beta1.EventLostFundsFromLiquidation";
EventLostFundsFromLiquidation.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "lost_funds_from_available_during_payout", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lost_funds_from_order_cancels", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventBatchDerivativePosition
 */
export class EventBatchDerivativePosition extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.SubaccountPosition positions = 2;
         */
        this.positions = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventBatchDerivativePosition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventBatchDerivativePosition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventBatchDerivativePosition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventBatchDerivativePosition, a, b);
    }
}
EventBatchDerivativePosition.runtime = proto3;
EventBatchDerivativePosition.typeName = "injective.exchange.v1beta1.EventBatchDerivativePosition";
EventBatchDerivativePosition.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "positions", kind: "message", T: SubaccountPosition, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventDerivativeMarketPaused
 */
export class EventDerivativeMarketPaused extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: string settle_price = 2;
         */
        this.settlePrice = "";
        /**
         * @generated from field: string total_missing_funds = 3;
         */
        this.totalMissingFunds = "";
        /**
         * @generated from field: string missing_funds_rate = 4;
         */
        this.missingFundsRate = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventDerivativeMarketPaused().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventDerivativeMarketPaused().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventDerivativeMarketPaused().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventDerivativeMarketPaused, a, b);
    }
}
EventDerivativeMarketPaused.runtime = proto3;
EventDerivativeMarketPaused.typeName = "injective.exchange.v1beta1.EventDerivativeMarketPaused";
EventDerivativeMarketPaused.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "settle_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "total_missing_funds", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "missing_funds_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventMarketBeyondBankruptcy
 */
export class EventMarketBeyondBankruptcy extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: string settle_price = 2;
         */
        this.settlePrice = "";
        /**
         * @generated from field: string missing_market_funds = 3;
         */
        this.missingMarketFunds = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventMarketBeyondBankruptcy().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventMarketBeyondBankruptcy().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventMarketBeyondBankruptcy().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventMarketBeyondBankruptcy, a, b);
    }
}
EventMarketBeyondBankruptcy.runtime = proto3;
EventMarketBeyondBankruptcy.typeName = "injective.exchange.v1beta1.EventMarketBeyondBankruptcy";
EventMarketBeyondBankruptcy.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "settle_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "missing_market_funds", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventAllPositionsHaircut
 */
export class EventAllPositionsHaircut extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: string settle_price = 2;
         */
        this.settlePrice = "";
        /**
         * @generated from field: string missing_funds_rate = 3;
         */
        this.missingFundsRate = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventAllPositionsHaircut().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventAllPositionsHaircut().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventAllPositionsHaircut().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventAllPositionsHaircut, a, b);
    }
}
EventAllPositionsHaircut.runtime = proto3;
EventAllPositionsHaircut.typeName = "injective.exchange.v1beta1.EventAllPositionsHaircut";
EventAllPositionsHaircut.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "settle_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "missing_funds_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventBinaryOptionsMarketUpdate
 */
export class EventBinaryOptionsMarketUpdate extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventBinaryOptionsMarketUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventBinaryOptionsMarketUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventBinaryOptionsMarketUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventBinaryOptionsMarketUpdate, a, b);
    }
}
EventBinaryOptionsMarketUpdate.runtime = proto3;
EventBinaryOptionsMarketUpdate.typeName = "injective.exchange.v1beta1.EventBinaryOptionsMarketUpdate";
EventBinaryOptionsMarketUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market", kind: "message", T: BinaryOptionsMarket },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventNewSpotOrders
 */
export class EventNewSpotOrders extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.SpotLimitOrder buy_orders = 2;
         */
        this.buyOrders = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.SpotLimitOrder sell_orders = 3;
         */
        this.sellOrders = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventNewSpotOrders().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventNewSpotOrders().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventNewSpotOrders().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventNewSpotOrders, a, b);
    }
}
EventNewSpotOrders.runtime = proto3;
EventNewSpotOrders.typeName = "injective.exchange.v1beta1.EventNewSpotOrders";
EventNewSpotOrders.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "buy_orders", kind: "message", T: SpotLimitOrder, repeated: true },
    { no: 3, name: "sell_orders", kind: "message", T: SpotLimitOrder, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventNewDerivativeOrders
 */
export class EventNewDerivativeOrders extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeLimitOrder buy_orders = 2;
         */
        this.buyOrders = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeLimitOrder sell_orders = 3;
         */
        this.sellOrders = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventNewDerivativeOrders().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventNewDerivativeOrders().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventNewDerivativeOrders().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventNewDerivativeOrders, a, b);
    }
}
EventNewDerivativeOrders.runtime = proto3;
EventNewDerivativeOrders.typeName = "injective.exchange.v1beta1.EventNewDerivativeOrders";
EventNewDerivativeOrders.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "buy_orders", kind: "message", T: DerivativeLimitOrder, repeated: true },
    { no: 3, name: "sell_orders", kind: "message", T: DerivativeLimitOrder, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventCancelSpotOrder
 */
export class EventCancelSpotOrder extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventCancelSpotOrder().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventCancelSpotOrder().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventCancelSpotOrder().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventCancelSpotOrder, a, b);
    }
}
EventCancelSpotOrder.runtime = proto3;
EventCancelSpotOrder.typeName = "injective.exchange.v1beta1.EventCancelSpotOrder";
EventCancelSpotOrder.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: SpotLimitOrder },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventSpotMarketUpdate
 */
export class EventSpotMarketUpdate extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventSpotMarketUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventSpotMarketUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventSpotMarketUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventSpotMarketUpdate, a, b);
    }
}
EventSpotMarketUpdate.runtime = proto3;
EventSpotMarketUpdate.typeName = "injective.exchange.v1beta1.EventSpotMarketUpdate";
EventSpotMarketUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market", kind: "message", T: SpotMarket },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventPerpetualMarketUpdate
 */
export class EventPerpetualMarketUpdate extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventPerpetualMarketUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventPerpetualMarketUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventPerpetualMarketUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventPerpetualMarketUpdate, a, b);
    }
}
EventPerpetualMarketUpdate.runtime = proto3;
EventPerpetualMarketUpdate.typeName = "injective.exchange.v1beta1.EventPerpetualMarketUpdate";
EventPerpetualMarketUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market", kind: "message", T: DerivativeMarket },
    { no: 2, name: "perpetual_market_info", kind: "message", T: PerpetualMarketInfo },
    { no: 3, name: "funding", kind: "message", T: PerpetualMarketFunding },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventExpiryFuturesMarketUpdate
 */
export class EventExpiryFuturesMarketUpdate extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventExpiryFuturesMarketUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventExpiryFuturesMarketUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventExpiryFuturesMarketUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventExpiryFuturesMarketUpdate, a, b);
    }
}
EventExpiryFuturesMarketUpdate.runtime = proto3;
EventExpiryFuturesMarketUpdate.typeName = "injective.exchange.v1beta1.EventExpiryFuturesMarketUpdate";
EventExpiryFuturesMarketUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market", kind: "message", T: DerivativeMarket },
    { no: 3, name: "expiry_futures_market_info", kind: "message", T: ExpiryFuturesMarketInfo },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventPerpetualMarketFundingUpdate
 */
export class EventPerpetualMarketFundingUpdate extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: bool is_hourly_funding = 3;
         */
        this.isHourlyFunding = false;
        /**
         * @generated from field: string funding_rate = 4;
         */
        this.fundingRate = "";
        /**
         * @generated from field: string mark_price = 5;
         */
        this.markPrice = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventPerpetualMarketFundingUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventPerpetualMarketFundingUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventPerpetualMarketFundingUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventPerpetualMarketFundingUpdate, a, b);
    }
}
EventPerpetualMarketFundingUpdate.runtime = proto3;
EventPerpetualMarketFundingUpdate.typeName = "injective.exchange.v1beta1.EventPerpetualMarketFundingUpdate";
EventPerpetualMarketFundingUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "funding", kind: "message", T: PerpetualMarketFunding },
    { no: 3, name: "is_hourly_funding", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "funding_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "mark_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventSubaccountDeposit
 */
export class EventSubaccountDeposit extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string src_address = 1;
         */
        this.srcAddress = "";
        /**
         * @generated from field: bytes subaccount_id = 2;
         */
        this.subaccountId = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventSubaccountDeposit().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventSubaccountDeposit().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventSubaccountDeposit().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventSubaccountDeposit, a, b);
    }
}
EventSubaccountDeposit.runtime = proto3;
EventSubaccountDeposit.typeName = "injective.exchange.v1beta1.EventSubaccountDeposit";
EventSubaccountDeposit.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "src_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventSubaccountWithdraw
 */
export class EventSubaccountWithdraw extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes subaccount_id = 1;
         */
        this.subaccountId = new Uint8Array(0);
        /**
         * @generated from field: string dst_address = 2;
         */
        this.dstAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventSubaccountWithdraw().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventSubaccountWithdraw().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventSubaccountWithdraw().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventSubaccountWithdraw, a, b);
    }
}
EventSubaccountWithdraw.runtime = proto3;
EventSubaccountWithdraw.typeName = "injective.exchange.v1beta1.EventSubaccountWithdraw";
EventSubaccountWithdraw.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "dst_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventSubaccountBalanceTransfer
 */
export class EventSubaccountBalanceTransfer extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string src_subaccount_id = 1;
         */
        this.srcSubaccountId = "";
        /**
         * @generated from field: string dst_subaccount_id = 2;
         */
        this.dstSubaccountId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventSubaccountBalanceTransfer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventSubaccountBalanceTransfer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventSubaccountBalanceTransfer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventSubaccountBalanceTransfer, a, b);
    }
}
EventSubaccountBalanceTransfer.runtime = proto3;
EventSubaccountBalanceTransfer.typeName = "injective.exchange.v1beta1.EventSubaccountBalanceTransfer";
EventSubaccountBalanceTransfer.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "src_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dst_subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventBatchDepositUpdate
 */
export class EventBatchDepositUpdate extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DepositUpdate deposit_updates = 1;
         */
        this.depositUpdates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventBatchDepositUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventBatchDepositUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventBatchDepositUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventBatchDepositUpdate, a, b);
    }
}
EventBatchDepositUpdate.runtime = proto3;
EventBatchDepositUpdate.typeName = "injective.exchange.v1beta1.EventBatchDepositUpdate";
EventBatchDepositUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "deposit_updates", kind: "message", T: DepositUpdate, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.DerivativeMarketOrderCancel
 */
export class DerivativeMarketOrderCancel extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string cancel_quantity = 2;
         */
        this.cancelQuantity = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DerivativeMarketOrderCancel().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DerivativeMarketOrderCancel().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DerivativeMarketOrderCancel().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DerivativeMarketOrderCancel, a, b);
    }
}
DerivativeMarketOrderCancel.runtime = proto3;
DerivativeMarketOrderCancel.typeName = "injective.exchange.v1beta1.DerivativeMarketOrderCancel";
DerivativeMarketOrderCancel.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_order", kind: "message", T: DerivativeMarketOrder },
    { no: 2, name: "cancel_quantity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventCancelDerivativeOrder
 */
export class EventCancelDerivativeOrder extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: bool isLimitCancel = 2;
         */
        this.isLimitCancel = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventCancelDerivativeOrder().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventCancelDerivativeOrder().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventCancelDerivativeOrder().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventCancelDerivativeOrder, a, b);
    }
}
EventCancelDerivativeOrder.runtime = proto3;
EventCancelDerivativeOrder.typeName = "injective.exchange.v1beta1.EventCancelDerivativeOrder";
EventCancelDerivativeOrder.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "isLimitCancel", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "limit_order", kind: "message", T: DerivativeLimitOrder },
    { no: 4, name: "market_order_cancel", kind: "message", T: DerivativeMarketOrderCancel },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventFeeDiscountSchedule
 */
export class EventFeeDiscountSchedule extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventFeeDiscountSchedule().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventFeeDiscountSchedule().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventFeeDiscountSchedule().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventFeeDiscountSchedule, a, b);
    }
}
EventFeeDiscountSchedule.runtime = proto3;
EventFeeDiscountSchedule.typeName = "injective.exchange.v1beta1.EventFeeDiscountSchedule";
EventFeeDiscountSchedule.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: FeeDiscountSchedule },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventTradingRewardCampaignUpdate
 */
export class EventTradingRewardCampaignUpdate extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.exchange.v1beta1.CampaignRewardPool campaign_reward_pools = 2;
         */
        this.campaignRewardPools = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventTradingRewardCampaignUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventTradingRewardCampaignUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventTradingRewardCampaignUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventTradingRewardCampaignUpdate, a, b);
    }
}
EventTradingRewardCampaignUpdate.runtime = proto3;
EventTradingRewardCampaignUpdate.typeName = "injective.exchange.v1beta1.EventTradingRewardCampaignUpdate";
EventTradingRewardCampaignUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "campaign_info", kind: "message", T: TradingRewardCampaignInfo },
    { no: 2, name: "campaign_reward_pools", kind: "message", T: CampaignRewardPool, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventTradingRewardDistribution
 */
export class EventTradingRewardDistribution extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.exchange.v1beta1.AccountRewards account_rewards = 1;
         */
        this.accountRewards = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventTradingRewardDistribution().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventTradingRewardDistribution().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventTradingRewardDistribution().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventTradingRewardDistribution, a, b);
    }
}
EventTradingRewardDistribution.runtime = proto3;
EventTradingRewardDistribution.typeName = "injective.exchange.v1beta1.EventTradingRewardDistribution";
EventTradingRewardDistribution.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "account_rewards", kind: "message", T: AccountRewards, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventNewConditionalDerivativeOrder
 */
export class EventNewConditionalDerivativeOrder extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: bytes hash = 3;
         */
        this.hash = new Uint8Array(0);
        /**
         * @generated from field: bool is_market = 4;
         */
        this.isMarket = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventNewConditionalDerivativeOrder().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventNewConditionalDerivativeOrder().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventNewConditionalDerivativeOrder().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventNewConditionalDerivativeOrder, a, b);
    }
}
EventNewConditionalDerivativeOrder.runtime = proto3;
EventNewConditionalDerivativeOrder.typeName = "injective.exchange.v1beta1.EventNewConditionalDerivativeOrder";
EventNewConditionalDerivativeOrder.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order", kind: "message", T: DerivativeOrder },
    { no: 3, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "is_market", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventCancelConditionalDerivativeOrder
 */
export class EventCancelConditionalDerivativeOrder extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: bool isLimitCancel = 2;
         */
        this.isLimitCancel = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventCancelConditionalDerivativeOrder().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventCancelConditionalDerivativeOrder().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventCancelConditionalDerivativeOrder().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventCancelConditionalDerivativeOrder, a, b);
    }
}
EventCancelConditionalDerivativeOrder.runtime = proto3;
EventCancelConditionalDerivativeOrder.typeName = "injective.exchange.v1beta1.EventCancelConditionalDerivativeOrder";
EventCancelConditionalDerivativeOrder.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "isLimitCancel", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "limit_order", kind: "message", T: DerivativeLimitOrder },
    { no: 4, name: "market_order", kind: "message", T: DerivativeMarketOrder },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventConditionalDerivativeOrderTrigger
 */
export class EventConditionalDerivativeOrderTrigger extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes market_id = 1;
         */
        this.marketId = new Uint8Array(0);
        /**
         * @generated from field: bool isLimitTrigger = 2;
         */
        this.isLimitTrigger = false;
        /**
         * @generated from field: bytes triggered_order_hash = 3;
         */
        this.triggeredOrderHash = new Uint8Array(0);
        /**
         * @generated from field: bytes placed_order_hash = 4;
         */
        this.placedOrderHash = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventConditionalDerivativeOrderTrigger().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventConditionalDerivativeOrderTrigger().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventConditionalDerivativeOrderTrigger().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventConditionalDerivativeOrderTrigger, a, b);
    }
}
EventConditionalDerivativeOrderTrigger.runtime = proto3;
EventConditionalDerivativeOrderTrigger.typeName = "injective.exchange.v1beta1.EventConditionalDerivativeOrderTrigger";
EventConditionalDerivativeOrderTrigger.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "isLimitTrigger", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "triggered_order_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "placed_order_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventOrderFail
 */
export class EventOrderFail extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes account = 1;
         */
        this.account = new Uint8Array(0);
        /**
         * @generated from field: repeated bytes hashes = 2;
         */
        this.hashes = [];
        /**
         * @generated from field: repeated uint32 flags = 3;
         */
        this.flags = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventOrderFail().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventOrderFail().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventOrderFail().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventOrderFail, a, b);
    }
}
EventOrderFail.runtime = proto3;
EventOrderFail.typeName = "injective.exchange.v1beta1.EventOrderFail";
EventOrderFail.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "hashes", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 3, name: "flags", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventAtomicMarketOrderFeeMultipliersUpdated
 */
export class EventAtomicMarketOrderFeeMultipliersUpdated extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.exchange.v1beta1.MarketFeeMultiplier market_fee_multipliers = 1;
         */
        this.marketFeeMultipliers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventAtomicMarketOrderFeeMultipliersUpdated().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventAtomicMarketOrderFeeMultipliersUpdated().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventAtomicMarketOrderFeeMultipliersUpdated().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventAtomicMarketOrderFeeMultipliersUpdated, a, b);
    }
}
EventAtomicMarketOrderFeeMultipliersUpdated.runtime = proto3;
EventAtomicMarketOrderFeeMultipliersUpdated.typeName = "injective.exchange.v1beta1.EventAtomicMarketOrderFeeMultipliersUpdated";
EventAtomicMarketOrderFeeMultipliersUpdated.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_fee_multipliers", kind: "message", T: MarketFeeMultiplier, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.EventOrderbookUpdate
 */
export class EventOrderbookUpdate extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.exchange.v1beta1.OrderbookUpdate spot_updates = 1;
         */
        this.spotUpdates = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.OrderbookUpdate derivative_updates = 2;
         */
        this.derivativeUpdates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventOrderbookUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventOrderbookUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventOrderbookUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventOrderbookUpdate, a, b);
    }
}
EventOrderbookUpdate.runtime = proto3;
EventOrderbookUpdate.typeName = "injective.exchange.v1beta1.EventOrderbookUpdate";
EventOrderbookUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "spot_updates", kind: "message", T: OrderbookUpdate, repeated: true },
    { no: 2, name: "derivative_updates", kind: "message", T: OrderbookUpdate, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.OrderbookUpdate
 */
export class OrderbookUpdate extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 seq = 1;
         */
        this.seq = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OrderbookUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OrderbookUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OrderbookUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OrderbookUpdate, a, b);
    }
}
OrderbookUpdate.runtime = proto3;
OrderbookUpdate.typeName = "injective.exchange.v1beta1.OrderbookUpdate";
OrderbookUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "seq", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "orderbook", kind: "message", T: Orderbook },
]);
/**
 * @generated from message injective.exchange.v1beta1.Orderbook
 */
export class Orderbook extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes market_id = 1;
         */
        this.marketId = new Uint8Array(0);
        /**
         * @generated from field: repeated injective.exchange.v1beta1.Level buy_levels = 2;
         */
        this.buyLevels = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.Level sell_levels = 3;
         */
        this.sellLevels = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Orderbook().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Orderbook().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Orderbook().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Orderbook, a, b);
    }
}
Orderbook.runtime = proto3;
Orderbook.typeName = "injective.exchange.v1beta1.Orderbook";
Orderbook.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "buy_levels", kind: "message", T: Level, repeated: true },
    { no: 3, name: "sell_levels", kind: "message", T: Level, repeated: true },
]);
//# sourceMappingURL=events_pb.js.map