// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/exchange/v1beta1/proposal.proto (package injective.exchange.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { CampaignRewardPool, DenomDecimals, FeeDiscountSchedule, MarketFeeMultiplier, MarketStatus, TradingRewardCampaignInfo } from "./exchange_pb.js";
import { OracleType } from "../../oracle/v1beta1/oracle_pb.js";
import { CommunityPoolSpendProposal } from "../../../cosmos/distribution/v1beta1/distribution_pb.js";
/**
 * @generated from enum injective.exchange.v1beta1.ExchangeType
 */
export var ExchangeType;
(function (ExchangeType) {
    /**
     * @generated from enum value: EXCHANGE_UNSPECIFIED = 0;
     */
    ExchangeType[ExchangeType["EXCHANGE_UNSPECIFIED"] = 0] = "EXCHANGE_UNSPECIFIED";
    /**
     * @generated from enum value: SPOT = 1;
     */
    ExchangeType[ExchangeType["SPOT"] = 1] = "SPOT";
    /**
     * @generated from enum value: DERIVATIVES = 2;
     */
    ExchangeType[ExchangeType["DERIVATIVES"] = 2] = "DERIVATIVES";
})(ExchangeType || (ExchangeType = {}));
// Retrieve enum metadata with: proto3.getEnumType(ExchangeType)
proto3.util.setEnumType(ExchangeType, "injective.exchange.v1beta1.ExchangeType", [
    { no: 0, name: "EXCHANGE_UNSPECIFIED" },
    { no: 1, name: "SPOT" },
    { no: 2, name: "DERIVATIVES" },
]);
/**
 * @generated from message injective.exchange.v1beta1.SpotMarketParamUpdateProposal
 */
export class SpotMarketParamUpdateProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: string market_id = 3;
         */
        this.marketId = "";
        /**
         * maker_fee_rate defines the trade fee rate for makers on the spot market
         *
         * @generated from field: string maker_fee_rate = 4;
         */
        this.makerFeeRate = "";
        /**
         * taker_fee_rate defines the trade fee rate for takers on the spot market
         *
         * @generated from field: string taker_fee_rate = 5;
         */
        this.takerFeeRate = "";
        /**
         * relayer_fee_share_rate defines the relayer fee share rate for the spot
         * market
         *
         * @generated from field: string relayer_fee_share_rate = 6;
         */
        this.relayerFeeShareRate = "";
        /**
         * min_price_tick_size defines the minimum tick size of the order's price and
         * margin
         *
         * @generated from field: string min_price_tick_size = 7;
         */
        this.minPriceTickSize = "";
        /**
         * min_quantity_tick_size defines the minimum tick size of the order's
         * quantity
         *
         * @generated from field: string min_quantity_tick_size = 8;
         */
        this.minQuantityTickSize = "";
        /**
         * @generated from field: injective.exchange.v1beta1.MarketStatus status = 9;
         */
        this.status = MarketStatus.Unspecified;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SpotMarketParamUpdateProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SpotMarketParamUpdateProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SpotMarketParamUpdateProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SpotMarketParamUpdateProposal, a, b);
    }
}
SpotMarketParamUpdateProposal.runtime = proto3;
SpotMarketParamUpdateProposal.typeName = "injective.exchange.v1beta1.SpotMarketParamUpdateProposal";
SpotMarketParamUpdateProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "maker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "taker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "relayer_fee_share_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "status", kind: "enum", T: proto3.getEnumType(MarketStatus) },
]);
/**
 * @generated from message injective.exchange.v1beta1.ExchangeEnableProposal
 */
export class ExchangeEnableProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: injective.exchange.v1beta1.ExchangeType exchangeType = 3;
         */
        this.exchangeType = ExchangeType.EXCHANGE_UNSPECIFIED;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExchangeEnableProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExchangeEnableProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExchangeEnableProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ExchangeEnableProposal, a, b);
    }
}
ExchangeEnableProposal.runtime = proto3;
ExchangeEnableProposal.typeName = "injective.exchange.v1beta1.ExchangeEnableProposal";
ExchangeEnableProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "exchangeType", kind: "enum", T: proto3.getEnumType(ExchangeType) },
]);
/**
 * @generated from message injective.exchange.v1beta1.BatchExchangeModificationProposal
 */
export class BatchExchangeModificationProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.SpotMarketParamUpdateProposal spot_market_param_update_proposals = 3;
         */
        this.spotMarketParamUpdateProposals = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal derivative_market_param_update_proposals = 4;
         */
        this.derivativeMarketParamUpdateProposals = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.SpotMarketLaunchProposal spot_market_launch_proposals = 5;
         */
        this.spotMarketLaunchProposals = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.PerpetualMarketLaunchProposal perpetual_market_launch_proposals = 6;
         */
        this.perpetualMarketLaunchProposals = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal expiry_futures_market_launch_proposals = 7;
         */
        this.expiryFuturesMarketLaunchProposals = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal binary_options_market_launch_proposals = 9;
         */
        this.binaryOptionsMarketLaunchProposals = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal binary_options_param_update_proposals = 10;
         */
        this.binaryOptionsParamUpdateProposals = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.MarketForcedSettlementProposal market_forced_settlement_proposals = 13;
         */
        this.marketForcedSettlementProposals = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BatchExchangeModificationProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BatchExchangeModificationProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BatchExchangeModificationProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BatchExchangeModificationProposal, a, b);
    }
}
BatchExchangeModificationProposal.runtime = proto3;
BatchExchangeModificationProposal.typeName = "injective.exchange.v1beta1.BatchExchangeModificationProposal";
BatchExchangeModificationProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "spot_market_param_update_proposals", kind: "message", T: SpotMarketParamUpdateProposal, repeated: true },
    { no: 4, name: "derivative_market_param_update_proposals", kind: "message", T: DerivativeMarketParamUpdateProposal, repeated: true },
    { no: 5, name: "spot_market_launch_proposals", kind: "message", T: SpotMarketLaunchProposal, repeated: true },
    { no: 6, name: "perpetual_market_launch_proposals", kind: "message", T: PerpetualMarketLaunchProposal, repeated: true },
    { no: 7, name: "expiry_futures_market_launch_proposals", kind: "message", T: ExpiryFuturesMarketLaunchProposal, repeated: true },
    { no: 8, name: "trading_reward_campaign_update_proposal", kind: "message", T: TradingRewardCampaignUpdateProposal },
    { no: 9, name: "binary_options_market_launch_proposals", kind: "message", T: BinaryOptionsMarketLaunchProposal, repeated: true },
    { no: 10, name: "binary_options_param_update_proposals", kind: "message", T: BinaryOptionsMarketParamUpdateProposal, repeated: true },
    { no: 11, name: "denom_decimals_update_proposal", kind: "message", T: UpdateDenomDecimalsProposal },
    { no: 12, name: "fee_discount_proposal", kind: "message", T: FeeDiscountProposal },
    { no: 13, name: "market_forced_settlement_proposals", kind: "message", T: MarketForcedSettlementProposal, repeated: true },
]);
/**
 * SpotMarketLaunchProposal defines a SDK message for proposing a new spot
 * market through governance
 *
 * @generated from message injective.exchange.v1beta1.SpotMarketLaunchProposal
 */
export class SpotMarketLaunchProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * Ticker for the spot market.
         *
         * @generated from field: string ticker = 3;
         */
        this.ticker = "";
        /**
         * type of coin to use as the base currency
         *
         * @generated from field: string base_denom = 4;
         */
        this.baseDenom = "";
        /**
         * type of coin to use as the quote currency
         *
         * @generated from field: string quote_denom = 5;
         */
        this.quoteDenom = "";
        /**
         * min_price_tick_size defines the minimum tick size of the order's price
         *
         * @generated from field: string min_price_tick_size = 6;
         */
        this.minPriceTickSize = "";
        /**
         * min_quantity_tick_size defines the minimum tick size of the order's
         * quantity
         *
         * @generated from field: string min_quantity_tick_size = 7;
         */
        this.minQuantityTickSize = "";
        /**
         * maker_fee_rate defines the fee percentage makers pay when trading
         *
         * @generated from field: string maker_fee_rate = 8;
         */
        this.makerFeeRate = "";
        /**
         * taker_fee_rate defines the fee percentage takers pay when trading
         *
         * @generated from field: string taker_fee_rate = 9;
         */
        this.takerFeeRate = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SpotMarketLaunchProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SpotMarketLaunchProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SpotMarketLaunchProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SpotMarketLaunchProposal, a, b);
    }
}
SpotMarketLaunchProposal.runtime = proto3;
SpotMarketLaunchProposal.typeName = "injective.exchange.v1beta1.SpotMarketLaunchProposal";
SpotMarketLaunchProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "base_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "maker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "taker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * PerpetualMarketLaunchProposal defines a SDK message for proposing a new
 * perpetual futures market through governance
 *
 * @generated from message injective.exchange.v1beta1.PerpetualMarketLaunchProposal
 */
export class PerpetualMarketLaunchProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * Ticker for the derivative market.
         *
         * @generated from field: string ticker = 3;
         */
        this.ticker = "";
        /**
         * type of coin to use as the base currency
         *
         * @generated from field: string quote_denom = 4;
         */
        this.quoteDenom = "";
        /**
         * Oracle base currency
         *
         * @generated from field: string oracle_base = 5;
         */
        this.oracleBase = "";
        /**
         * Oracle quote currency
         *
         * @generated from field: string oracle_quote = 6;
         */
        this.oracleQuote = "";
        /**
         * Scale factor for oracle prices.
         *
         * @generated from field: uint32 oracle_scale_factor = 7;
         */
        this.oracleScaleFactor = 0;
        /**
         * Oracle type
         *
         * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 8;
         */
        this.oracleType = OracleType.Unspecified;
        /**
         * initial_margin_ratio defines the initial margin ratio for the derivative
         * market
         *
         * @generated from field: string initial_margin_ratio = 9;
         */
        this.initialMarginRatio = "";
        /**
         * maintenance_margin_ratio defines the maintenance margin ratio for the
         * derivative market
         *
         * @generated from field: string maintenance_margin_ratio = 10;
         */
        this.maintenanceMarginRatio = "";
        /**
         * maker_fee_rate defines the exchange trade fee for makers for the derivative
         * market
         *
         * @generated from field: string maker_fee_rate = 11;
         */
        this.makerFeeRate = "";
        /**
         * taker_fee_rate defines the exchange trade fee for takers for the derivative
         * market
         *
         * @generated from field: string taker_fee_rate = 12;
         */
        this.takerFeeRate = "";
        /**
         * min_price_tick_size defines the minimum tick size of the order's price and
         * margin
         *
         * @generated from field: string min_price_tick_size = 13;
         */
        this.minPriceTickSize = "";
        /**
         * min_quantity_tick_size defines the minimum tick size of the order's
         * quantity
         *
         * @generated from field: string min_quantity_tick_size = 14;
         */
        this.minQuantityTickSize = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PerpetualMarketLaunchProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PerpetualMarketLaunchProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PerpetualMarketLaunchProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PerpetualMarketLaunchProposal, a, b);
    }
}
PerpetualMarketLaunchProposal.runtime = proto3;
PerpetualMarketLaunchProposal.typeName = "injective.exchange.v1beta1.PerpetualMarketLaunchProposal";
PerpetualMarketLaunchProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "oracle_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "oracle_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "oracle_scale_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 9, name: "initial_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "maintenance_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "maker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "taker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal
 */
export class BinaryOptionsMarketLaunchProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * Ticker for the derivative contract.
         *
         * @generated from field: string ticker = 3;
         */
        this.ticker = "";
        /**
         * Oracle symbol
         *
         * @generated from field: string oracle_symbol = 4;
         */
        this.oracleSymbol = "";
        /**
         * Oracle Provider
         *
         * @generated from field: string oracle_provider = 5;
         */
        this.oracleProvider = "";
        /**
         * Oracle type
         *
         * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 6;
         */
        this.oracleType = OracleType.Unspecified;
        /**
         * Scale factor for oracle prices.
         *
         * @generated from field: uint32 oracle_scale_factor = 7;
         */
        this.oracleScaleFactor = 0;
        /**
         * expiration timestamp
         *
         * @generated from field: int64 expiration_timestamp = 8;
         */
        this.expirationTimestamp = protoInt64.zero;
        /**
         * expiration timestamp
         *
         * @generated from field: int64 settlement_timestamp = 9;
         */
        this.settlementTimestamp = protoInt64.zero;
        /**
         * admin of the market
         *
         * @generated from field: string admin = 10;
         */
        this.admin = "";
        /**
         * Address of the quote currency denomination for the binary options contract
         *
         * @generated from field: string quote_denom = 11;
         */
        this.quoteDenom = "";
        /**
         * maker_fee_rate defines the maker fee rate of a binary options market
         *
         * @generated from field: string maker_fee_rate = 12;
         */
        this.makerFeeRate = "";
        /**
         * taker_fee_rate defines the taker fee rate of a derivative market
         *
         * @generated from field: string taker_fee_rate = 13;
         */
        this.takerFeeRate = "";
        /**
         * min_price_tick_size defines the minimum tick size that the price and margin
         * required for orders in the market
         *
         * @generated from field: string min_price_tick_size = 14;
         */
        this.minPriceTickSize = "";
        /**
         * min_quantity_tick_size defines the minimum tick size of the quantity
         * required for orders in the market
         *
         * @generated from field: string min_quantity_tick_size = 15;
         */
        this.minQuantityTickSize = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BinaryOptionsMarketLaunchProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BinaryOptionsMarketLaunchProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BinaryOptionsMarketLaunchProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BinaryOptionsMarketLaunchProposal, a, b);
    }
}
BinaryOptionsMarketLaunchProposal.runtime = proto3;
BinaryOptionsMarketLaunchProposal.typeName = "injective.exchange.v1beta1.BinaryOptionsMarketLaunchProposal";
BinaryOptionsMarketLaunchProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "oracle_symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "oracle_provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 7, name: "oracle_scale_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "expiration_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "settlement_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "maker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "taker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ExpiryFuturesMarketLaunchProposal defines a SDK message for proposing a new
 * expiry futures market through governance
 *
 * @generated from message injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal
 */
export class ExpiryFuturesMarketLaunchProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * Ticker for the derivative market.
         *
         * @generated from field: string ticker = 3;
         */
        this.ticker = "";
        /**
         * type of coin to use as the quote currency
         *
         * @generated from field: string quote_denom = 4;
         */
        this.quoteDenom = "";
        /**
         * Oracle base currency
         *
         * @generated from field: string oracle_base = 5;
         */
        this.oracleBase = "";
        /**
         * Oracle quote currency
         *
         * @generated from field: string oracle_quote = 6;
         */
        this.oracleQuote = "";
        /**
         * Scale factor for oracle prices.
         *
         * @generated from field: uint32 oracle_scale_factor = 7;
         */
        this.oracleScaleFactor = 0;
        /**
         * Oracle type
         *
         * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 8;
         */
        this.oracleType = OracleType.Unspecified;
        /**
         * Expiration time of the market
         *
         * @generated from field: int64 expiry = 9;
         */
        this.expiry = protoInt64.zero;
        /**
         * initial_margin_ratio defines the initial margin ratio for the derivative
         * market
         *
         * @generated from field: string initial_margin_ratio = 10;
         */
        this.initialMarginRatio = "";
        /**
         * maintenance_margin_ratio defines the maintenance margin ratio for the
         * derivative market
         *
         * @generated from field: string maintenance_margin_ratio = 11;
         */
        this.maintenanceMarginRatio = "";
        /**
         * maker_fee_rate defines the exchange trade fee for makers for the derivative
         * market
         *
         * @generated from field: string maker_fee_rate = 12;
         */
        this.makerFeeRate = "";
        /**
         * taker_fee_rate defines the exchange trade fee for takers for the derivative
         * market
         *
         * @generated from field: string taker_fee_rate = 13;
         */
        this.takerFeeRate = "";
        /**
         * min_price_tick_size defines the minimum tick size of the order's price and
         * margin
         *
         * @generated from field: string min_price_tick_size = 14;
         */
        this.minPriceTickSize = "";
        /**
         * min_quantity_tick_size defines the minimum tick size of the order's
         * quantity
         *
         * @generated from field: string min_quantity_tick_size = 15;
         */
        this.minQuantityTickSize = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExpiryFuturesMarketLaunchProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExpiryFuturesMarketLaunchProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExpiryFuturesMarketLaunchProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ExpiryFuturesMarketLaunchProposal, a, b);
    }
}
ExpiryFuturesMarketLaunchProposal.runtime = proto3;
ExpiryFuturesMarketLaunchProposal.typeName = "injective.exchange.v1beta1.ExpiryFuturesMarketLaunchProposal";
ExpiryFuturesMarketLaunchProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "quote_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "oracle_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "oracle_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "oracle_scale_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 9, name: "expiry", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "initial_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "maintenance_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "maker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "taker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal
 */
export class DerivativeMarketParamUpdateProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: string market_id = 3;
         */
        this.marketId = "";
        /**
         * initial_margin_ratio defines the initial margin ratio for the derivative
         * market
         *
         * @generated from field: string initial_margin_ratio = 4;
         */
        this.initialMarginRatio = "";
        /**
         * maintenance_margin_ratio defines the maintenance margin ratio for the
         * derivative market
         *
         * @generated from field: string maintenance_margin_ratio = 5;
         */
        this.maintenanceMarginRatio = "";
        /**
         * maker_fee_rate defines the exchange trade fee for makers for the derivative
         * market
         *
         * @generated from field: string maker_fee_rate = 6;
         */
        this.makerFeeRate = "";
        /**
         * taker_fee_rate defines the exchange trade fee for takers for the derivative
         * market
         *
         * @generated from field: string taker_fee_rate = 7;
         */
        this.takerFeeRate = "";
        /**
         * relayer_fee_share_rate defines the relayer fee share rate for the
         * derivative market
         *
         * @generated from field: string relayer_fee_share_rate = 8;
         */
        this.relayerFeeShareRate = "";
        /**
         * min_price_tick_size defines the minimum tick size of the order's price and
         * margin
         *
         * @generated from field: string min_price_tick_size = 9;
         */
        this.minPriceTickSize = "";
        /**
         * min_quantity_tick_size defines the minimum tick size of the order's
         * quantity
         *
         * @generated from field: string min_quantity_tick_size = 10;
         */
        this.minQuantityTickSize = "";
        /**
         * hourly_interest_rate defines the hourly interest rate
         *
         * @generated from field: string HourlyInterestRate = 11;
         */
        this.HourlyInterestRate = "";
        /**
         * hourly_funding_rate_cap defines the maximum absolute value of the hourly
         * funding rate
         *
         * @generated from field: string HourlyFundingRateCap = 12;
         */
        this.HourlyFundingRateCap = "";
        /**
         * @generated from field: injective.exchange.v1beta1.MarketStatus status = 13;
         */
        this.status = MarketStatus.Unspecified;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DerivativeMarketParamUpdateProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DerivativeMarketParamUpdateProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DerivativeMarketParamUpdateProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DerivativeMarketParamUpdateProposal, a, b);
    }
}
DerivativeMarketParamUpdateProposal.runtime = proto3;
DerivativeMarketParamUpdateProposal.typeName = "injective.exchange.v1beta1.DerivativeMarketParamUpdateProposal";
DerivativeMarketParamUpdateProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "initial_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "maintenance_margin_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "maker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "taker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "relayer_fee_share_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "HourlyInterestRate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "HourlyFundingRateCap", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "status", kind: "enum", T: proto3.getEnumType(MarketStatus) },
    { no: 14, name: "oracle_params", kind: "message", T: OracleParams },
]);
/**
 * @generated from message injective.exchange.v1beta1.MarketForcedSettlementProposal
 */
export class MarketForcedSettlementProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: string market_id = 3;
         */
        this.marketId = "";
        /**
         * @generated from field: string settlement_price = 4;
         */
        this.settlementPrice = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MarketForcedSettlementProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MarketForcedSettlementProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MarketForcedSettlementProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MarketForcedSettlementProposal, a, b);
    }
}
MarketForcedSettlementProposal.runtime = proto3;
MarketForcedSettlementProposal.typeName = "injective.exchange.v1beta1.MarketForcedSettlementProposal";
MarketForcedSettlementProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "settlement_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.UpdateDenomDecimalsProposal
 */
export class UpdateDenomDecimalsProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DenomDecimals denom_decimals = 3;
         */
        this.denomDecimals = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateDenomDecimalsProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateDenomDecimalsProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateDenomDecimalsProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateDenomDecimalsProposal, a, b);
    }
}
UpdateDenomDecimalsProposal.runtime = proto3;
UpdateDenomDecimalsProposal.typeName = "injective.exchange.v1beta1.UpdateDenomDecimalsProposal";
UpdateDenomDecimalsProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom_decimals", kind: "message", T: DenomDecimals, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal
 */
export class BinaryOptionsMarketParamUpdateProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: string market_id = 3;
         */
        this.marketId = "";
        /**
         * maker_fee_rate defines the exchange trade fee for makers for the derivative
         * market
         *
         * @generated from field: string maker_fee_rate = 4;
         */
        this.makerFeeRate = "";
        /**
         * taker_fee_rate defines the exchange trade fee for takers for the derivative
         * market
         *
         * @generated from field: string taker_fee_rate = 5;
         */
        this.takerFeeRate = "";
        /**
         * relayer_fee_share_rate defines the relayer fee share rate for the
         * derivative market
         *
         * @generated from field: string relayer_fee_share_rate = 6;
         */
        this.relayerFeeShareRate = "";
        /**
         * min_price_tick_size defines the minimum tick size of the order's price and
         * margin
         *
         * @generated from field: string min_price_tick_size = 7;
         */
        this.minPriceTickSize = "";
        /**
         * min_quantity_tick_size defines the minimum tick size of the order's
         * quantity
         *
         * @generated from field: string min_quantity_tick_size = 8;
         */
        this.minQuantityTickSize = "";
        /**
         * expiration timestamp
         *
         * @generated from field: int64 expiration_timestamp = 9;
         */
        this.expirationTimestamp = protoInt64.zero;
        /**
         * expiration timestamp
         *
         * @generated from field: int64 settlement_timestamp = 10;
         */
        this.settlementTimestamp = protoInt64.zero;
        /**
         * new price at which market will be settled
         *
         * @generated from field: string settlement_price = 11;
         */
        this.settlementPrice = "";
        /**
         * admin of the market
         *
         * @generated from field: string admin = 12;
         */
        this.admin = "";
        /**
         * @generated from field: injective.exchange.v1beta1.MarketStatus status = 13;
         */
        this.status = MarketStatus.Unspecified;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BinaryOptionsMarketParamUpdateProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BinaryOptionsMarketParamUpdateProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BinaryOptionsMarketParamUpdateProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BinaryOptionsMarketParamUpdateProposal, a, b);
    }
}
BinaryOptionsMarketParamUpdateProposal.runtime = proto3;
BinaryOptionsMarketParamUpdateProposal.typeName = "injective.exchange.v1beta1.BinaryOptionsMarketParamUpdateProposal";
BinaryOptionsMarketParamUpdateProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "maker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "taker_fee_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "relayer_fee_share_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "min_price_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "min_quantity_tick_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "expiration_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "settlement_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "settlement_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "status", kind: "enum", T: proto3.getEnumType(MarketStatus) },
    { no: 14, name: "oracle_params", kind: "message", T: ProviderOracleParams },
]);
/**
 * @generated from message injective.exchange.v1beta1.ProviderOracleParams
 */
export class ProviderOracleParams extends Message {
    constructor(data) {
        super();
        /**
         * Oracle base currency
         *
         * @generated from field: string symbol = 1;
         */
        this.symbol = "";
        /**
         * Oracle quote currency
         *
         * @generated from field: string provider = 2;
         */
        this.provider = "";
        /**
         * Scale factor for oracle prices.
         *
         * @generated from field: uint32 oracle_scale_factor = 3;
         */
        this.oracleScaleFactor = 0;
        /**
         * Oracle type
         *
         * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 4;
         */
        this.oracleType = OracleType.Unspecified;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProviderOracleParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProviderOracleParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProviderOracleParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProviderOracleParams, a, b);
    }
}
ProviderOracleParams.runtime = proto3;
ProviderOracleParams.typeName = "injective.exchange.v1beta1.ProviderOracleParams";
ProviderOracleParams.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "oracle_scale_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
]);
/**
 * @generated from message injective.exchange.v1beta1.OracleParams
 */
export class OracleParams extends Message {
    constructor(data) {
        super();
        /**
         * Oracle base currency
         *
         * @generated from field: string oracle_base = 1;
         */
        this.oracleBase = "";
        /**
         * Oracle quote currency
         *
         * @generated from field: string oracle_quote = 2;
         */
        this.oracleQuote = "";
        /**
         * Scale factor for oracle prices.
         *
         * @generated from field: uint32 oracle_scale_factor = 3;
         */
        this.oracleScaleFactor = 0;
        /**
         * Oracle type
         *
         * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 4;
         */
        this.oracleType = OracleType.Unspecified;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OracleParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OracleParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OracleParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OracleParams, a, b);
    }
}
OracleParams.runtime = proto3;
OracleParams.typeName = "injective.exchange.v1beta1.OracleParams";
OracleParams.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "oracle_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "oracle_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "oracle_scale_factor", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
]);
/**
 * @generated from message injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal
 */
export class TradingRewardCampaignLaunchProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.CampaignRewardPool campaign_reward_pools = 4;
         */
        this.campaignRewardPools = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TradingRewardCampaignLaunchProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TradingRewardCampaignLaunchProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TradingRewardCampaignLaunchProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TradingRewardCampaignLaunchProposal, a, b);
    }
}
TradingRewardCampaignLaunchProposal.runtime = proto3;
TradingRewardCampaignLaunchProposal.typeName = "injective.exchange.v1beta1.TradingRewardCampaignLaunchProposal";
TradingRewardCampaignLaunchProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "campaign_info", kind: "message", T: TradingRewardCampaignInfo },
    { no: 4, name: "campaign_reward_pools", kind: "message", T: CampaignRewardPool, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal
 */
export class TradingRewardCampaignUpdateProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.CampaignRewardPool campaign_reward_pools_additions = 4;
         */
        this.campaignRewardPoolsAdditions = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.CampaignRewardPool campaign_reward_pools_updates = 5;
         */
        this.campaignRewardPoolsUpdates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TradingRewardCampaignUpdateProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TradingRewardCampaignUpdateProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TradingRewardCampaignUpdateProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TradingRewardCampaignUpdateProposal, a, b);
    }
}
TradingRewardCampaignUpdateProposal.runtime = proto3;
TradingRewardCampaignUpdateProposal.typeName = "injective.exchange.v1beta1.TradingRewardCampaignUpdateProposal";
TradingRewardCampaignUpdateProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "campaign_info", kind: "message", T: TradingRewardCampaignInfo },
    { no: 4, name: "campaign_reward_pools_additions", kind: "message", T: CampaignRewardPool, repeated: true },
    { no: 5, name: "campaign_reward_pools_updates", kind: "message", T: CampaignRewardPool, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.RewardPointUpdate
 */
export class RewardPointUpdate extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string account_address = 1;
         */
        this.accountAddress = "";
        /**
         * new_points overwrites the current trading reward points for the account
         *
         * @generated from field: string new_points = 12;
         */
        this.newPoints = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RewardPointUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RewardPointUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RewardPointUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RewardPointUpdate, a, b);
    }
}
RewardPointUpdate.runtime = proto3;
RewardPointUpdate.typeName = "injective.exchange.v1beta1.RewardPointUpdate";
RewardPointUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "account_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "new_points", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal
 */
export class TradingRewardPendingPointsUpdateProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: int64 pending_pool_timestamp = 3;
         */
        this.pendingPoolTimestamp = protoInt64.zero;
        /**
         * @generated from field: repeated injective.exchange.v1beta1.RewardPointUpdate reward_point_updates = 4;
         */
        this.rewardPointUpdates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TradingRewardPendingPointsUpdateProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TradingRewardPendingPointsUpdateProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TradingRewardPendingPointsUpdateProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TradingRewardPendingPointsUpdateProposal, a, b);
    }
}
TradingRewardPendingPointsUpdateProposal.runtime = proto3;
TradingRewardPendingPointsUpdateProposal.typeName = "injective.exchange.v1beta1.TradingRewardPendingPointsUpdateProposal";
TradingRewardPendingPointsUpdateProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pending_pool_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "reward_point_updates", kind: "message", T: RewardPointUpdate, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.FeeDiscountProposal
 */
export class FeeDiscountProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeeDiscountProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeeDiscountProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeeDiscountProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FeeDiscountProposal, a, b);
    }
}
FeeDiscountProposal.runtime = proto3;
FeeDiscountProposal.typeName = "injective.exchange.v1beta1.FeeDiscountProposal";
FeeDiscountProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "schedule", kind: "message", T: FeeDiscountSchedule },
]);
/**
 * @generated from message injective.exchange.v1beta1.BatchCommunityPoolSpendProposal
 */
export class BatchCommunityPoolSpendProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: repeated cosmos.distribution.v1beta1.CommunityPoolSpendProposal proposals = 3;
         */
        this.proposals = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BatchCommunityPoolSpendProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BatchCommunityPoolSpendProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BatchCommunityPoolSpendProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BatchCommunityPoolSpendProposal, a, b);
    }
}
BatchCommunityPoolSpendProposal.runtime = proto3;
BatchCommunityPoolSpendProposal.typeName = "injective.exchange.v1beta1.BatchCommunityPoolSpendProposal";
BatchCommunityPoolSpendProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "proposals", kind: "message", T: CommunityPoolSpendProposal, repeated: true },
]);
/**
 * AtomicMarketOrderFeeMultiplierScheduleProposal defines a SDK message for
 * proposing new atomic take fee multipliers for specified markets
 *
 * @generated from message injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal
 */
export class AtomicMarketOrderFeeMultiplierScheduleProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.MarketFeeMultiplier market_fee_multipliers = 3;
         */
        this.marketFeeMultipliers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AtomicMarketOrderFeeMultiplierScheduleProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AtomicMarketOrderFeeMultiplierScheduleProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AtomicMarketOrderFeeMultiplierScheduleProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AtomicMarketOrderFeeMultiplierScheduleProposal, a, b);
    }
}
AtomicMarketOrderFeeMultiplierScheduleProposal.runtime = proto3;
AtomicMarketOrderFeeMultiplierScheduleProposal.typeName = "injective.exchange.v1beta1.AtomicMarketOrderFeeMultiplierScheduleProposal";
AtomicMarketOrderFeeMultiplierScheduleProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "market_fee_multipliers", kind: "message", T: MarketFeeMultiplier, repeated: true },
]);
//# sourceMappingURL=proposal_pb.js.map