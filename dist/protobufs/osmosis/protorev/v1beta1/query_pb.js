// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/protorev/v1beta1/query.proto (package osmosis.protorev.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { AllProtocolRevenue, BaseDenom, InfoByPoolType, RouteStatistics, TokenPairArbRoutes } from "./protorev_pb.js";
/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "osmosis.protorev.v1beta1.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "osmosis.protorev.v1beta1.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * QueryGetProtoRevNumberOfTradesRequest is request type for the
 * Query/GetProtoRevNumberOfTrades RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest
 */
export class QueryGetProtoRevNumberOfTradesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevNumberOfTradesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevNumberOfTradesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevNumberOfTradesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevNumberOfTradesRequest, a, b);
    }
}
QueryGetProtoRevNumberOfTradesRequest.runtime = proto3;
QueryGetProtoRevNumberOfTradesRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest";
QueryGetProtoRevNumberOfTradesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryGetProtoRevNumberOfTradesResponse is response type for the
 * Query/GetProtoRevNumberOfTrades RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse
 */
export class QueryGetProtoRevNumberOfTradesResponse extends Message {
    constructor(data) {
        super();
        /**
         * number_of_trades is the number of trades the module has executed
         *
         * @generated from field: string number_of_trades = 1;
         */
        this.numberOfTrades = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevNumberOfTradesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevNumberOfTradesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevNumberOfTradesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevNumberOfTradesResponse, a, b);
    }
}
QueryGetProtoRevNumberOfTradesResponse.runtime = proto3;
QueryGetProtoRevNumberOfTradesResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse";
QueryGetProtoRevNumberOfTradesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "number_of_trades", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryGetProtoRevProfitsByDenomRequest is request type for the
 * Query/GetProtoRevProfitsByDenom RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest
 */
export class QueryGetProtoRevProfitsByDenomRequest extends Message {
    constructor(data) {
        super();
        /**
         * denom is the denom to query profits by
         *
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevProfitsByDenomRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevProfitsByDenomRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevProfitsByDenomRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevProfitsByDenomRequest, a, b);
    }
}
QueryGetProtoRevProfitsByDenomRequest.runtime = proto3;
QueryGetProtoRevProfitsByDenomRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest";
QueryGetProtoRevProfitsByDenomRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryGetProtoRevProfitsByDenomResponse is response type for the
 * Query/GetProtoRevProfitsByDenom RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse
 */
export class QueryGetProtoRevProfitsByDenomResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevProfitsByDenomResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevProfitsByDenomResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevProfitsByDenomResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevProfitsByDenomResponse, a, b);
    }
}
QueryGetProtoRevProfitsByDenomResponse.runtime = proto3;
QueryGetProtoRevProfitsByDenomResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse";
QueryGetProtoRevProfitsByDenomResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "profit", kind: "message", T: Coin },
]);
/**
 * QueryGetProtoRevAllProfitsRequest is request type for the
 * Query/GetProtoRevAllProfits RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest
 */
export class QueryGetProtoRevAllProfitsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevAllProfitsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevAllProfitsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevAllProfitsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevAllProfitsRequest, a, b);
    }
}
QueryGetProtoRevAllProfitsRequest.runtime = proto3;
QueryGetProtoRevAllProfitsRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest";
QueryGetProtoRevAllProfitsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryGetProtoRevAllProfitsResponse is response type for the
 * Query/GetProtoRevAllProfits RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse
 */
export class QueryGetProtoRevAllProfitsResponse extends Message {
    constructor(data) {
        super();
        /**
         * profits is a list of all of the profits from the module
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin profits = 1;
         */
        this.profits = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevAllProfitsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevAllProfitsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevAllProfitsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevAllProfitsResponse, a, b);
    }
}
QueryGetProtoRevAllProfitsResponse.runtime = proto3;
QueryGetProtoRevAllProfitsResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse";
QueryGetProtoRevAllProfitsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "profits", kind: "message", T: Coin, repeated: true },
]);
/**
 * QueryGetProtoRevStatisticsByPoolRequest is request type for the
 * Query/GetProtoRevStatisticsByRoute RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteRequest
 */
export class QueryGetProtoRevStatisticsByRouteRequest extends Message {
    constructor(data) {
        super();
        /**
         * route is the set of pool ids to query statistics by i.e. 1,2,3
         *
         * @generated from field: repeated uint64 route = 1;
         */
        this.route = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevStatisticsByRouteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevStatisticsByRouteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevStatisticsByRouteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevStatisticsByRouteRequest, a, b);
    }
}
QueryGetProtoRevStatisticsByRouteRequest.runtime = proto3;
QueryGetProtoRevStatisticsByRouteRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteRequest";
QueryGetProtoRevStatisticsByRouteRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "route", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
]);
/**
 * QueryGetProtoRevStatisticsByRouteResponse is response type for the
 * Query/GetProtoRevStatisticsByRoute RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteResponse
 */
export class QueryGetProtoRevStatisticsByRouteResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevStatisticsByRouteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevStatisticsByRouteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevStatisticsByRouteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevStatisticsByRouteResponse, a, b);
    }
}
QueryGetProtoRevStatisticsByRouteResponse.runtime = proto3;
QueryGetProtoRevStatisticsByRouteResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteResponse";
QueryGetProtoRevStatisticsByRouteResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "statistics", kind: "message", T: RouteStatistics },
]);
/**
 * QueryGetProtoRevAllRouteStatisticsRequest is request type for the
 * Query/GetProtoRevAllRouteStatistics RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsRequest
 */
export class QueryGetProtoRevAllRouteStatisticsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevAllRouteStatisticsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevAllRouteStatisticsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevAllRouteStatisticsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevAllRouteStatisticsRequest, a, b);
    }
}
QueryGetProtoRevAllRouteStatisticsRequest.runtime = proto3;
QueryGetProtoRevAllRouteStatisticsRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsRequest";
QueryGetProtoRevAllRouteStatisticsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryGetProtoRevAllRouteStatisticsResponse is response type for the
 * Query/GetProtoRevAllRouteStatistics RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsResponse
 */
export class QueryGetProtoRevAllRouteStatisticsResponse extends Message {
    constructor(data) {
        super();
        /**
         * statistics contains the number of trades/profits the module has executed on
         * all routes it has successfully executed a trade on
         *
         * @generated from field: repeated osmosis.protorev.v1beta1.RouteStatistics statistics = 1;
         */
        this.statistics = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevAllRouteStatisticsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevAllRouteStatisticsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevAllRouteStatisticsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevAllRouteStatisticsResponse, a, b);
    }
}
QueryGetProtoRevAllRouteStatisticsResponse.runtime = proto3;
QueryGetProtoRevAllRouteStatisticsResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsResponse";
QueryGetProtoRevAllRouteStatisticsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "statistics", kind: "message", T: RouteStatistics, repeated: true },
]);
/**
 * QueryGetProtoRevTokenPairArbRoutesRequest is request type for the
 * Query/GetProtoRevTokenPairArbRoutes RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest
 */
export class QueryGetProtoRevTokenPairArbRoutesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevTokenPairArbRoutesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevTokenPairArbRoutesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevTokenPairArbRoutesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevTokenPairArbRoutesRequest, a, b);
    }
}
QueryGetProtoRevTokenPairArbRoutesRequest.runtime = proto3;
QueryGetProtoRevTokenPairArbRoutesRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest";
QueryGetProtoRevTokenPairArbRoutesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryGetProtoRevTokenPairArbRoutesResponse is response type for the
 * Query/GetProtoRevTokenPairArbRoutes RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse
 */
export class QueryGetProtoRevTokenPairArbRoutesResponse extends Message {
    constructor(data) {
        super();
        /**
         * routes is a list of all of the hot routes that the module is currently
         * arbitraging
         *
         * @generated from field: repeated osmosis.protorev.v1beta1.TokenPairArbRoutes routes = 1;
         */
        this.routes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevTokenPairArbRoutesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevTokenPairArbRoutesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevTokenPairArbRoutesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevTokenPairArbRoutesResponse, a, b);
    }
}
QueryGetProtoRevTokenPairArbRoutesResponse.runtime = proto3;
QueryGetProtoRevTokenPairArbRoutesResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse";
QueryGetProtoRevTokenPairArbRoutesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "routes", kind: "message", T: TokenPairArbRoutes, repeated: true },
]);
/**
 * QueryGetProtoRevAdminAccountRequest is request type for the
 * Query/GetProtoRevAdminAccount RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountRequest
 */
export class QueryGetProtoRevAdminAccountRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevAdminAccountRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevAdminAccountRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevAdminAccountRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevAdminAccountRequest, a, b);
    }
}
QueryGetProtoRevAdminAccountRequest.runtime = proto3;
QueryGetProtoRevAdminAccountRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountRequest";
QueryGetProtoRevAdminAccountRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryGetProtoRevAdminAccountResponse is response type for the
 * Query/GetProtoRevAdminAccount RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountResponse
 */
export class QueryGetProtoRevAdminAccountResponse extends Message {
    constructor(data) {
        super();
        /**
         * admin_account is the admin account of the module
         *
         * @generated from field: string admin_account = 1;
         */
        this.adminAccount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevAdminAccountResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevAdminAccountResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevAdminAccountResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevAdminAccountResponse, a, b);
    }
}
QueryGetProtoRevAdminAccountResponse.runtime = proto3;
QueryGetProtoRevAdminAccountResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountResponse";
QueryGetProtoRevAdminAccountResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "admin_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryGetProtoRevDeveloperAccountRequest is request type for the
 * Query/GetProtoRevDeveloperAccount RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountRequest
 */
export class QueryGetProtoRevDeveloperAccountRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevDeveloperAccountRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevDeveloperAccountRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevDeveloperAccountRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevDeveloperAccountRequest, a, b);
    }
}
QueryGetProtoRevDeveloperAccountRequest.runtime = proto3;
QueryGetProtoRevDeveloperAccountRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountRequest";
QueryGetProtoRevDeveloperAccountRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryGetProtoRevDeveloperAccountResponse is response type for the
 * Query/GetProtoRevDeveloperAccount RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountResponse
 */
export class QueryGetProtoRevDeveloperAccountResponse extends Message {
    constructor(data) {
        super();
        /**
         * developer_account is the developer account of the module
         *
         * @generated from field: string developer_account = 1;
         */
        this.developerAccount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevDeveloperAccountResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevDeveloperAccountResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevDeveloperAccountResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevDeveloperAccountResponse, a, b);
    }
}
QueryGetProtoRevDeveloperAccountResponse.runtime = proto3;
QueryGetProtoRevDeveloperAccountResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountResponse";
QueryGetProtoRevDeveloperAccountResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "developer_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryGetProtoRevInfoByPoolTypeRequest is request type for the
 * Query/GetProtoRevInfoByPoolType RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeRequest
 */
export class QueryGetProtoRevInfoByPoolTypeRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevInfoByPoolTypeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevInfoByPoolTypeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevInfoByPoolTypeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevInfoByPoolTypeRequest, a, b);
    }
}
QueryGetProtoRevInfoByPoolTypeRequest.runtime = proto3;
QueryGetProtoRevInfoByPoolTypeRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeRequest";
QueryGetProtoRevInfoByPoolTypeRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryGetProtoRevInfoByPoolTypeResponse is response type for the
 * Query/GetProtoRevInfoByPoolType RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeResponse
 */
export class QueryGetProtoRevInfoByPoolTypeResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevInfoByPoolTypeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevInfoByPoolTypeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevInfoByPoolTypeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevInfoByPoolTypeResponse, a, b);
    }
}
QueryGetProtoRevInfoByPoolTypeResponse.runtime = proto3;
QueryGetProtoRevInfoByPoolTypeResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeResponse";
QueryGetProtoRevInfoByPoolTypeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "info_by_pool_type", kind: "message", T: InfoByPoolType },
]);
/**
 * QueryGetProtoRevMaxPoolPointsPerBlockRequest is request type for the
 * Query/GetProtoRevMaxPoolPointsPerBlock RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockRequest
 */
export class QueryGetProtoRevMaxPoolPointsPerBlockRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevMaxPoolPointsPerBlockRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevMaxPoolPointsPerBlockRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevMaxPoolPointsPerBlockRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevMaxPoolPointsPerBlockRequest, a, b);
    }
}
QueryGetProtoRevMaxPoolPointsPerBlockRequest.runtime = proto3;
QueryGetProtoRevMaxPoolPointsPerBlockRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockRequest";
QueryGetProtoRevMaxPoolPointsPerBlockRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryGetProtoRevMaxPoolPointsPerBlockResponse is response type for the
 * Query/GetProtoRevMaxPoolPointsPerBlock RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockResponse
 */
export class QueryGetProtoRevMaxPoolPointsPerBlockResponse extends Message {
    constructor(data) {
        super();
        /**
         * max_pool_points_per_block is the maximum number of pool points that can be
         * consumed per block
         *
         * @generated from field: uint64 max_pool_points_per_block = 1;
         */
        this.maxPoolPointsPerBlock = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevMaxPoolPointsPerBlockResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevMaxPoolPointsPerBlockResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevMaxPoolPointsPerBlockResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevMaxPoolPointsPerBlockResponse, a, b);
    }
}
QueryGetProtoRevMaxPoolPointsPerBlockResponse.runtime = proto3;
QueryGetProtoRevMaxPoolPointsPerBlockResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockResponse";
QueryGetProtoRevMaxPoolPointsPerBlockResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "max_pool_points_per_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryGetProtoRevMaxPoolPointsPerTxRequest is request type for the
 * Query/GetProtoRevMaxPoolPointsPerTx RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxRequest
 */
export class QueryGetProtoRevMaxPoolPointsPerTxRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevMaxPoolPointsPerTxRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevMaxPoolPointsPerTxRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevMaxPoolPointsPerTxRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevMaxPoolPointsPerTxRequest, a, b);
    }
}
QueryGetProtoRevMaxPoolPointsPerTxRequest.runtime = proto3;
QueryGetProtoRevMaxPoolPointsPerTxRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxRequest";
QueryGetProtoRevMaxPoolPointsPerTxRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryGetProtoRevMaxPoolPointsPerTxResponse is response type for the
 * Query/GetProtoRevMaxPoolPointsPerTx RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxResponse
 */
export class QueryGetProtoRevMaxPoolPointsPerTxResponse extends Message {
    constructor(data) {
        super();
        /**
         * max_pool_points_per_tx is the maximum number of pool points that can be
         * consumed per transaction
         *
         * @generated from field: uint64 max_pool_points_per_tx = 1;
         */
        this.maxPoolPointsPerTx = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevMaxPoolPointsPerTxResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevMaxPoolPointsPerTxResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevMaxPoolPointsPerTxResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevMaxPoolPointsPerTxResponse, a, b);
    }
}
QueryGetProtoRevMaxPoolPointsPerTxResponse.runtime = proto3;
QueryGetProtoRevMaxPoolPointsPerTxResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxResponse";
QueryGetProtoRevMaxPoolPointsPerTxResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "max_pool_points_per_tx", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryGetProtoRevBaseDenomsRequest is request type for the
 * Query/GetProtoRevBaseDenoms RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsRequest
 */
export class QueryGetProtoRevBaseDenomsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevBaseDenomsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevBaseDenomsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevBaseDenomsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevBaseDenomsRequest, a, b);
    }
}
QueryGetProtoRevBaseDenomsRequest.runtime = proto3;
QueryGetProtoRevBaseDenomsRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsRequest";
QueryGetProtoRevBaseDenomsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryGetProtoRevBaseDenomsResponse is response type for the
 * Query/GetProtoRevBaseDenoms RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsResponse
 */
export class QueryGetProtoRevBaseDenomsResponse extends Message {
    constructor(data) {
        super();
        /**
         * base_denoms is a list of all of the base denoms and step sizes
         *
         * @generated from field: repeated osmosis.protorev.v1beta1.BaseDenom base_denoms = 1;
         */
        this.baseDenoms = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevBaseDenomsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevBaseDenomsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevBaseDenomsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevBaseDenomsResponse, a, b);
    }
}
QueryGetProtoRevBaseDenomsResponse.runtime = proto3;
QueryGetProtoRevBaseDenomsResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsResponse";
QueryGetProtoRevBaseDenomsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "base_denoms", kind: "message", T: BaseDenom, repeated: true },
]);
/**
 * QueryGetProtoRevEnabledRequest is request type for the
 * Query/GetProtoRevEnabled RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevEnabledRequest
 */
export class QueryGetProtoRevEnabledRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevEnabledRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevEnabledRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevEnabledRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevEnabledRequest, a, b);
    }
}
QueryGetProtoRevEnabledRequest.runtime = proto3;
QueryGetProtoRevEnabledRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevEnabledRequest";
QueryGetProtoRevEnabledRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryGetProtoRevEnabledResponse is response type for the
 * Query/GetProtoRevEnabled RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevEnabledResponse
 */
export class QueryGetProtoRevEnabledResponse extends Message {
    constructor(data) {
        super();
        /**
         * enabled is whether the module is enabled
         *
         * @generated from field: bool enabled = 1;
         */
        this.enabled = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevEnabledResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevEnabledResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevEnabledResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevEnabledResponse, a, b);
    }
}
QueryGetProtoRevEnabledResponse.runtime = proto3;
QueryGetProtoRevEnabledResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevEnabledResponse";
QueryGetProtoRevEnabledResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * QueryGetProtoRevPoolRequest is request type for the
 * Query/GetProtoRevPool RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest
 */
export class QueryGetProtoRevPoolRequest extends Message {
    constructor(data) {
        super();
        /**
         * base_denom is the base denom set in protorev for the denom pair to pool
         * mapping
         *
         * @generated from field: string base_denom = 1;
         */
        this.baseDenom = "";
        /**
         * other_denom is the other denom for the denom pair to pool mapping
         *
         * @generated from field: string other_denom = 2;
         */
        this.otherDenom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevPoolRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevPoolRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevPoolRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevPoolRequest, a, b);
    }
}
QueryGetProtoRevPoolRequest.runtime = proto3;
QueryGetProtoRevPoolRequest.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest";
QueryGetProtoRevPoolRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "base_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "other_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryGetProtoRevPoolResponse is response type for the
 * Query/GetProtoRevPool RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse
 */
export class QueryGetProtoRevPoolResponse extends Message {
    constructor(data) {
        super();
        /**
         * pool_id is the pool_id stored for the denom pair
         *
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetProtoRevPoolResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetProtoRevPoolResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetProtoRevPoolResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetProtoRevPoolResponse, a, b);
    }
}
QueryGetProtoRevPoolResponse.runtime = proto3;
QueryGetProtoRevPoolResponse.typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse";
QueryGetProtoRevPoolResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.protorev.v1beta1.QueryGetAllProtocolRevenueRequest
 */
export class QueryGetAllProtocolRevenueRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetAllProtocolRevenueRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetAllProtocolRevenueRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetAllProtocolRevenueRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetAllProtocolRevenueRequest, a, b);
    }
}
QueryGetAllProtocolRevenueRequest.runtime = proto3;
QueryGetAllProtocolRevenueRequest.typeName = "osmosis.protorev.v1beta1.QueryGetAllProtocolRevenueRequest";
QueryGetAllProtocolRevenueRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.protorev.v1beta1.QueryGetAllProtocolRevenueResponse
 */
export class QueryGetAllProtocolRevenueResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGetAllProtocolRevenueResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGetAllProtocolRevenueResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGetAllProtocolRevenueResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGetAllProtocolRevenueResponse, a, b);
    }
}
QueryGetAllProtocolRevenueResponse.runtime = proto3;
QueryGetAllProtocolRevenueResponse.typeName = "osmosis.protorev.v1beta1.QueryGetAllProtocolRevenueResponse";
QueryGetAllProtocolRevenueResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "all_protocol_revenue", kind: "message", T: AllProtocolRevenue },
]);
//# sourceMappingURL=query_pb.js.map