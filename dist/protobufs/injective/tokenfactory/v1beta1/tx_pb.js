// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/tokenfactory/v1beta1/tx.proto (package injective.tokenfactory.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Metadata } from "../../../cosmos/bank/v1beta1/bank_pb.js";
import { Params } from "./params_pb.js";
/**
 * MsgCreateDenom defines the message structure for the CreateDenom gRPC service
 * method. It allows an account to create a new denom. It requires a sender
 * address and a sub denomination. The (sender_address, sub_denomination) tuple
 * must be unique and cannot be re-used.
 *
 * The resulting denom created is defined as
 * <factory/{creatorAddress}/{subdenom}>. The resulting denom's admin is
 * originally set to be the creator, but this can be changed later. The token
 * denom does not indicate the current admin.
 *
 * @generated from message injective.tokenfactory.v1beta1.MsgCreateDenom
 */
export class MsgCreateDenom extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * subdenom can be up to 44 "alphanumeric" characters long.
         *
         * @generated from field: string subdenom = 2;
         */
        this.subdenom = "";
        /**
         * @generated from field: string name = 3;
         */
        this.name = "";
        /**
         * @generated from field: string symbol = 4;
         */
        this.symbol = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateDenom().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateDenom().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateDenom().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateDenom, a, b);
    }
}
MsgCreateDenom.runtime = proto3;
MsgCreateDenom.typeName = "injective.tokenfactory.v1beta1.MsgCreateDenom";
MsgCreateDenom.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subdenom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgCreateDenomResponse is the return value of MsgCreateDenom
 * It returns the full string of the newly created denom
 *
 * @generated from message injective.tokenfactory.v1beta1.MsgCreateDenomResponse
 */
export class MsgCreateDenomResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string new_token_denom = 1;
         */
        this.newTokenDenom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateDenomResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateDenomResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateDenomResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateDenomResponse, a, b);
    }
}
MsgCreateDenomResponse.runtime = proto3;
MsgCreateDenomResponse.typeName = "injective.tokenfactory.v1beta1.MsgCreateDenomResponse";
MsgCreateDenomResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "new_token_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgMint is the sdk.Msg type for allowing an admin account to mint
 * more of a token.  For now, we only support minting to the sender account
 *
 * @generated from message injective.tokenfactory.v1beta1.MsgMint
 */
export class MsgMint extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgMint().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgMint().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgMint().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgMint, a, b);
    }
}
MsgMint.runtime = proto3;
MsgMint.typeName = "injective.tokenfactory.v1beta1.MsgMint";
MsgMint.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
]);
/**
 * @generated from message injective.tokenfactory.v1beta1.MsgMintResponse
 */
export class MsgMintResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgMintResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgMintResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgMintResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgMintResponse, a, b);
    }
}
MsgMintResponse.runtime = proto3;
MsgMintResponse.typeName = "injective.tokenfactory.v1beta1.MsgMintResponse";
MsgMintResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgBurn is the sdk.Msg type for allowing an admin account to burn
 * a token.  For now, we only support burning from the sender account.
 *
 * @generated from message injective.tokenfactory.v1beta1.MsgBurn
 */
export class MsgBurn extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBurn().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBurn().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBurn().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBurn, a, b);
    }
}
MsgBurn.runtime = proto3;
MsgBurn.typeName = "injective.tokenfactory.v1beta1.MsgBurn";
MsgBurn.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
]);
/**
 * @generated from message injective.tokenfactory.v1beta1.MsgBurnResponse
 */
export class MsgBurnResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBurnResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBurnResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBurnResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBurnResponse, a, b);
    }
}
MsgBurnResponse.runtime = proto3;
MsgBurnResponse.typeName = "injective.tokenfactory.v1beta1.MsgBurnResponse";
MsgBurnResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgChangeAdmin is the sdk.Msg type for allowing an admin account to reassign
 * adminship of a denom to a new account
 *
 * @generated from message injective.tokenfactory.v1beta1.MsgChangeAdmin
 */
export class MsgChangeAdmin extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string denom = 2;
         */
        this.denom = "";
        /**
         * @generated from field: string new_admin = 3;
         */
        this.newAdmin = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgChangeAdmin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgChangeAdmin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgChangeAdmin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgChangeAdmin, a, b);
    }
}
MsgChangeAdmin.runtime = proto3;
MsgChangeAdmin.typeName = "injective.tokenfactory.v1beta1.MsgChangeAdmin";
MsgChangeAdmin.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * MsgChangeAdminResponse defines the response structure for an executed
 * MsgChangeAdmin message.
 *
 * @generated from message injective.tokenfactory.v1beta1.MsgChangeAdminResponse
 */
export class MsgChangeAdminResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgChangeAdminResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgChangeAdminResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgChangeAdminResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgChangeAdminResponse, a, b);
    }
}
MsgChangeAdminResponse.runtime = proto3;
MsgChangeAdminResponse.typeName = "injective.tokenfactory.v1beta1.MsgChangeAdminResponse";
MsgChangeAdminResponse.fields = proto3.util.newFieldList(() => []);
/**
 * MsgSetDenomMetadata is the sdk.Msg type for allowing an admin account to set
 * the denom's bank metadata
 *
 * @generated from message injective.tokenfactory.v1beta1.MsgSetDenomMetadata
 */
export class MsgSetDenomMetadata extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSetDenomMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSetDenomMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSetDenomMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSetDenomMetadata, a, b);
    }
}
MsgSetDenomMetadata.runtime = proto3;
MsgSetDenomMetadata.typeName = "injective.tokenfactory.v1beta1.MsgSetDenomMetadata";
MsgSetDenomMetadata.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: Metadata },
]);
/**
 * MsgSetDenomMetadataResponse defines the response structure for an executed
 * MsgSetDenomMetadata message.
 *
 * @generated from message injective.tokenfactory.v1beta1.MsgSetDenomMetadataResponse
 */
export class MsgSetDenomMetadataResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSetDenomMetadataResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSetDenomMetadataResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSetDenomMetadataResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSetDenomMetadataResponse, a, b);
    }
}
MsgSetDenomMetadataResponse.runtime = proto3;
MsgSetDenomMetadataResponse.typeName = "injective.tokenfactory.v1beta1.MsgSetDenomMetadataResponse";
MsgSetDenomMetadataResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message injective.tokenfactory.v1beta1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message {
    constructor(data) {
        super();
        /**
         * authority is the address of the governance account.
         *
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateParams, a, b);
    }
}
MsgUpdateParams.runtime = proto3;
MsgUpdateParams.typeName = "injective.tokenfactory.v1beta1.MsgUpdateParams";
MsgUpdateParams.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
]);
/**
 * @generated from message injective.tokenfactory.v1beta1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateParamsResponse, a, b);
    }
}
MsgUpdateParamsResponse.runtime = proto3;
MsgUpdateParamsResponse.typeName = "injective.tokenfactory.v1beta1.MsgUpdateParamsResponse";
MsgUpdateParamsResponse.fields = proto3.util.newFieldList(() => []);
//# sourceMappingURL=tx_pb.js.map