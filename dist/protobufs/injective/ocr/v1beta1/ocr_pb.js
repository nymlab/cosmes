// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/ocr/v1beta1/ocr.proto (package injective.ocr.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * @generated from message injective.ocr.v1beta1.Params
 */
export class Params extends Message {
    constructor(data) {
        super();
        /**
         * Native denom for LINK coin in the bank keeper
         *
         * @generated from field: string link_denom = 1;
         */
        this.linkDenom = "";
        /**
         * The block number interval at which payouts are made
         *
         * @generated from field: uint64 payout_block_interval = 2;
         */
        this.payoutBlockInterval = protoInt64.zero;
        /**
         * The admin for the OCR module
         *
         * @generated from field: string module_admin = 3;
         */
        this.moduleAdmin = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Params().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Params().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Params().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Params, a, b);
    }
}
Params.runtime = proto3;
Params.typeName = "injective.ocr.v1beta1.Params";
Params.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "link_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payout_block_interval", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "module_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.FeedConfig
 */
export class FeedConfig extends Message {
    constructor(data) {
        super();
        /**
         * signers ith element is address ith oracle uses to sign a report
         *
         * @generated from field: repeated string signers = 1;
         */
        this.signers = [];
        /**
         * transmitters ith element is address ith oracle uses to transmit a report
         * via the transmit method
         *
         * @generated from field: repeated string transmitters = 2;
         */
        this.transmitters = [];
        /**
         * f maximum number of faulty/dishonest oracles the protocol can tolerate
         * while still working correctly
         *
         * @generated from field: uint32 f = 3;
         */
        this.f = 0;
        /**
         * onchain_config serialized data with reporting plugin params on chain.
         *
         * @generated from field: bytes onchain_config = 4;
         */
        this.onchainConfig = new Uint8Array(0);
        /**
         * offchain_config_version version of the serialization format used for
         * "offchain_config" parameter
         *
         * @generated from field: uint64 offchain_config_version = 5;
         */
        this.offchainConfigVersion = protoInt64.zero;
        /**
         * offchain_config serialized data used by oracles to configure their offchain
         * operation
         *
         * @generated from field: bytes offchain_config = 6;
         */
        this.offchainConfig = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeedConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeedConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeedConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FeedConfig, a, b);
    }
}
FeedConfig.runtime = proto3;
FeedConfig.typeName = "injective.ocr.v1beta1.FeedConfig";
FeedConfig.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "signers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "transmitters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "f", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "onchain_config", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "offchain_config_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "offchain_config", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "module_params", kind: "message", T: ModuleParams },
]);
/**
 * @generated from message injective.ocr.v1beta1.FeedConfigInfo
 */
export class FeedConfigInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes latest_config_digest = 1;
         */
        this.latestConfigDigest = new Uint8Array(0);
        /**
         * @generated from field: uint32 f = 2;
         */
        this.f = 0;
        /**
         * @generated from field: uint32 n = 3;
         */
        this.n = 0;
        /**
         * config_count ordinal number of this config setting among all config
         * settings
         *
         * @generated from field: uint64 config_count = 4;
         */
        this.configCount = protoInt64.zero;
        /**
         * @generated from field: int64 latest_config_block_number = 5;
         */
        this.latestConfigBlockNumber = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeedConfigInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeedConfigInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeedConfigInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FeedConfigInfo, a, b);
    }
}
FeedConfigInfo.runtime = proto3;
FeedConfigInfo.typeName = "injective.ocr.v1beta1.FeedConfigInfo";
FeedConfigInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "latest_config_digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "f", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "n", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "config_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "latest_config_block_number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.ModuleParams
 */
export class ModuleParams extends Message {
    constructor(data) {
        super();
        /**
         * feed_id is an unique ID for the target of this config
         *
         * @generated from field: string feed_id = 1;
         */
        this.feedId = "";
        /**
         * lowest answer the median of a report is allowed to be
         *
         * @generated from field: string min_answer = 2;
         */
        this.minAnswer = "";
        /**
         * highest answer the median of a report is allowed to be
         *
         * @generated from field: string max_answer = 3;
         */
        this.maxAnswer = "";
        /**
         * Fixed LINK reward for each observer
         *
         * @generated from field: string link_per_observation = 4;
         */
        this.linkPerObservation = "";
        /**
         * Fixed LINK reward for transmitter
         *
         * @generated from field: string link_per_transmission = 5;
         */
        this.linkPerTransmission = "";
        /**
         * Native denom for LINK coin in the bank keeper
         *
         * @generated from field: string link_denom = 6;
         */
        this.linkDenom = "";
        /**
         * Enables unique reports
         *
         * @generated from field: bool unique_reports = 7;
         */
        this.uniqueReports = false;
        /**
         * short human-readable description of observable this feed's answers pertain
         * to
         *
         * @generated from field: string description = 8;
         */
        this.description = "";
        /**
         * feed administrator
         *
         * @generated from field: string feed_admin = 9;
         */
        this.feedAdmin = "";
        /**
         * feed billing administrator
         *
         * @generated from field: string billing_admin = 10;
         */
        this.billingAdmin = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ModuleParams, a, b);
    }
}
ModuleParams.runtime = proto3;
ModuleParams.typeName = "injective.ocr.v1beta1.ModuleParams";
ModuleParams.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "max_answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "link_per_observation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "link_per_transmission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "link_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "unique_reports", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "feed_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "billing_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.ContractConfig
 */
export class ContractConfig extends Message {
    constructor(data) {
        super();
        /**
         * config_count ordinal number of this config setting among all config
         * settings
         *
         * @generated from field: uint64 config_count = 1;
         */
        this.configCount = protoInt64.zero;
        /**
         * signers ith element is address ith oracle uses to sign a report
         *
         * @generated from field: repeated string signers = 2;
         */
        this.signers = [];
        /**
         * transmitters ith element is address ith oracle uses to transmit a report
         * via the transmit method
         *
         * @generated from field: repeated string transmitters = 3;
         */
        this.transmitters = [];
        /**
         * f maximum number of faulty/dishonest oracles the protocol can tolerate
         * while still working correctly
         *
         * @generated from field: uint32 f = 4;
         */
        this.f = 0;
        /**
         * onchain_config serialized data with reporting plugin params on chain.
         *
         * @generated from field: bytes onchain_config = 5;
         */
        this.onchainConfig = new Uint8Array(0);
        /**
         * offchain_config_version version of the serialization format used for
         * "offchain_config" parameter
         *
         * @generated from field: uint64 offchain_config_version = 6;
         */
        this.offchainConfigVersion = protoInt64.zero;
        /**
         * offchain_config serialized data used by oracles to configure their offchain
         * operation
         *
         * @generated from field: bytes offchain_config = 7;
         */
        this.offchainConfig = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ContractConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ContractConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ContractConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ContractConfig, a, b);
    }
}
ContractConfig.runtime = proto3;
ContractConfig.typeName = "injective.ocr.v1beta1.ContractConfig";
ContractConfig.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "config_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "signers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "transmitters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "f", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "onchain_config", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "offchain_config_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "offchain_config", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.SetConfigProposal
 */
export class SetConfigProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetConfigProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetConfigProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetConfigProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetConfigProposal, a, b);
    }
}
SetConfigProposal.runtime = proto3;
SetConfigProposal.typeName = "injective.ocr.v1beta1.SetConfigProposal";
SetConfigProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "config", kind: "message", T: FeedConfig },
]);
/**
 * @generated from message injective.ocr.v1beta1.FeedProperties
 */
export class FeedProperties extends Message {
    constructor(data) {
        super();
        /**
         * feed_id is an unique ID for the target of this config
         *
         * @generated from field: string feed_id = 1;
         */
        this.feedId = "";
        /**
         * f maximum number of faulty/dishonest oracles the protocol can tolerate
         * while still working correctly
         *
         * @generated from field: uint32 f = 2;
         */
        this.f = 0;
        /**
         * onchain_config serialized data with reporting plugin params on chain.
         *
         * @generated from field: bytes onchain_config = 3;
         */
        this.onchainConfig = new Uint8Array(0);
        /**
         * offchain_config_version version of the serialization format used for
         * "offchain_config" parameter
         *
         * @generated from field: uint64 offchain_config_version = 4;
         */
        this.offchainConfigVersion = protoInt64.zero;
        /**
         * offchain_config serialized data used by oracles to configure their offchain
         * operation
         *
         * @generated from field: bytes offchain_config = 5;
         */
        this.offchainConfig = new Uint8Array(0);
        /**
         * lowest answer the median of a report is allowed to be
         *
         * @generated from field: string min_answer = 6;
         */
        this.minAnswer = "";
        /**
         * highest answer the median of a report is allowed to be
         *
         * @generated from field: string max_answer = 7;
         */
        this.maxAnswer = "";
        /**
         * Fixed LINK reward for each observer
         *
         * @generated from field: string link_per_observation = 8;
         */
        this.linkPerObservation = "";
        /**
         * Fixed LINK reward for transmitter
         *
         * @generated from field: string link_per_transmission = 9;
         */
        this.linkPerTransmission = "";
        /**
         * Enables unique reports
         *
         * @generated from field: bool unique_reports = 10;
         */
        this.uniqueReports = false;
        /**
         * short human-readable description of observable this feed's answers pertain
         * to
         *
         * @generated from field: string description = 11;
         */
        this.description = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeedProperties().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeedProperties().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeedProperties().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FeedProperties, a, b);
    }
}
FeedProperties.runtime = proto3;
FeedProperties.typeName = "injective.ocr.v1beta1.FeedProperties";
FeedProperties.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "f", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "onchain_config", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "offchain_config_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "offchain_config", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "min_answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "max_answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "link_per_observation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "link_per_transmission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "unique_reports", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.SetBatchConfigProposal
 */
export class SetBatchConfigProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * signers ith element is address ith oracle uses to sign a report
         *
         * @generated from field: repeated string signers = 3;
         */
        this.signers = [];
        /**
         * transmitters ith element is address ith oracle uses to transmit a report
         * via the transmit method
         *
         * @generated from field: repeated string transmitters = 4;
         */
        this.transmitters = [];
        /**
         * Native denom for LINK coin in the bank keeper
         *
         * @generated from field: string link_denom = 5;
         */
        this.linkDenom = "";
        /**
         * feed properties
         *
         * @generated from field: repeated injective.ocr.v1beta1.FeedProperties feed_properties = 6;
         */
        this.feedProperties = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SetBatchConfigProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SetBatchConfigProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SetBatchConfigProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SetBatchConfigProposal, a, b);
    }
}
SetBatchConfigProposal.runtime = proto3;
SetBatchConfigProposal.typeName = "injective.ocr.v1beta1.SetBatchConfigProposal";
SetBatchConfigProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "signers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "transmitters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "link_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "feed_properties", kind: "message", T: FeedProperties, repeated: true },
]);
/**
 * @generated from message injective.ocr.v1beta1.OracleObservationsCounts
 */
export class OracleObservationsCounts extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated uint32 counts = 1;
         */
        this.counts = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OracleObservationsCounts().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OracleObservationsCounts().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OracleObservationsCounts().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OracleObservationsCounts, a, b);
    }
}
OracleObservationsCounts.runtime = proto3;
OracleObservationsCounts.typeName = "injective.ocr.v1beta1.OracleObservationsCounts";
OracleObservationsCounts.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "counts", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
]);
/**
 * LINK-INJ-denominated reimbursements for gas used by transmitters.
 *
 * @generated from message injective.ocr.v1beta1.GasReimbursements
 */
export class GasReimbursements extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin reimbursements = 1;
         */
        this.reimbursements = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GasReimbursements().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GasReimbursements().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GasReimbursements().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GasReimbursements, a, b);
    }
}
GasReimbursements.runtime = proto3;
GasReimbursements.typeName = "injective.ocr.v1beta1.GasReimbursements";
GasReimbursements.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "reimbursements", kind: "message", T: Coin, repeated: true },
]);
/**
 * @generated from message injective.ocr.v1beta1.Payee
 */
export class Payee extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string transmitter_addr = 1;
         */
        this.transmitterAddr = "";
        /**
         * @generated from field: string payment_addr = 2;
         */
        this.paymentAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Payee().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Payee().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Payee().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Payee, a, b);
    }
}
Payee.runtime = proto3;
Payee.typeName = "injective.ocr.v1beta1.Payee";
Payee.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "transmitter_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payment_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Transmission records the median answer from the transmit transaction at
 * time timestamp
 *
 * @generated from message injective.ocr.v1beta1.Transmission
 */
export class Transmission extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string answer = 1;
         */
        this.answer = "";
        /**
         * when were observations made offchain
         *
         * @generated from field: int64 observations_timestamp = 2;
         */
        this.observationsTimestamp = protoInt64.zero;
        /**
         * when was report received onchain
         *
         * @generated from field: int64 transmission_timestamp = 3;
         */
        this.transmissionTimestamp = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Transmission().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Transmission().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Transmission().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Transmission, a, b);
    }
}
Transmission.runtime = proto3;
Transmission.typeName = "injective.ocr.v1beta1.Transmission";
Transmission.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "observations_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "transmission_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.EpochAndRound
 */
export class EpochAndRound extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 epoch = 1;
         */
        this.epoch = protoInt64.zero;
        /**
         * @generated from field: uint64 round = 2;
         */
        this.round = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EpochAndRound().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EpochAndRound().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EpochAndRound().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EpochAndRound, a, b);
    }
}
EpochAndRound.runtime = proto3;
EpochAndRound.typeName = "injective.ocr.v1beta1.EpochAndRound";
EpochAndRound.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "round", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.Report
 */
export class Report extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 observations_timestamp = 1;
         */
        this.observationsTimestamp = protoInt64.zero;
        /**
         * ith element is the index of the ith observer
         *
         * @generated from field: bytes observers = 2;
         */
        this.observers = new Uint8Array(0);
        /**
         * ith element is the ith observation
         *
         * @generated from field: repeated string observations = 3;
         */
        this.observations = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Report().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Report().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Report().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Report, a, b);
    }
}
Report.runtime = proto3;
Report.typeName = "injective.ocr.v1beta1.Report";
Report.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "observations_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "observers", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "observations", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message injective.ocr.v1beta1.ReportToSign
 */
export class ReportToSign extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes config_digest = 1;
         */
        this.configDigest = new Uint8Array(0);
        /**
         * @generated from field: uint64 epoch = 2;
         */
        this.epoch = protoInt64.zero;
        /**
         * @generated from field: uint64 round = 3;
         */
        this.round = protoInt64.zero;
        /**
         * @generated from field: bytes extra_hash = 4;
         */
        this.extraHash = new Uint8Array(0);
        /**
         * Opaque report
         *
         * @generated from field: bytes report = 5;
         */
        this.report = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ReportToSign().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ReportToSign().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ReportToSign().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ReportToSign, a, b);
    }
}
ReportToSign.runtime = proto3;
ReportToSign.typeName = "injective.ocr.v1beta1.ReportToSign";
ReportToSign.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "config_digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "round", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "extra_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "report", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.EventOraclePaid
 */
export class EventOraclePaid extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string transmitter_addr = 1;
         */
        this.transmitterAddr = "";
        /**
         * @generated from field: string payee_addr = 2;
         */
        this.payeeAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventOraclePaid().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventOraclePaid().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventOraclePaid().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventOraclePaid, a, b);
    }
}
EventOraclePaid.runtime = proto3;
EventOraclePaid.typeName = "injective.ocr.v1beta1.EventOraclePaid";
EventOraclePaid.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "transmitter_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payee_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
]);
/**
 * @generated from message injective.ocr.v1beta1.EventAnswerUpdated
 */
export class EventAnswerUpdated extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string current = 1;
         */
        this.current = "";
        /**
         * @generated from field: string round_id = 2;
         */
        this.roundId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventAnswerUpdated().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventAnswerUpdated().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventAnswerUpdated().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventAnswerUpdated, a, b);
    }
}
EventAnswerUpdated.runtime = proto3;
EventAnswerUpdated.typeName = "injective.ocr.v1beta1.EventAnswerUpdated";
EventAnswerUpdated.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "current", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "round_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "updated_at", kind: "message", T: Timestamp },
]);
/**
 * @generated from message injective.ocr.v1beta1.EventNewRound
 */
export class EventNewRound extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string round_id = 1;
         */
        this.roundId = "";
        /**
         * address of starter
         *
         * @generated from field: string started_by = 2;
         */
        this.startedBy = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventNewRound().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventNewRound().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventNewRound().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventNewRound, a, b);
    }
}
EventNewRound.runtime = proto3;
EventNewRound.typeName = "injective.ocr.v1beta1.EventNewRound";
EventNewRound.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "round_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "started_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "started_at", kind: "message", T: Timestamp },
]);
/**
 * @generated from message injective.ocr.v1beta1.EventTransmitted
 */
export class EventTransmitted extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes config_digest = 1;
         */
        this.configDigest = new Uint8Array(0);
        /**
         * @generated from field: uint64 epoch = 2;
         */
        this.epoch = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventTransmitted().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventTransmitted().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventTransmitted().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventTransmitted, a, b);
    }
}
EventTransmitted.runtime = proto3;
EventTransmitted.typeName = "injective.ocr.v1beta1.EventTransmitted";
EventTransmitted.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "config_digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.EventNewTransmission
 */
export class EventNewTransmission extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string feed_id = 1;
         */
        this.feedId = "";
        /**
         * @generated from field: uint32 aggregator_round_id = 2;
         */
        this.aggregatorRoundId = 0;
        /**
         * @generated from field: string answer = 3;
         */
        this.answer = "";
        /**
         * @generated from field: string transmitter = 4;
         */
        this.transmitter = "";
        /**
         * @generated from field: int64 observations_timestamp = 5;
         */
        this.observationsTimestamp = protoInt64.zero;
        /**
         * @generated from field: repeated string observations = 6;
         */
        this.observations = [];
        /**
         * @generated from field: bytes observers = 7;
         */
        this.observers = new Uint8Array(0);
        /**
         * @generated from field: bytes config_digest = 8;
         */
        this.configDigest = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventNewTransmission().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventNewTransmission().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventNewTransmission().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventNewTransmission, a, b);
    }
}
EventNewTransmission.runtime = proto3;
EventNewTransmission.typeName = "injective.ocr.v1beta1.EventNewTransmission";
EventNewTransmission.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "aggregator_round_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "transmitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "observations_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "observations", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "observers", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "config_digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 9, name: "epoch_and_round", kind: "message", T: EpochAndRound },
]);
/**
 * @generated from message injective.ocr.v1beta1.EventConfigSet
 */
export class EventConfigSet extends Message {
    constructor(data) {
        super();
        /**
         * hash of the config
         *
         * @generated from field: bytes config_digest = 1;
         */
        this.configDigest = new Uint8Array(0);
        /**
         * previous_config_block_number block in which the previous config was set, to
         * simplify historic analysis
         *
         * @generated from field: int64 previous_config_block_number = 2;
         */
        this.previousConfigBlockNumber = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventConfigSet().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventConfigSet().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventConfigSet().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventConfigSet, a, b);
    }
}
EventConfigSet.runtime = proto3;
EventConfigSet.typeName = "injective.ocr.v1beta1.EventConfigSet";
EventConfigSet.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "config_digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "previous_config_block_number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "config", kind: "message", T: FeedConfig },
    { no: 4, name: "config_info", kind: "message", T: FeedConfigInfo },
]);
//# sourceMappingURL=ocr_pb.js.map