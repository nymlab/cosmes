// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/poolmanager/v1beta1/module_route.proto (package dymensionxyz.dymension.poolmanager.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * PoolType is an enumeration of all supported pool types.
 *
 * @generated from enum dymensionxyz.dymension.poolmanager.v1beta1.PoolType
 */
export var PoolType;
(function (PoolType) {
    /**
     * Balancer is the standard xy=k curve. Its pool model is defined in x/gamm.
     *
     * @generated from enum value: Balancer = 0;
     */
    PoolType[PoolType["Balancer"] = 0] = "Balancer";
})(PoolType || (PoolType = {}));
// Retrieve enum metadata with: proto3.getEnumType(PoolType)
proto3.util.setEnumType(PoolType, "dymensionxyz.dymension.poolmanager.v1beta1.PoolType", [
    { no: 0, name: "Balancer" },
]);
/**
 * ModuleRouter defines a route encapsulating pool type.
 * It is used as the value of a mapping from pool id to the pool type,
 * allowing the pool manager to know which module to route swaps to given the
 * pool id.
 *
 * @generated from message dymensionxyz.dymension.poolmanager.v1beta1.ModuleRoute
 */
export class ModuleRoute extends Message {
    constructor(data) {
        super();
        /**
         * pool_type specifies the type of the pool
         *
         * @generated from field: dymensionxyz.dymension.poolmanager.v1beta1.PoolType pool_type = 1;
         */
        this.poolType = PoolType.Balancer;
        /**
         * @generated from field: uint64 pool_id = 2;
         */
        this.poolId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleRoute().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleRoute().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleRoute().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ModuleRoute, a, b);
    }
}
ModuleRoute.runtime = proto3;
ModuleRoute.typeName = "dymensionxyz.dymension.poolmanager.v1beta1.ModuleRoute";
ModuleRoute.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_type", kind: "enum", T: proto3.getEnumType(PoolType) },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
//# sourceMappingURL=module_route_pb.js.map