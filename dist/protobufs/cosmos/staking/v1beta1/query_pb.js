// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/staking/v1beta1/query.proto (package cosmos.staking.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../base/query/v1beta1/pagination_pb.js";
import { DelegationResponse, HistoricalInfo, Params, Pool, RedelegationResponse, UnbondingDelegation, Validator } from "./staking_pb.js";
/**
 * QueryValidatorsRequest is request type for Query/Validators RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorsRequest
 */
export class QueryValidatorsRequest extends Message {
    constructor(data) {
        super();
        /**
         * status enables to query for validators matching a given status.
         *
         * @generated from field: string status = 1;
         */
        this.status = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValidatorsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValidatorsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValidatorsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValidatorsRequest, a, b);
    }
}
QueryValidatorsRequest.runtime = proto3;
QueryValidatorsRequest.typeName = "cosmos.staking.v1beta1.QueryValidatorsRequest";
QueryValidatorsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryValidatorsResponse is response type for the Query/Validators RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorsResponse
 */
export class QueryValidatorsResponse extends Message {
    constructor(data) {
        super();
        /**
         * validators contains all the queried validators.
         *
         * @generated from field: repeated cosmos.staking.v1beta1.Validator validators = 1;
         */
        this.validators = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValidatorsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValidatorsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValidatorsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValidatorsResponse, a, b);
    }
}
QueryValidatorsResponse.runtime = proto3;
QueryValidatorsResponse.typeName = "cosmos.staking.v1beta1.QueryValidatorsResponse";
QueryValidatorsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validators", kind: "message", T: Validator, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryValidatorRequest is response type for the Query/Validator RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorRequest
 */
export class QueryValidatorRequest extends Message {
    constructor(data) {
        super();
        /**
         * validator_addr defines the validator address to query for.
         *
         * @generated from field: string validator_addr = 1;
         */
        this.validatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValidatorRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValidatorRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValidatorRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValidatorRequest, a, b);
    }
}
QueryValidatorRequest.runtime = proto3;
QueryValidatorRequest.typeName = "cosmos.staking.v1beta1.QueryValidatorRequest";
QueryValidatorRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryValidatorResponse is response type for the Query/Validator RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorResponse
 */
export class QueryValidatorResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValidatorResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValidatorResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValidatorResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValidatorResponse, a, b);
    }
}
QueryValidatorResponse.runtime = proto3;
QueryValidatorResponse.typeName = "cosmos.staking.v1beta1.QueryValidatorResponse";
QueryValidatorResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "message", T: Validator },
]);
/**
 * QueryValidatorDelegationsRequest is request type for the
 * Query/ValidatorDelegations RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorDelegationsRequest
 */
export class QueryValidatorDelegationsRequest extends Message {
    constructor(data) {
        super();
        /**
         * validator_addr defines the validator address to query for.
         *
         * @generated from field: string validator_addr = 1;
         */
        this.validatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValidatorDelegationsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValidatorDelegationsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValidatorDelegationsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValidatorDelegationsRequest, a, b);
    }
}
QueryValidatorDelegationsRequest.runtime = proto3;
QueryValidatorDelegationsRequest.typeName = "cosmos.staking.v1beta1.QueryValidatorDelegationsRequest";
QueryValidatorDelegationsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryValidatorDelegationsResponse is response type for the
 * Query/ValidatorDelegations RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorDelegationsResponse
 */
export class QueryValidatorDelegationsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.staking.v1beta1.DelegationResponse delegation_responses = 1;
         */
        this.delegationResponses = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValidatorDelegationsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValidatorDelegationsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValidatorDelegationsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValidatorDelegationsResponse, a, b);
    }
}
QueryValidatorDelegationsResponse.runtime = proto3;
QueryValidatorDelegationsResponse.typeName = "cosmos.staking.v1beta1.QueryValidatorDelegationsResponse";
QueryValidatorDelegationsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation_responses", kind: "message", T: DelegationResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryValidatorUnbondingDelegationsRequest is required type for the
 * Query/ValidatorUnbondingDelegations RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest
 */
export class QueryValidatorUnbondingDelegationsRequest extends Message {
    constructor(data) {
        super();
        /**
         * validator_addr defines the validator address to query for.
         *
         * @generated from field: string validator_addr = 1;
         */
        this.validatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValidatorUnbondingDelegationsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValidatorUnbondingDelegationsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValidatorUnbondingDelegationsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValidatorUnbondingDelegationsRequest, a, b);
    }
}
QueryValidatorUnbondingDelegationsRequest.runtime = proto3;
QueryValidatorUnbondingDelegationsRequest.typeName = "cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest";
QueryValidatorUnbondingDelegationsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryValidatorUnbondingDelegationsResponse is response type for the
 * Query/ValidatorUnbondingDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse
 */
export class QueryValidatorUnbondingDelegationsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_responses = 1;
         */
        this.unbondingResponses = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValidatorUnbondingDelegationsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValidatorUnbondingDelegationsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValidatorUnbondingDelegationsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValidatorUnbondingDelegationsResponse, a, b);
    }
}
QueryValidatorUnbondingDelegationsResponse.runtime = proto3;
QueryValidatorUnbondingDelegationsResponse.typeName = "cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse";
QueryValidatorUnbondingDelegationsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_responses", kind: "message", T: UnbondingDelegation, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryDelegationRequest is request type for the Query/Delegation RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegationRequest
 */
export class QueryDelegationRequest extends Message {
    constructor(data) {
        super();
        /**
         * delegator_addr defines the delegator address to query for.
         *
         * @generated from field: string delegator_addr = 1;
         */
        this.delegatorAddr = "";
        /**
         * validator_addr defines the validator address to query for.
         *
         * @generated from field: string validator_addr = 2;
         */
        this.validatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegationRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegationRequest, a, b);
    }
}
QueryDelegationRequest.runtime = proto3;
QueryDelegationRequest.typeName = "cosmos.staking.v1beta1.QueryDelegationRequest";
QueryDelegationRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryDelegationResponse is response type for the Query/Delegation RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegationResponse
 */
export class QueryDelegationResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegationResponse, a, b);
    }
}
QueryDelegationResponse.runtime = proto3;
QueryDelegationResponse.typeName = "cosmos.staking.v1beta1.QueryDelegationResponse";
QueryDelegationResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation_response", kind: "message", T: DelegationResponse },
]);
/**
 * QueryUnbondingDelegationRequest is request type for the
 * Query/UnbondingDelegation RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryUnbondingDelegationRequest
 */
export class QueryUnbondingDelegationRequest extends Message {
    constructor(data) {
        super();
        /**
         * delegator_addr defines the delegator address to query for.
         *
         * @generated from field: string delegator_addr = 1;
         */
        this.delegatorAddr = "";
        /**
         * validator_addr defines the validator address to query for.
         *
         * @generated from field: string validator_addr = 2;
         */
        this.validatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUnbondingDelegationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUnbondingDelegationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUnbondingDelegationRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUnbondingDelegationRequest, a, b);
    }
}
QueryUnbondingDelegationRequest.runtime = proto3;
QueryUnbondingDelegationRequest.typeName = "cosmos.staking.v1beta1.QueryUnbondingDelegationRequest";
QueryUnbondingDelegationRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryDelegationResponse is response type for the Query/UnbondingDelegation
 * RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryUnbondingDelegationResponse
 */
export class QueryUnbondingDelegationResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUnbondingDelegationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUnbondingDelegationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUnbondingDelegationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUnbondingDelegationResponse, a, b);
    }
}
QueryUnbondingDelegationResponse.runtime = proto3;
QueryUnbondingDelegationResponse.typeName = "cosmos.staking.v1beta1.QueryUnbondingDelegationResponse";
QueryUnbondingDelegationResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "unbond", kind: "message", T: UnbondingDelegation },
]);
/**
 * QueryDelegatorDelegationsRequest is request type for the
 * Query/DelegatorDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest
 */
export class QueryDelegatorDelegationsRequest extends Message {
    constructor(data) {
        super();
        /**
         * delegator_addr defines the delegator address to query for.
         *
         * @generated from field: string delegator_addr = 1;
         */
        this.delegatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegatorDelegationsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegatorDelegationsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegatorDelegationsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegatorDelegationsRequest, a, b);
    }
}
QueryDelegatorDelegationsRequest.runtime = proto3;
QueryDelegatorDelegationsRequest.typeName = "cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest";
QueryDelegatorDelegationsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryDelegatorDelegationsResponse is response type for the
 * Query/DelegatorDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse
 */
export class QueryDelegatorDelegationsResponse extends Message {
    constructor(data) {
        super();
        /**
         * delegation_responses defines all the delegations' info of a delegator.
         *
         * @generated from field: repeated cosmos.staking.v1beta1.DelegationResponse delegation_responses = 1;
         */
        this.delegationResponses = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegatorDelegationsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegatorDelegationsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegatorDelegationsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegatorDelegationsResponse, a, b);
    }
}
QueryDelegatorDelegationsResponse.runtime = proto3;
QueryDelegatorDelegationsResponse.typeName = "cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse";
QueryDelegatorDelegationsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation_responses", kind: "message", T: DelegationResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryDelegatorUnbondingDelegationsRequest is request type for the
 * Query/DelegatorUnbondingDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest
 */
export class QueryDelegatorUnbondingDelegationsRequest extends Message {
    constructor(data) {
        super();
        /**
         * delegator_addr defines the delegator address to query for.
         *
         * @generated from field: string delegator_addr = 1;
         */
        this.delegatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegatorUnbondingDelegationsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegatorUnbondingDelegationsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegatorUnbondingDelegationsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegatorUnbondingDelegationsRequest, a, b);
    }
}
QueryDelegatorUnbondingDelegationsRequest.runtime = proto3;
QueryDelegatorUnbondingDelegationsRequest.typeName = "cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest";
QueryDelegatorUnbondingDelegationsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryUnbondingDelegatorDelegationsResponse is response type for the
 * Query/UnbondingDelegatorDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse
 */
export class QueryDelegatorUnbondingDelegationsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_responses = 1;
         */
        this.unbondingResponses = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegatorUnbondingDelegationsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegatorUnbondingDelegationsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegatorUnbondingDelegationsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegatorUnbondingDelegationsResponse, a, b);
    }
}
QueryDelegatorUnbondingDelegationsResponse.runtime = proto3;
QueryDelegatorUnbondingDelegationsResponse.typeName = "cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse";
QueryDelegatorUnbondingDelegationsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_responses", kind: "message", T: UnbondingDelegation, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryRedelegationsRequest is request type for the Query/Redelegations RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryRedelegationsRequest
 */
export class QueryRedelegationsRequest extends Message {
    constructor(data) {
        super();
        /**
         * delegator_addr defines the delegator address to query for.
         *
         * @generated from field: string delegator_addr = 1;
         */
        this.delegatorAddr = "";
        /**
         * src_validator_addr defines the validator address to redelegate from.
         *
         * @generated from field: string src_validator_addr = 2;
         */
        this.srcValidatorAddr = "";
        /**
         * dst_validator_addr defines the validator address to redelegate to.
         *
         * @generated from field: string dst_validator_addr = 3;
         */
        this.dstValidatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryRedelegationsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryRedelegationsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryRedelegationsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryRedelegationsRequest, a, b);
    }
}
QueryRedelegationsRequest.runtime = proto3;
QueryRedelegationsRequest.typeName = "cosmos.staking.v1beta1.QueryRedelegationsRequest";
QueryRedelegationsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "src_validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dst_validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryRedelegationsResponse is response type for the Query/Redelegations RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryRedelegationsResponse
 */
export class QueryRedelegationsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.staking.v1beta1.RedelegationResponse redelegation_responses = 1;
         */
        this.redelegationResponses = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryRedelegationsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryRedelegationsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryRedelegationsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryRedelegationsResponse, a, b);
    }
}
QueryRedelegationsResponse.runtime = proto3;
QueryRedelegationsResponse.typeName = "cosmos.staking.v1beta1.QueryRedelegationsResponse";
QueryRedelegationsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "redelegation_responses", kind: "message", T: RedelegationResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryDelegatorValidatorsRequest is request type for the
 * Query/DelegatorValidators RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest
 */
export class QueryDelegatorValidatorsRequest extends Message {
    constructor(data) {
        super();
        /**
         * delegator_addr defines the delegator address to query for.
         *
         * @generated from field: string delegator_addr = 1;
         */
        this.delegatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegatorValidatorsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegatorValidatorsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegatorValidatorsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegatorValidatorsRequest, a, b);
    }
}
QueryDelegatorValidatorsRequest.runtime = proto3;
QueryDelegatorValidatorsRequest.typeName = "cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest";
QueryDelegatorValidatorsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryDelegatorValidatorsResponse is response type for the
 * Query/DelegatorValidators RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse
 */
export class QueryDelegatorValidatorsResponse extends Message {
    constructor(data) {
        super();
        /**
         * validators defines the validators' info of a delegator.
         *
         * @generated from field: repeated cosmos.staking.v1beta1.Validator validators = 1;
         */
        this.validators = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegatorValidatorsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegatorValidatorsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegatorValidatorsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegatorValidatorsResponse, a, b);
    }
}
QueryDelegatorValidatorsResponse.runtime = proto3;
QueryDelegatorValidatorsResponse.typeName = "cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse";
QueryDelegatorValidatorsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validators", kind: "message", T: Validator, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryDelegatorValidatorRequest is request type for the
 * Query/DelegatorValidator RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorRequest
 */
export class QueryDelegatorValidatorRequest extends Message {
    constructor(data) {
        super();
        /**
         * delegator_addr defines the delegator address to query for.
         *
         * @generated from field: string delegator_addr = 1;
         */
        this.delegatorAddr = "";
        /**
         * validator_addr defines the validator address to query for.
         *
         * @generated from field: string validator_addr = 2;
         */
        this.validatorAddr = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegatorValidatorRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegatorValidatorRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegatorValidatorRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegatorValidatorRequest, a, b);
    }
}
QueryDelegatorValidatorRequest.runtime = proto3;
QueryDelegatorValidatorRequest.typeName = "cosmos.staking.v1beta1.QueryDelegatorValidatorRequest";
QueryDelegatorValidatorRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryDelegatorValidatorResponse response type for the
 * Query/DelegatorValidator RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorResponse
 */
export class QueryDelegatorValidatorResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegatorValidatorResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegatorValidatorResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegatorValidatorResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegatorValidatorResponse, a, b);
    }
}
QueryDelegatorValidatorResponse.runtime = proto3;
QueryDelegatorValidatorResponse.typeName = "cosmos.staking.v1beta1.QueryDelegatorValidatorResponse";
QueryDelegatorValidatorResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "message", T: Validator },
]);
/**
 * QueryHistoricalInfoRequest is request type for the Query/HistoricalInfo RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryHistoricalInfoRequest
 */
export class QueryHistoricalInfoRequest extends Message {
    constructor(data) {
        super();
        /**
         * height defines at which height to query the historical info.
         *
         * @generated from field: int64 height = 1;
         */
        this.height = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryHistoricalInfoRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryHistoricalInfoRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryHistoricalInfoRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryHistoricalInfoRequest, a, b);
    }
}
QueryHistoricalInfoRequest.runtime = proto3;
QueryHistoricalInfoRequest.typeName = "cosmos.staking.v1beta1.QueryHistoricalInfoRequest";
QueryHistoricalInfoRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryHistoricalInfoResponse
 */
export class QueryHistoricalInfoResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryHistoricalInfoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryHistoricalInfoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryHistoricalInfoResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryHistoricalInfoResponse, a, b);
    }
}
QueryHistoricalInfoResponse.runtime = proto3;
QueryHistoricalInfoResponse.typeName = "cosmos.staking.v1beta1.QueryHistoricalInfoResponse";
QueryHistoricalInfoResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "hist", kind: "message", T: HistoricalInfo },
]);
/**
 * QueryPoolRequest is request type for the Query/Pool RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryPoolRequest
 */
export class QueryPoolRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPoolRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPoolRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPoolRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPoolRequest, a, b);
    }
}
QueryPoolRequest.runtime = proto3;
QueryPoolRequest.typeName = "cosmos.staking.v1beta1.QueryPoolRequest";
QueryPoolRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryPoolResponse is response type for the Query/Pool RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryPoolResponse
 */
export class QueryPoolResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPoolResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPoolResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPoolResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPoolResponse, a, b);
    }
}
QueryPoolResponse.runtime = proto3;
QueryPoolResponse.typeName = "cosmos.staking.v1beta1.QueryPoolResponse";
QueryPoolResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool },
]);
/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "cosmos.staking.v1beta1.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "cosmos.staking.v1beta1.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
//# sourceMappingURL=query_pb.js.map