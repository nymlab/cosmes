// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/auth/v1beta1/query.proto (package cosmos.auth.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../base/query/v1beta1/pagination_pb.js";
import { BaseAccount, Params } from "./auth_pb.js";
/**
 * QueryAccountsRequest is the request type for the Query/Accounts RPC method.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountsRequest
 */
export class QueryAccountsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAccountsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAccountsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAccountsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAccountsRequest, a, b);
    }
}
QueryAccountsRequest.runtime = proto3;
QueryAccountsRequest.typeName = "cosmos.auth.v1beta1.QueryAccountsRequest";
QueryAccountsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryAccountsResponse is the response type for the Query/Accounts RPC method.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountsResponse
 */
export class QueryAccountsResponse extends Message {
    constructor(data) {
        super();
        /**
         * accounts are the existing accounts
         *
         * @generated from field: repeated google.protobuf.Any accounts = 1;
         */
        this.accounts = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAccountsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAccountsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAccountsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAccountsResponse, a, b);
    }
}
QueryAccountsResponse.runtime = proto3;
QueryAccountsResponse.typeName = "cosmos.auth.v1beta1.QueryAccountsResponse";
QueryAccountsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: Any, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryAccountRequest is the request type for the Query/Account RPC method.
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountRequest
 */
export class QueryAccountRequest extends Message {
    constructor(data) {
        super();
        /**
         * address defines the address to query for.
         *
         * @generated from field: string address = 1;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAccountRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAccountRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAccountRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAccountRequest, a, b);
    }
}
QueryAccountRequest.runtime = proto3;
QueryAccountRequest.typeName = "cosmos.auth.v1beta1.QueryAccountRequest";
QueryAccountRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryAccountResponse is the response type for the Query/Account RPC method.
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountResponse
 */
export class QueryAccountResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAccountResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAccountResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAccountResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAccountResponse, a, b);
    }
}
QueryAccountResponse.runtime = proto3;
QueryAccountResponse.typeName = "cosmos.auth.v1beta1.QueryAccountResponse";
QueryAccountResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: Any },
]);
/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message cosmos.auth.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "cosmos.auth.v1beta1.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message cosmos.auth.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "cosmos.auth.v1beta1.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * QueryModuleAccountsRequest is the request type for the Query/ModuleAccounts RPC method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.QueryModuleAccountsRequest
 */
export class QueryModuleAccountsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleAccountsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleAccountsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleAccountsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleAccountsRequest, a, b);
    }
}
QueryModuleAccountsRequest.runtime = proto3;
QueryModuleAccountsRequest.typeName = "cosmos.auth.v1beta1.QueryModuleAccountsRequest";
QueryModuleAccountsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryModuleAccountsResponse is the response type for the Query/ModuleAccounts RPC method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.QueryModuleAccountsResponse
 */
export class QueryModuleAccountsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.Any accounts = 1;
         */
        this.accounts = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleAccountsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleAccountsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleAccountsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleAccountsResponse, a, b);
    }
}
QueryModuleAccountsResponse.runtime = proto3;
QueryModuleAccountsResponse.typeName = "cosmos.auth.v1beta1.QueryModuleAccountsResponse";
QueryModuleAccountsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: Any, repeated: true },
]);
/**
 * QueryModuleAccountByNameRequest is the request type for the Query/ModuleAccountByName RPC method.
 *
 * @generated from message cosmos.auth.v1beta1.QueryModuleAccountByNameRequest
 */
export class QueryModuleAccountByNameRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleAccountByNameRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleAccountByNameRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleAccountByNameRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleAccountByNameRequest, a, b);
    }
}
QueryModuleAccountByNameRequest.runtime = proto3;
QueryModuleAccountByNameRequest.typeName = "cosmos.auth.v1beta1.QueryModuleAccountByNameRequest";
QueryModuleAccountByNameRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryModuleAccountByNameResponse is the response type for the Query/ModuleAccountByName RPC method.
 *
 * @generated from message cosmos.auth.v1beta1.QueryModuleAccountByNameResponse
 */
export class QueryModuleAccountByNameResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleAccountByNameResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleAccountByNameResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleAccountByNameResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleAccountByNameResponse, a, b);
    }
}
QueryModuleAccountByNameResponse.runtime = proto3;
QueryModuleAccountByNameResponse.typeName = "cosmos.auth.v1beta1.QueryModuleAccountByNameResponse";
QueryModuleAccountByNameResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: Any },
]);
/**
 * Bech32PrefixRequest is the request type for Bech32Prefix rpc method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.Bech32PrefixRequest
 */
export class Bech32PrefixRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Bech32PrefixRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Bech32PrefixRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Bech32PrefixRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Bech32PrefixRequest, a, b);
    }
}
Bech32PrefixRequest.runtime = proto3;
Bech32PrefixRequest.typeName = "cosmos.auth.v1beta1.Bech32PrefixRequest";
Bech32PrefixRequest.fields = proto3.util.newFieldList(() => []);
/**
 * Bech32PrefixResponse is the response type for Bech32Prefix rpc method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.Bech32PrefixResponse
 */
export class Bech32PrefixResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bech32_prefix = 1;
         */
        this.bech32Prefix = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Bech32PrefixResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Bech32PrefixResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Bech32PrefixResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Bech32PrefixResponse, a, b);
    }
}
Bech32PrefixResponse.runtime = proto3;
Bech32PrefixResponse.typeName = "cosmos.auth.v1beta1.Bech32PrefixResponse";
Bech32PrefixResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "bech32_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * AddressBytesToStringRequest is the request type for AddressString rpc method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.AddressBytesToStringRequest
 */
export class AddressBytesToStringRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes address_bytes = 1;
         */
        this.addressBytes = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AddressBytesToStringRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AddressBytesToStringRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AddressBytesToStringRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AddressBytesToStringRequest, a, b);
    }
}
AddressBytesToStringRequest.runtime = proto3;
AddressBytesToStringRequest.typeName = "cosmos.auth.v1beta1.AddressBytesToStringRequest";
AddressBytesToStringRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * AddressBytesToStringResponse is the response type for AddressString rpc method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.AddressBytesToStringResponse
 */
export class AddressBytesToStringResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string address_string = 1;
         */
        this.addressString = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AddressBytesToStringResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AddressBytesToStringResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AddressBytesToStringResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AddressBytesToStringResponse, a, b);
    }
}
AddressBytesToStringResponse.runtime = proto3;
AddressBytesToStringResponse.typeName = "cosmos.auth.v1beta1.AddressBytesToStringResponse";
AddressBytesToStringResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * AddressStringToBytesRequest is the request type for AccountBytes rpc method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.AddressStringToBytesRequest
 */
export class AddressStringToBytesRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string address_string = 1;
         */
        this.addressString = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AddressStringToBytesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AddressStringToBytesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AddressStringToBytesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AddressStringToBytesRequest, a, b);
    }
}
AddressStringToBytesRequest.runtime = proto3;
AddressStringToBytesRequest.typeName = "cosmos.auth.v1beta1.AddressStringToBytesRequest";
AddressStringToBytesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * AddressStringToBytesResponse is the response type for AddressBytes rpc method.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.auth.v1beta1.AddressStringToBytesResponse
 */
export class AddressStringToBytesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes address_bytes = 1;
         */
        this.addressBytes = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AddressStringToBytesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AddressStringToBytesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AddressStringToBytesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AddressStringToBytesResponse, a, b);
    }
}
AddressStringToBytesResponse.runtime = proto3;
AddressStringToBytesResponse.typeName = "cosmos.auth.v1beta1.AddressStringToBytesResponse";
AddressStringToBytesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * QueryAccountAddressByIDRequest is the request type for AccountAddressByID rpc method
 *
 * Since: cosmos-sdk 0.46.2
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountAddressByIDRequest
 */
export class QueryAccountAddressByIDRequest extends Message {
    constructor(data) {
        super();
        /**
         * Deprecated, use account_id instead
         *
         * id is the account number of the address to be queried. This field
         * should have been an uint64 (like all account numbers), and will be
         * updated to uint64 in a future version of the auth query.
         *
         * @generated from field: int64 id = 1 [deprecated = true];
         * @deprecated
         */
        this.id = protoInt64.zero;
        /**
         * account_id is the account number of the address to be queried.
         *
         * Since: cosmos-sdk 0.47
         *
         * @generated from field: uint64 account_id = 2;
         */
        this.accountId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAccountAddressByIDRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAccountAddressByIDRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAccountAddressByIDRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAccountAddressByIDRequest, a, b);
    }
}
QueryAccountAddressByIDRequest.runtime = proto3;
QueryAccountAddressByIDRequest.typeName = "cosmos.auth.v1beta1.QueryAccountAddressByIDRequest";
QueryAccountAddressByIDRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "account_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryAccountAddressByIDResponse is the response type for AccountAddressByID rpc method
 *
 * Since: cosmos-sdk 0.46.2
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountAddressByIDResponse
 */
export class QueryAccountAddressByIDResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string account_address = 1;
         */
        this.accountAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAccountAddressByIDResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAccountAddressByIDResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAccountAddressByIDResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAccountAddressByIDResponse, a, b);
    }
}
QueryAccountAddressByIDResponse.runtime = proto3;
QueryAccountAddressByIDResponse.typeName = "cosmos.auth.v1beta1.QueryAccountAddressByIDResponse";
QueryAccountAddressByIDResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "account_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryAccountInfoRequest is the Query/AccountInfo request type.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountInfoRequest
 */
export class QueryAccountInfoRequest extends Message {
    constructor(data) {
        super();
        /**
         * address is the account address string.
         *
         * @generated from field: string address = 1;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAccountInfoRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAccountInfoRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAccountInfoRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAccountInfoRequest, a, b);
    }
}
QueryAccountInfoRequest.runtime = proto3;
QueryAccountInfoRequest.typeName = "cosmos.auth.v1beta1.QueryAccountInfoRequest";
QueryAccountInfoRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryAccountInfoResponse is the Query/AccountInfo response type.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.auth.v1beta1.QueryAccountInfoResponse
 */
export class QueryAccountInfoResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAccountInfoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAccountInfoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAccountInfoResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAccountInfoResponse, a, b);
    }
}
QueryAccountInfoResponse.runtime = proto3;
QueryAccountInfoResponse.typeName = "cosmos.auth.v1beta1.QueryAccountInfoResponse";
QueryAccountInfoResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: BaseAccount },
]);
//# sourceMappingURL=query_pb.js.map