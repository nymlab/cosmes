// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/concentratedliquidity/v1beta1/position.proto (package osmosis.concentratedliquidity.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { PeriodLock } from "../../lockup/lock_pb.js";
/**
 * Position contains position's id, address, pool id, lower tick, upper tick
 * join time, and liquidity.
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.Position
 */
export class Position extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 position_id = 1;
         */
        this.positionId = protoInt64.zero;
        /**
         * @generated from field: string address = 2;
         */
        this.address = "";
        /**
         * @generated from field: uint64 pool_id = 3;
         */
        this.poolId = protoInt64.zero;
        /**
         * @generated from field: int64 lower_tick = 4;
         */
        this.lowerTick = protoInt64.zero;
        /**
         * @generated from field: int64 upper_tick = 5;
         */
        this.upperTick = protoInt64.zero;
        /**
         * @generated from field: string liquidity = 7;
         */
        this.liquidity = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Position().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Position().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Position().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Position, a, b);
    }
}
Position.runtime = proto3;
Position.typeName = "osmosis.concentratedliquidity.v1beta1.Position";
Position.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "lower_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "upper_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "join_time", kind: "message", T: Timestamp },
    { no: 7, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * FullPositionBreakdown returns:
 * - the position itself
 * - the amount the position translates in terms of asset0 and asset1
 * - the amount of claimable fees
 * - the amount of claimable incentives
 * - the amount of incentives that would be forfeited if the position was closed
 * now
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.FullPositionBreakdown
 */
export class FullPositionBreakdown extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin claimable_spread_rewards = 4;
         */
        this.claimableSpreadRewards = [];
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin claimable_incentives = 5;
         */
        this.claimableIncentives = [];
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin forfeited_incentives = 6;
         */
        this.forfeitedIncentives = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FullPositionBreakdown().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FullPositionBreakdown().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FullPositionBreakdown().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FullPositionBreakdown, a, b);
    }
}
FullPositionBreakdown.runtime = proto3;
FullPositionBreakdown.typeName = "osmosis.concentratedliquidity.v1beta1.FullPositionBreakdown";
FullPositionBreakdown.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "message", T: Position },
    { no: 2, name: "asset0", kind: "message", T: Coin },
    { no: 3, name: "asset1", kind: "message", T: Coin },
    { no: 4, name: "claimable_spread_rewards", kind: "message", T: Coin, repeated: true },
    { no: 5, name: "claimable_incentives", kind: "message", T: Coin, repeated: true },
    { no: 6, name: "forfeited_incentives", kind: "message", T: Coin, repeated: true },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.PositionWithPeriodLock
 */
export class PositionWithPeriodLock extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PositionWithPeriodLock().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PositionWithPeriodLock().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PositionWithPeriodLock().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PositionWithPeriodLock, a, b);
    }
}
PositionWithPeriodLock.runtime = proto3;
PositionWithPeriodLock.typeName = "osmosis.concentratedliquidity.v1beta1.PositionWithPeriodLock";
PositionWithPeriodLock.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "message", T: Position },
    { no: 2, name: "locks", kind: "message", T: PeriodLock },
]);
//# sourceMappingURL=position_pb.js.map