// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/core/connection/v1/query.proto (package ibc.core.connection.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ConnectionEnd, IdentifiedConnection, Params } from "./connection_pb.js";
import { Height, IdentifiedClientState } from "../../client/v1/client_pb.js";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination_pb.js";
/**
 * QueryConnectionRequest is the request type for the Query/Connection RPC
 * method
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionRequest
 */
export class QueryConnectionRequest extends Message {
    constructor(data) {
        super();
        /**
         * connection unique identifier
         *
         * @generated from field: string connection_id = 1;
         */
        this.connectionId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConnectionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConnectionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConnectionRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConnectionRequest, a, b);
    }
}
QueryConnectionRequest.runtime = proto3;
QueryConnectionRequest.typeName = "ibc.core.connection.v1.QueryConnectionRequest";
QueryConnectionRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryConnectionResponse is the response type for the Query/Connection RPC
 * method. Besides the connection end, it includes a proof and the height from
 * which the proof was retrieved.
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionResponse
 */
export class QueryConnectionResponse extends Message {
    constructor(data) {
        super();
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConnectionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConnectionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConnectionResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConnectionResponse, a, b);
    }
}
QueryConnectionResponse.runtime = proto3;
QueryConnectionResponse.typeName = "ibc.core.connection.v1.QueryConnectionResponse";
QueryConnectionResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "connection", kind: "message", T: ConnectionEnd },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryConnectionsRequest is the request type for the Query/Connections RPC
 * method
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionsRequest
 */
export class QueryConnectionsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConnectionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConnectionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConnectionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConnectionsRequest, a, b);
    }
}
QueryConnectionsRequest.runtime = proto3;
QueryConnectionsRequest.typeName = "ibc.core.connection.v1.QueryConnectionsRequest";
QueryConnectionsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryConnectionsResponse is the response type for the Query/Connections RPC
 * method.
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionsResponse
 */
export class QueryConnectionsResponse extends Message {
    constructor(data) {
        super();
        /**
         * list of stored connections of the chain.
         *
         * @generated from field: repeated ibc.core.connection.v1.IdentifiedConnection connections = 1;
         */
        this.connections = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConnectionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConnectionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConnectionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConnectionsResponse, a, b);
    }
}
QueryConnectionsResponse.runtime = proto3;
QueryConnectionsResponse.typeName = "ibc.core.connection.v1.QueryConnectionsResponse";
QueryConnectionsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "connections", kind: "message", T: IdentifiedConnection, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
    { no: 3, name: "height", kind: "message", T: Height },
]);
/**
 * QueryClientConnectionsRequest is the request type for the
 * Query/ClientConnections RPC method
 *
 * @generated from message ibc.core.connection.v1.QueryClientConnectionsRequest
 */
export class QueryClientConnectionsRequest extends Message {
    constructor(data) {
        super();
        /**
         * client identifier associated with a connection
         *
         * @generated from field: string client_id = 1;
         */
        this.clientId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClientConnectionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClientConnectionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClientConnectionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryClientConnectionsRequest, a, b);
    }
}
QueryClientConnectionsRequest.runtime = proto3;
QueryClientConnectionsRequest.typeName = "ibc.core.connection.v1.QueryClientConnectionsRequest";
QueryClientConnectionsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryClientConnectionsResponse is the response type for the
 * Query/ClientConnections RPC method
 *
 * @generated from message ibc.core.connection.v1.QueryClientConnectionsResponse
 */
export class QueryClientConnectionsResponse extends Message {
    constructor(data) {
        super();
        /**
         * slice of all the connection paths associated with a client.
         *
         * @generated from field: repeated string connection_paths = 1;
         */
        this.connectionPaths = [];
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClientConnectionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClientConnectionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClientConnectionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryClientConnectionsResponse, a, b);
    }
}
QueryClientConnectionsResponse.runtime = proto3;
QueryClientConnectionsResponse.typeName = "ibc.core.connection.v1.QueryClientConnectionsResponse";
QueryClientConnectionsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryConnectionClientStateRequest is the request type for the
 * Query/ConnectionClientState RPC method
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionClientStateRequest
 */
export class QueryConnectionClientStateRequest extends Message {
    constructor(data) {
        super();
        /**
         * connection identifier
         *
         * @generated from field: string connection_id = 1;
         */
        this.connectionId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConnectionClientStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConnectionClientStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConnectionClientStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConnectionClientStateRequest, a, b);
    }
}
QueryConnectionClientStateRequest.runtime = proto3;
QueryConnectionClientStateRequest.typeName = "ibc.core.connection.v1.QueryConnectionClientStateRequest";
QueryConnectionClientStateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryConnectionClientStateResponse is the response type for the
 * Query/ConnectionClientState RPC method
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionClientStateResponse
 */
export class QueryConnectionClientStateResponse extends Message {
    constructor(data) {
        super();
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConnectionClientStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConnectionClientStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConnectionClientStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConnectionClientStateResponse, a, b);
    }
}
QueryConnectionClientStateResponse.runtime = proto3;
QueryConnectionClientStateResponse.typeName = "ibc.core.connection.v1.QueryConnectionClientStateResponse";
QueryConnectionClientStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "identified_client_state", kind: "message", T: IdentifiedClientState },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryConnectionConsensusStateRequest is the request type for the
 * Query/ConnectionConsensusState RPC method
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionConsensusStateRequest
 */
export class QueryConnectionConsensusStateRequest extends Message {
    constructor(data) {
        super();
        /**
         * connection identifier
         *
         * @generated from field: string connection_id = 1;
         */
        this.connectionId = "";
        /**
         * @generated from field: uint64 revision_number = 2;
         */
        this.revisionNumber = protoInt64.zero;
        /**
         * @generated from field: uint64 revision_height = 3;
         */
        this.revisionHeight = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConnectionConsensusStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConnectionConsensusStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConnectionConsensusStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConnectionConsensusStateRequest, a, b);
    }
}
QueryConnectionConsensusStateRequest.runtime = proto3;
QueryConnectionConsensusStateRequest.typeName = "ibc.core.connection.v1.QueryConnectionConsensusStateRequest";
QueryConnectionConsensusStateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "revision_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "revision_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryConnectionConsensusStateResponse is the response type for the
 * Query/ConnectionConsensusState RPC method
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionConsensusStateResponse
 */
export class QueryConnectionConsensusStateResponse extends Message {
    constructor(data) {
        super();
        /**
         * client ID associated with the consensus state
         *
         * @generated from field: string client_id = 2;
         */
        this.clientId = "";
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 3;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConnectionConsensusStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConnectionConsensusStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConnectionConsensusStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConnectionConsensusStateResponse, a, b);
    }
}
QueryConnectionConsensusStateResponse.runtime = proto3;
QueryConnectionConsensusStateResponse.typeName = "ibc.core.connection.v1.QueryConnectionConsensusStateResponse";
QueryConnectionConsensusStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "consensus_state", kind: "message", T: Any },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryConnectionParamsRequest is the request type for the Query/ConnectionParams RPC method.
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionParamsRequest
 */
export class QueryConnectionParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConnectionParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConnectionParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConnectionParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConnectionParamsRequest, a, b);
    }
}
QueryConnectionParamsRequest.runtime = proto3;
QueryConnectionParamsRequest.typeName = "ibc.core.connection.v1.QueryConnectionParamsRequest";
QueryConnectionParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryConnectionParamsResponse is the response type for the Query/ConnectionParams RPC method.
 *
 * @generated from message ibc.core.connection.v1.QueryConnectionParamsResponse
 */
export class QueryConnectionParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConnectionParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConnectionParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConnectionParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConnectionParamsResponse, a, b);
    }
}
QueryConnectionParamsResponse.runtime = proto3;
QueryConnectionParamsResponse.typeName = "ibc.core.connection.v1.QueryConnectionParamsResponse";
QueryConnectionParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
//# sourceMappingURL=query_pb.js.map