// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/core/client/v1/query.proto (package ibc.core.client.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ConsensusStateWithHeight, Height, IdentifiedClientState, Params } from "./client_pb.js";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { MerklePath } from "../../commitment/v1/commitment_pb.js";
/**
 * QueryClientStateRequest is the request type for the Query/ClientState RPC
 * method
 *
 * @generated from message ibc.core.client.v1.QueryClientStateRequest
 */
export class QueryClientStateRequest extends Message {
    constructor(data) {
        super();
        /**
         * client state unique identifier
         *
         * @generated from field: string client_id = 1;
         */
        this.clientId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClientStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClientStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClientStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryClientStateRequest, a, b);
    }
}
QueryClientStateRequest.runtime = proto3;
QueryClientStateRequest.typeName = "ibc.core.client.v1.QueryClientStateRequest";
QueryClientStateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryClientStateResponse is the response type for the Query/ClientState RPC
 * method. Besides the client state, it includes a proof and the height from
 * which the proof was retrieved.
 *
 * @generated from message ibc.core.client.v1.QueryClientStateResponse
 */
export class QueryClientStateResponse extends Message {
    constructor(data) {
        super();
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClientStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClientStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClientStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryClientStateResponse, a, b);
    }
}
QueryClientStateResponse.runtime = proto3;
QueryClientStateResponse.typeName = "ibc.core.client.v1.QueryClientStateResponse";
QueryClientStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "client_state", kind: "message", T: Any },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryClientStatesRequest is the request type for the Query/ClientStates RPC
 * method
 *
 * @generated from message ibc.core.client.v1.QueryClientStatesRequest
 */
export class QueryClientStatesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClientStatesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClientStatesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClientStatesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryClientStatesRequest, a, b);
    }
}
QueryClientStatesRequest.runtime = proto3;
QueryClientStatesRequest.typeName = "ibc.core.client.v1.QueryClientStatesRequest";
QueryClientStatesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryClientStatesResponse is the response type for the Query/ClientStates RPC
 * method.
 *
 * @generated from message ibc.core.client.v1.QueryClientStatesResponse
 */
export class QueryClientStatesResponse extends Message {
    constructor(data) {
        super();
        /**
         * list of stored ClientStates of the chain.
         *
         * @generated from field: repeated ibc.core.client.v1.IdentifiedClientState client_states = 1;
         */
        this.clientStates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClientStatesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClientStatesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClientStatesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryClientStatesResponse, a, b);
    }
}
QueryClientStatesResponse.runtime = proto3;
QueryClientStatesResponse.typeName = "ibc.core.client.v1.QueryClientStatesResponse";
QueryClientStatesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "client_states", kind: "message", T: IdentifiedClientState, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryConsensusStateRequest is the request type for the Query/ConsensusState
 * RPC method. Besides the consensus state, it includes a proof and the height
 * from which the proof was retrieved.
 *
 * @generated from message ibc.core.client.v1.QueryConsensusStateRequest
 */
export class QueryConsensusStateRequest extends Message {
    constructor(data) {
        super();
        /**
         * client identifier
         *
         * @generated from field: string client_id = 1;
         */
        this.clientId = "";
        /**
         * consensus state revision number
         *
         * @generated from field: uint64 revision_number = 2;
         */
        this.revisionNumber = protoInt64.zero;
        /**
         * consensus state revision height
         *
         * @generated from field: uint64 revision_height = 3;
         */
        this.revisionHeight = protoInt64.zero;
        /**
         * latest_height overrides the height field and queries the latest stored
         * ConsensusState
         *
         * @generated from field: bool latest_height = 4;
         */
        this.latestHeight = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConsensusStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConsensusStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConsensusStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConsensusStateRequest, a, b);
    }
}
QueryConsensusStateRequest.runtime = proto3;
QueryConsensusStateRequest.typeName = "ibc.core.client.v1.QueryConsensusStateRequest";
QueryConsensusStateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "revision_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "revision_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "latest_height", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * QueryConsensusStateResponse is the response type for the Query/ConsensusState
 * RPC method
 *
 * @generated from message ibc.core.client.v1.QueryConsensusStateResponse
 */
export class QueryConsensusStateResponse extends Message {
    constructor(data) {
        super();
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConsensusStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConsensusStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConsensusStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConsensusStateResponse, a, b);
    }
}
QueryConsensusStateResponse.runtime = proto3;
QueryConsensusStateResponse.typeName = "ibc.core.client.v1.QueryConsensusStateResponse";
QueryConsensusStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "consensus_state", kind: "message", T: Any },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryConsensusStatesRequest is the request type for the Query/ConsensusStates
 * RPC method.
 *
 * @generated from message ibc.core.client.v1.QueryConsensusStatesRequest
 */
export class QueryConsensusStatesRequest extends Message {
    constructor(data) {
        super();
        /**
         * client identifier
         *
         * @generated from field: string client_id = 1;
         */
        this.clientId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConsensusStatesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConsensusStatesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConsensusStatesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConsensusStatesRequest, a, b);
    }
}
QueryConsensusStatesRequest.runtime = proto3;
QueryConsensusStatesRequest.typeName = "ibc.core.client.v1.QueryConsensusStatesRequest";
QueryConsensusStatesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryConsensusStatesResponse is the response type for the
 * Query/ConsensusStates RPC method
 *
 * @generated from message ibc.core.client.v1.QueryConsensusStatesResponse
 */
export class QueryConsensusStatesResponse extends Message {
    constructor(data) {
        super();
        /**
         * consensus states associated with the identifier
         *
         * @generated from field: repeated ibc.core.client.v1.ConsensusStateWithHeight consensus_states = 1;
         */
        this.consensusStates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConsensusStatesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConsensusStatesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConsensusStatesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConsensusStatesResponse, a, b);
    }
}
QueryConsensusStatesResponse.runtime = proto3;
QueryConsensusStatesResponse.typeName = "ibc.core.client.v1.QueryConsensusStatesResponse";
QueryConsensusStatesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "consensus_states", kind: "message", T: ConsensusStateWithHeight, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryConsensusStateHeightsRequest is the request type for Query/ConsensusStateHeights
 * RPC method.
 *
 * @generated from message ibc.core.client.v1.QueryConsensusStateHeightsRequest
 */
export class QueryConsensusStateHeightsRequest extends Message {
    constructor(data) {
        super();
        /**
         * client identifier
         *
         * @generated from field: string client_id = 1;
         */
        this.clientId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConsensusStateHeightsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConsensusStateHeightsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConsensusStateHeightsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConsensusStateHeightsRequest, a, b);
    }
}
QueryConsensusStateHeightsRequest.runtime = proto3;
QueryConsensusStateHeightsRequest.typeName = "ibc.core.client.v1.QueryConsensusStateHeightsRequest";
QueryConsensusStateHeightsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryConsensusStateHeightsResponse is the response type for the
 * Query/ConsensusStateHeights RPC method
 *
 * @generated from message ibc.core.client.v1.QueryConsensusStateHeightsResponse
 */
export class QueryConsensusStateHeightsResponse extends Message {
    constructor(data) {
        super();
        /**
         * consensus state heights
         *
         * @generated from field: repeated ibc.core.client.v1.Height consensus_state_heights = 1;
         */
        this.consensusStateHeights = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConsensusStateHeightsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConsensusStateHeightsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConsensusStateHeightsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConsensusStateHeightsResponse, a, b);
    }
}
QueryConsensusStateHeightsResponse.runtime = proto3;
QueryConsensusStateHeightsResponse.typeName = "ibc.core.client.v1.QueryConsensusStateHeightsResponse";
QueryConsensusStateHeightsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "consensus_state_heights", kind: "message", T: Height, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryClientStatusRequest is the request type for the Query/ClientStatus RPC
 * method
 *
 * @generated from message ibc.core.client.v1.QueryClientStatusRequest
 */
export class QueryClientStatusRequest extends Message {
    constructor(data) {
        super();
        /**
         * client unique identifier
         *
         * @generated from field: string client_id = 1;
         */
        this.clientId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClientStatusRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClientStatusRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClientStatusRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryClientStatusRequest, a, b);
    }
}
QueryClientStatusRequest.runtime = proto3;
QueryClientStatusRequest.typeName = "ibc.core.client.v1.QueryClientStatusRequest";
QueryClientStatusRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryClientStatusResponse is the response type for the Query/ClientStatus RPC
 * method. It returns the current status of the IBC client.
 *
 * @generated from message ibc.core.client.v1.QueryClientStatusResponse
 */
export class QueryClientStatusResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string status = 1;
         */
        this.status = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClientStatusResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClientStatusResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClientStatusResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryClientStatusResponse, a, b);
    }
}
QueryClientStatusResponse.runtime = proto3;
QueryClientStatusResponse.typeName = "ibc.core.client.v1.QueryClientStatusResponse";
QueryClientStatusResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryClientParamsRequest is the request type for the Query/ClientParams RPC
 * method.
 *
 * @generated from message ibc.core.client.v1.QueryClientParamsRequest
 */
export class QueryClientParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClientParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClientParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClientParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryClientParamsRequest, a, b);
    }
}
QueryClientParamsRequest.runtime = proto3;
QueryClientParamsRequest.typeName = "ibc.core.client.v1.QueryClientParamsRequest";
QueryClientParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryClientParamsResponse is the response type for the Query/ClientParams RPC
 * method.
 *
 * @generated from message ibc.core.client.v1.QueryClientParamsResponse
 */
export class QueryClientParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryClientParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryClientParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryClientParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryClientParamsResponse, a, b);
    }
}
QueryClientParamsResponse.runtime = proto3;
QueryClientParamsResponse.typeName = "ibc.core.client.v1.QueryClientParamsResponse";
QueryClientParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * QueryUpgradedClientStateRequest is the request type for the
 * Query/UpgradedClientState RPC method
 *
 * @generated from message ibc.core.client.v1.QueryUpgradedClientStateRequest
 */
export class QueryUpgradedClientStateRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUpgradedClientStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUpgradedClientStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUpgradedClientStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUpgradedClientStateRequest, a, b);
    }
}
QueryUpgradedClientStateRequest.runtime = proto3;
QueryUpgradedClientStateRequest.typeName = "ibc.core.client.v1.QueryUpgradedClientStateRequest";
QueryUpgradedClientStateRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryUpgradedClientStateResponse is the response type for the
 * Query/UpgradedClientState RPC method.
 *
 * @generated from message ibc.core.client.v1.QueryUpgradedClientStateResponse
 */
export class QueryUpgradedClientStateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUpgradedClientStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUpgradedClientStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUpgradedClientStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUpgradedClientStateResponse, a, b);
    }
}
QueryUpgradedClientStateResponse.runtime = proto3;
QueryUpgradedClientStateResponse.typeName = "ibc.core.client.v1.QueryUpgradedClientStateResponse";
QueryUpgradedClientStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "upgraded_client_state", kind: "message", T: Any },
]);
/**
 * QueryUpgradedConsensusStateRequest is the request type for the
 * Query/UpgradedConsensusState RPC method
 *
 * @generated from message ibc.core.client.v1.QueryUpgradedConsensusStateRequest
 */
export class QueryUpgradedConsensusStateRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUpgradedConsensusStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUpgradedConsensusStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUpgradedConsensusStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUpgradedConsensusStateRequest, a, b);
    }
}
QueryUpgradedConsensusStateRequest.runtime = proto3;
QueryUpgradedConsensusStateRequest.typeName = "ibc.core.client.v1.QueryUpgradedConsensusStateRequest";
QueryUpgradedConsensusStateRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryUpgradedConsensusStateResponse is the response type for the
 * Query/UpgradedConsensusState RPC method.
 *
 * @generated from message ibc.core.client.v1.QueryUpgradedConsensusStateResponse
 */
export class QueryUpgradedConsensusStateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUpgradedConsensusStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUpgradedConsensusStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUpgradedConsensusStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUpgradedConsensusStateResponse, a, b);
    }
}
QueryUpgradedConsensusStateResponse.runtime = proto3;
QueryUpgradedConsensusStateResponse.typeName = "ibc.core.client.v1.QueryUpgradedConsensusStateResponse";
QueryUpgradedConsensusStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "upgraded_consensus_state", kind: "message", T: Any },
]);
/**
 * QueryVerifyMembershipRequest is the request type for the Query/VerifyMembership RPC method
 *
 * @generated from message ibc.core.client.v1.QueryVerifyMembershipRequest
 */
export class QueryVerifyMembershipRequest extends Message {
    constructor(data) {
        super();
        /**
         * client unique identifier.
         *
         * @generated from field: string client_id = 1;
         */
        this.clientId = "";
        /**
         * the proof to be verified by the client.
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        /**
         * the value which is proven.
         *
         * @generated from field: bytes value = 5;
         */
        this.value = new Uint8Array(0);
        /**
         * optional time delay
         *
         * @generated from field: uint64 time_delay = 6;
         */
        this.timeDelay = protoInt64.zero;
        /**
         * optional block delay
         *
         * @generated from field: uint64 block_delay = 7;
         */
        this.blockDelay = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryVerifyMembershipRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryVerifyMembershipRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryVerifyMembershipRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryVerifyMembershipRequest, a, b);
    }
}
QueryVerifyMembershipRequest.runtime = proto3;
QueryVerifyMembershipRequest.typeName = "ibc.core.client.v1.QueryVerifyMembershipRequest";
QueryVerifyMembershipRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
    { no: 4, name: "merkle_path", kind: "message", T: MerklePath },
    { no: 5, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "time_delay", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "block_delay", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryVerifyMembershipResponse is the response type for the Query/VerifyMembership RPC method
 *
 * @generated from message ibc.core.client.v1.QueryVerifyMembershipResponse
 */
export class QueryVerifyMembershipResponse extends Message {
    constructor(data) {
        super();
        /**
         * boolean indicating success or failure of proof verification.
         *
         * @generated from field: bool success = 1;
         */
        this.success = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryVerifyMembershipResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryVerifyMembershipResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryVerifyMembershipResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryVerifyMembershipResponse, a, b);
    }
}
QueryVerifyMembershipResponse.runtime = proto3;
QueryVerifyMembershipResponse.typeName = "ibc.core.client.v1.QueryVerifyMembershipResponse";
QueryVerifyMembershipResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
//# sourceMappingURL=query_pb.js.map