// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/txfees/v1beta1/feetoken.proto (package dymensionxyz.dymension.txfees.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * FeeToken is a struct that specifies a coin denom, and pool ID pair.
 * This marks the token as eligible for use as a tx fee asset in Osmosis.
 * Its price in osmo is derived through looking at the provided pool ID.
 * The pool ID must have base denom as one of its assets.
 *
 * @generated from message dymensionxyz.dymension.txfees.v1beta1.FeeToken
 */
export class FeeToken extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        /**
         * @generated from field: uint64 poolID = 2;
         */
        this.poolID = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeeToken().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeeToken().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeeToken().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FeeToken, a, b);
    }
}
FeeToken.runtime = proto3;
FeeToken.typeName = "dymensionxyz.dymension.txfees.v1beta1.FeeToken";
FeeToken.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "poolID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
//# sourceMappingURL=feetoken_pb.js.map