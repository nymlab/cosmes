// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/ocr/v1beta1/tx.proto (package injective.ocr.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FeedConfig, Params, Report } from "./ocr_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * @generated from message injective.ocr.v1beta1.MsgCreateFeed
 */
export class MsgCreateFeed extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateFeed().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateFeed().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateFeed().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateFeed, a, b);
    }
}
MsgCreateFeed.runtime = proto3;
MsgCreateFeed.typeName = "injective.ocr.v1beta1.MsgCreateFeed";
MsgCreateFeed.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: FeedConfig },
]);
/**
 * @generated from message injective.ocr.v1beta1.MsgCreateFeedResponse
 */
export class MsgCreateFeedResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateFeedResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateFeedResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateFeedResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateFeedResponse, a, b);
    }
}
MsgCreateFeedResponse.runtime = proto3;
MsgCreateFeedResponse.typeName = "injective.ocr.v1beta1.MsgCreateFeedResponse";
MsgCreateFeedResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message injective.ocr.v1beta1.MsgUpdateFeed
 */
export class MsgUpdateFeed extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * feed_id is an unique ID for the target of this config
         *
         * @generated from field: string feed_id = 2;
         */
        this.feedId = "";
        /**
         * signers ith element is address ith oracle uses to sign a report
         *
         * @generated from field: repeated string signers = 3;
         */
        this.signers = [];
        /**
         * transmitters ith element is address ith oracle uses to transmit a report
         * via the transmit method
         *
         * @generated from field: repeated string transmitters = 4;
         */
        this.transmitters = [];
        /**
         * Fixed LINK reward for each observer
         *
         * @generated from field: string link_per_observation = 5;
         */
        this.linkPerObservation = "";
        /**
         * Fixed LINK reward for transmitter
         *
         * @generated from field: string link_per_transmission = 6;
         */
        this.linkPerTransmission = "";
        /**
         * Native denom for LINK coin in the bank keeper
         *
         * @generated from field: string link_denom = 7;
         */
        this.linkDenom = "";
        /**
         * feed administrator
         *
         * @generated from field: string feed_admin = 8;
         */
        this.feedAdmin = "";
        /**
         * feed billing administrator
         *
         * @generated from field: string billing_admin = 9;
         */
        this.billingAdmin = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateFeed().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateFeed().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateFeed().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateFeed, a, b);
    }
}
MsgUpdateFeed.runtime = proto3;
MsgUpdateFeed.typeName = "injective.ocr.v1beta1.MsgUpdateFeed";
MsgUpdateFeed.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "signers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "transmitters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "link_per_observation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "link_per_transmission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "link_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "feed_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "billing_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.MsgUpdateFeedResponse
 */
export class MsgUpdateFeedResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateFeedResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateFeedResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateFeedResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateFeedResponse, a, b);
    }
}
MsgUpdateFeedResponse.runtime = proto3;
MsgUpdateFeedResponse.typeName = "injective.ocr.v1beta1.MsgUpdateFeedResponse";
MsgUpdateFeedResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message injective.ocr.v1beta1.MsgTransmit
 */
export class MsgTransmit extends Message {
    constructor(data) {
        super();
        /**
         * Address of the transmitter
         *
         * @generated from field: string transmitter = 1;
         */
        this.transmitter = "";
        /**
         * @generated from field: bytes config_digest = 2;
         */
        this.configDigest = new Uint8Array(0);
        /**
         * @generated from field: string feed_id = 3;
         */
        this.feedId = "";
        /**
         * @generated from field: uint64 epoch = 4;
         */
        this.epoch = protoInt64.zero;
        /**
         * @generated from field: uint64 round = 5;
         */
        this.round = protoInt64.zero;
        /**
         * @generated from field: bytes extra_hash = 6;
         */
        this.extraHash = new Uint8Array(0);
        /**
         * @generated from field: repeated bytes signatures = 8;
         */
        this.signatures = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgTransmit().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgTransmit().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgTransmit().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgTransmit, a, b);
    }
}
MsgTransmit.runtime = proto3;
MsgTransmit.typeName = "injective.ocr.v1beta1.MsgTransmit";
MsgTransmit.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "transmitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config_digest", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "round", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "extra_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "report", kind: "message", T: Report },
    { no: 8, name: "signatures", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
]);
/**
 * @generated from message injective.ocr.v1beta1.MsgTransmitResponse
 */
export class MsgTransmitResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgTransmitResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgTransmitResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgTransmitResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgTransmitResponse, a, b);
    }
}
MsgTransmitResponse.runtime = proto3;
MsgTransmitResponse.typeName = "injective.ocr.v1beta1.MsgTransmitResponse";
MsgTransmitResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message injective.ocr.v1beta1.MsgFundFeedRewardPool
 */
export class MsgFundFeedRewardPool extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string feed_id = 2;
         */
        this.feedId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgFundFeedRewardPool().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgFundFeedRewardPool().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgFundFeedRewardPool().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgFundFeedRewardPool, a, b);
    }
}
MsgFundFeedRewardPool.runtime = proto3;
MsgFundFeedRewardPool.typeName = "injective.ocr.v1beta1.MsgFundFeedRewardPool";
MsgFundFeedRewardPool.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
]);
/**
 * @generated from message injective.ocr.v1beta1.MsgFundFeedRewardPoolResponse
 */
export class MsgFundFeedRewardPoolResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgFundFeedRewardPoolResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgFundFeedRewardPoolResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgFundFeedRewardPoolResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgFundFeedRewardPoolResponse, a, b);
    }
}
MsgFundFeedRewardPoolResponse.runtime = proto3;
MsgFundFeedRewardPoolResponse.typeName = "injective.ocr.v1beta1.MsgFundFeedRewardPoolResponse";
MsgFundFeedRewardPoolResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message injective.ocr.v1beta1.MsgWithdrawFeedRewardPool
 */
export class MsgWithdrawFeedRewardPool extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string feed_id = 2;
         */
        this.feedId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgWithdrawFeedRewardPool().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgWithdrawFeedRewardPool().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgWithdrawFeedRewardPool().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgWithdrawFeedRewardPool, a, b);
    }
}
MsgWithdrawFeedRewardPool.runtime = proto3;
MsgWithdrawFeedRewardPool.typeName = "injective.ocr.v1beta1.MsgWithdrawFeedRewardPool";
MsgWithdrawFeedRewardPool.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
]);
/**
 * @generated from message injective.ocr.v1beta1.MsgWithdrawFeedRewardPoolResponse
 */
export class MsgWithdrawFeedRewardPoolResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgWithdrawFeedRewardPoolResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgWithdrawFeedRewardPoolResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgWithdrawFeedRewardPoolResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgWithdrawFeedRewardPoolResponse, a, b);
    }
}
MsgWithdrawFeedRewardPoolResponse.runtime = proto3;
MsgWithdrawFeedRewardPoolResponse.typeName = "injective.ocr.v1beta1.MsgWithdrawFeedRewardPoolResponse";
MsgWithdrawFeedRewardPoolResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message injective.ocr.v1beta1.MsgSetPayees
 */
export class MsgSetPayees extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string feed_id = 2;
         */
        this.feedId = "";
        /**
         * addresses oracles use to transmit the reports
         *
         * @generated from field: repeated string transmitters = 3;
         */
        this.transmitters = [];
        /**
         * addresses of payees corresponding to list of transmitters
         *
         * @generated from field: repeated string payees = 4;
         */
        this.payees = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSetPayees().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSetPayees().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSetPayees().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSetPayees, a, b);
    }
}
MsgSetPayees.runtime = proto3;
MsgSetPayees.typeName = "injective.ocr.v1beta1.MsgSetPayees";
MsgSetPayees.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "transmitters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "payees", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message injective.ocr.v1beta1.MsgSetPayeesResponse
 */
export class MsgSetPayeesResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSetPayeesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSetPayeesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSetPayeesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSetPayeesResponse, a, b);
    }
}
MsgSetPayeesResponse.runtime = proto3;
MsgSetPayeesResponse.typeName = "injective.ocr.v1beta1.MsgSetPayeesResponse";
MsgSetPayeesResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message injective.ocr.v1beta1.MsgTransferPayeeship
 */
export class MsgTransferPayeeship extends Message {
    constructor(data) {
        super();
        /**
         * transmitter address of oracle whose payee is changing
         *
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string transmitter = 2;
         */
        this.transmitter = "";
        /**
         * @generated from field: string feed_id = 3;
         */
        this.feedId = "";
        /**
         * new payee address
         *
         * @generated from field: string proposed = 4;
         */
        this.proposed = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgTransferPayeeship().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgTransferPayeeship().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgTransferPayeeship().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgTransferPayeeship, a, b);
    }
}
MsgTransferPayeeship.runtime = proto3;
MsgTransferPayeeship.typeName = "injective.ocr.v1beta1.MsgTransferPayeeship";
MsgTransferPayeeship.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transmitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "proposed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.MsgTransferPayeeshipResponse
 */
export class MsgTransferPayeeshipResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgTransferPayeeshipResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgTransferPayeeshipResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgTransferPayeeshipResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgTransferPayeeshipResponse, a, b);
    }
}
MsgTransferPayeeshipResponse.runtime = proto3;
MsgTransferPayeeshipResponse.typeName = "injective.ocr.v1beta1.MsgTransferPayeeshipResponse";
MsgTransferPayeeshipResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message injective.ocr.v1beta1.MsgAcceptPayeeship
 */
export class MsgAcceptPayeeship extends Message {
    constructor(data) {
        super();
        /**
         * new payee address
         *
         * @generated from field: string payee = 1;
         */
        this.payee = "";
        /**
         * transmitter address of oracle whose payee is changing
         *
         * @generated from field: string transmitter = 2;
         */
        this.transmitter = "";
        /**
         * @generated from field: string feed_id = 3;
         */
        this.feedId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgAcceptPayeeship().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgAcceptPayeeship().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgAcceptPayeeship().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgAcceptPayeeship, a, b);
    }
}
MsgAcceptPayeeship.runtime = proto3;
MsgAcceptPayeeship.typeName = "injective.ocr.v1beta1.MsgAcceptPayeeship";
MsgAcceptPayeeship.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "payee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transmitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.MsgAcceptPayeeshipResponse
 */
export class MsgAcceptPayeeshipResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgAcceptPayeeshipResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgAcceptPayeeshipResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgAcceptPayeeshipResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgAcceptPayeeshipResponse, a, b);
    }
}
MsgAcceptPayeeshipResponse.runtime = proto3;
MsgAcceptPayeeshipResponse.typeName = "injective.ocr.v1beta1.MsgAcceptPayeeshipResponse";
MsgAcceptPayeeshipResponse.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message injective.ocr.v1beta1.MsgUpdateParams
 */
export class MsgUpdateParams extends Message {
    constructor(data) {
        super();
        /**
         * authority is the address of the governance account.
         *
         * @generated from field: string authority = 1;
         */
        this.authority = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateParams, a, b);
    }
}
MsgUpdateParams.runtime = proto3;
MsgUpdateParams.typeName = "injective.ocr.v1beta1.MsgUpdateParams";
MsgUpdateParams.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
]);
/**
 * @generated from message injective.ocr.v1beta1.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgUpdateParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgUpdateParamsResponse, a, b);
    }
}
MsgUpdateParamsResponse.runtime = proto3;
MsgUpdateParamsResponse.typeName = "injective.ocr.v1beta1.MsgUpdateParamsResponse";
MsgUpdateParamsResponse.fields = proto3.util.newFieldList(() => []);
//# sourceMappingURL=tx_pb.js.map