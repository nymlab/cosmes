// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/mint/v1beta1/mint.proto (package osmosis.mint.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * Minter represents the minting state.
 *
 * @generated from message osmosis.mint.v1beta1.Minter
 */
export class Minter extends Message {
    constructor(data) {
        super();
        /**
         * epoch_provisions represent rewards for the current epoch.
         *
         * @generated from field: string epoch_provisions = 1;
         */
        this.epochProvisions = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Minter().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Minter().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Minter().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Minter, a, b);
    }
}
Minter.runtime = proto3;
Minter.typeName = "osmosis.mint.v1beta1.Minter";
Minter.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_provisions", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * WeightedAddress represents an address with a weight assigned to it.
 * The weight is used to determine the proportion of the total minted
 * tokens to be minted to the address.
 *
 * @generated from message osmosis.mint.v1beta1.WeightedAddress
 */
export class WeightedAddress extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string address = 1;
         */
        this.address = "";
        /**
         * @generated from field: string weight = 2;
         */
        this.weight = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new WeightedAddress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new WeightedAddress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new WeightedAddress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(WeightedAddress, a, b);
    }
}
WeightedAddress.runtime = proto3;
WeightedAddress.typeName = "osmosis.mint.v1beta1.WeightedAddress";
WeightedAddress.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * DistributionProportions defines the distribution proportions of the minted
 * denom. In other words, defines which stakeholders will receive the minted
 * denoms and how much.
 *
 * @generated from message osmosis.mint.v1beta1.DistributionProportions
 */
export class DistributionProportions extends Message {
    constructor(data) {
        super();
        /**
         * staking defines the proportion of the minted mint_denom that is to be
         * allocated as staking rewards.
         *
         * @generated from field: string staking = 1;
         */
        this.staking = "";
        /**
         * pool_incentives defines the proportion of the minted mint_denom that is
         * to be allocated as pool incentives.
         *
         * @generated from field: string pool_incentives = 2;
         */
        this.poolIncentives = "";
        /**
         * developer_rewards defines the proportion of the minted mint_denom that is
         * to be allocated to developer rewards address.
         *
         * @generated from field: string developer_rewards = 3;
         */
        this.developerRewards = "";
        /**
         * community_pool defines the proportion of the minted mint_denom that is
         * to be allocated to the community pool.
         *
         * @generated from field: string community_pool = 4;
         */
        this.communityPool = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DistributionProportions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DistributionProportions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DistributionProportions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DistributionProportions, a, b);
    }
}
DistributionProportions.runtime = proto3;
DistributionProportions.typeName = "osmosis.mint.v1beta1.DistributionProportions";
DistributionProportions.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "staking", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_incentives", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "developer_rewards", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "community_pool", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Params holds parameters for the x/mint module.
 *
 * @generated from message osmosis.mint.v1beta1.Params
 */
export class Params extends Message {
    constructor(data) {
        super();
        /**
         * mint_denom is the denom of the coin to mint.
         *
         * @generated from field: string mint_denom = 1;
         */
        this.mintDenom = "";
        /**
         * genesis_epoch_provisions epoch provisions from the first epoch.
         *
         * @generated from field: string genesis_epoch_provisions = 2;
         */
        this.genesisEpochProvisions = "";
        /**
         * epoch_identifier mint epoch identifier e.g. (day, week).
         *
         * @generated from field: string epoch_identifier = 3;
         */
        this.epochIdentifier = "";
        /**
         * reduction_period_in_epochs the number of epochs it takes
         * to reduce the rewards.
         *
         * @generated from field: int64 reduction_period_in_epochs = 4;
         */
        this.reductionPeriodInEpochs = protoInt64.zero;
        /**
         * reduction_factor is the reduction multiplier to execute
         * at the end of each period set by reduction_period_in_epochs.
         *
         * @generated from field: string reduction_factor = 5;
         */
        this.reductionFactor = "";
        /**
         * weighted_developer_rewards_receivers is the address to receive developer
         * rewards with weights assignedt to each address. The final amount that each
         * address receives is: epoch_provisions *
         * distribution_proportions.developer_rewards * Address's Weight.
         *
         * @generated from field: repeated osmosis.mint.v1beta1.WeightedAddress weighted_developer_rewards_receivers = 7;
         */
        this.weightedDeveloperRewardsReceivers = [];
        /**
         * minting_rewards_distribution_start_epoch start epoch to distribute minting
         * rewards
         *
         * @generated from field: int64 minting_rewards_distribution_start_epoch = 8;
         */
        this.mintingRewardsDistributionStartEpoch = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Params().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Params().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Params().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Params, a, b);
    }
}
Params.runtime = proto3;
Params.typeName = "osmosis.mint.v1beta1.Params";
Params.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "mint_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "genesis_epoch_provisions", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "epoch_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reduction_period_in_epochs", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "reduction_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "distribution_proportions", kind: "message", T: DistributionProportions },
    { no: 7, name: "weighted_developer_rewards_receivers", kind: "message", T: WeightedAddress, repeated: true },
    { no: 8, name: "minting_rewards_distribution_start_epoch", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
//# sourceMappingURL=mint_pb.js.map