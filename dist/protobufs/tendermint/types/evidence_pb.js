// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file tendermint/types/evidence.proto (package tendermint.types, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { LightBlock, Vote } from "./types_pb.js";
import { Validator } from "./validator_pb.js";
/**
 * @generated from message tendermint.types.Evidence
 */
export class Evidence extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof tendermint.types.Evidence.sum
         */
        this.sum = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Evidence().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Evidence().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Evidence().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Evidence, a, b);
    }
}
Evidence.runtime = proto3;
Evidence.typeName = "tendermint.types.Evidence";
Evidence.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "duplicate_vote_evidence", kind: "message", T: DuplicateVoteEvidence, oneof: "sum" },
    { no: 2, name: "light_client_attack_evidence", kind: "message", T: LightClientAttackEvidence, oneof: "sum" },
]);
/**
 * DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.
 *
 * @generated from message tendermint.types.DuplicateVoteEvidence
 */
export class DuplicateVoteEvidence extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 total_voting_power = 3;
         */
        this.totalVotingPower = protoInt64.zero;
        /**
         * @generated from field: int64 validator_power = 4;
         */
        this.validatorPower = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DuplicateVoteEvidence().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DuplicateVoteEvidence().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DuplicateVoteEvidence().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DuplicateVoteEvidence, a, b);
    }
}
DuplicateVoteEvidence.runtime = proto3;
DuplicateVoteEvidence.typeName = "tendermint.types.DuplicateVoteEvidence";
DuplicateVoteEvidence.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "vote_a", kind: "message", T: Vote },
    { no: 2, name: "vote_b", kind: "message", T: Vote },
    { no: 3, name: "total_voting_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "validator_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "timestamp", kind: "message", T: Timestamp },
]);
/**
 * LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.
 *
 * @generated from message tendermint.types.LightClientAttackEvidence
 */
export class LightClientAttackEvidence extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 common_height = 2;
         */
        this.commonHeight = protoInt64.zero;
        /**
         * @generated from field: repeated tendermint.types.Validator byzantine_validators = 3;
         */
        this.byzantineValidators = [];
        /**
         * @generated from field: int64 total_voting_power = 4;
         */
        this.totalVotingPower = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LightClientAttackEvidence().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LightClientAttackEvidence().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LightClientAttackEvidence().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LightClientAttackEvidence, a, b);
    }
}
LightClientAttackEvidence.runtime = proto3;
LightClientAttackEvidence.typeName = "tendermint.types.LightClientAttackEvidence";
LightClientAttackEvidence.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "conflicting_block", kind: "message", T: LightBlock },
    { no: 2, name: "common_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "byzantine_validators", kind: "message", T: Validator, repeated: true },
    { no: 4, name: "total_voting_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "timestamp", kind: "message", T: Timestamp },
]);
/**
 * @generated from message tendermint.types.EvidenceList
 */
export class EvidenceList extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated tendermint.types.Evidence evidence = 1;
         */
        this.evidence = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EvidenceList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EvidenceList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EvidenceList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EvidenceList, a, b);
    }
}
EvidenceList.runtime = proto3;
EvidenceList.typeName = "tendermint.types.EvidenceList";
EvidenceList.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "evidence", kind: "message", T: Evidence, repeated: true },
]);
//# sourceMappingURL=evidence_pb.js.map