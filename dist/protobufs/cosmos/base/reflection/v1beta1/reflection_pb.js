// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/base/reflection/v1beta1/reflection.proto (package cosmos.base.reflection.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * ListAllInterfacesRequest is the request type of the ListAllInterfaces RPC.
 *
 * @generated from message cosmos.base.reflection.v1beta1.ListAllInterfacesRequest
 */
export class ListAllInterfacesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListAllInterfacesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListAllInterfacesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListAllInterfacesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListAllInterfacesRequest, a, b);
    }
}
ListAllInterfacesRequest.runtime = proto3;
ListAllInterfacesRequest.typeName = "cosmos.base.reflection.v1beta1.ListAllInterfacesRequest";
ListAllInterfacesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * ListAllInterfacesResponse is the response type of the ListAllInterfaces RPC.
 *
 * @generated from message cosmos.base.reflection.v1beta1.ListAllInterfacesResponse
 */
export class ListAllInterfacesResponse extends Message {
    constructor(data) {
        super();
        /**
         * interface_names is an array of all the registered interfaces.
         *
         * @generated from field: repeated string interface_names = 1;
         */
        this.interfaceNames = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListAllInterfacesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListAllInterfacesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListAllInterfacesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListAllInterfacesResponse, a, b);
    }
}
ListAllInterfacesResponse.runtime = proto3;
ListAllInterfacesResponse.typeName = "cosmos.base.reflection.v1beta1.ListAllInterfacesResponse";
ListAllInterfacesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "interface_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * ListImplementationsRequest is the request type of the ListImplementations
 * RPC.
 *
 * @generated from message cosmos.base.reflection.v1beta1.ListImplementationsRequest
 */
export class ListImplementationsRequest extends Message {
    constructor(data) {
        super();
        /**
         * interface_name defines the interface to query the implementations for.
         *
         * @generated from field: string interface_name = 1;
         */
        this.interfaceName = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListImplementationsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListImplementationsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListImplementationsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListImplementationsRequest, a, b);
    }
}
ListImplementationsRequest.runtime = proto3;
ListImplementationsRequest.typeName = "cosmos.base.reflection.v1beta1.ListImplementationsRequest";
ListImplementationsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "interface_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ListImplementationsResponse is the response type of the ListImplementations
 * RPC.
 *
 * @generated from message cosmos.base.reflection.v1beta1.ListImplementationsResponse
 */
export class ListImplementationsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string implementation_message_names = 1;
         */
        this.implementationMessageNames = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ListImplementationsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ListImplementationsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ListImplementationsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ListImplementationsResponse, a, b);
    }
}
ListImplementationsResponse.runtime = proto3;
ListImplementationsResponse.typeName = "cosmos.base.reflection.v1beta1.ListImplementationsResponse";
ListImplementationsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "implementation_message_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
//# sourceMappingURL=reflection_pb.js.map