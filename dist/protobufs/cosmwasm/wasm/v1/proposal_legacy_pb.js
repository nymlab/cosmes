// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmwasm/wasm/v1/proposal_legacy.proto (package cosmwasm.wasm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AccessConfig } from "./types_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit StoreCodeProposal. To submit WASM code to the system,
 * a simple MsgStoreCode can be invoked from the x/gov module via
 * a v1 governance proposal.
 *
 * @generated from message cosmwasm.wasm.v1.StoreCodeProposal
 * @deprecated
 */
export class StoreCodeProposal extends Message {
    constructor(data) {
        super();
        /**
         * Title is a short summary
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * Description is a human readable text
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * RunAs is the address that is passed to the contract's environment as sender
         *
         * @generated from field: string run_as = 3;
         */
        this.runAs = "";
        /**
         * WASMByteCode can be raw or gzip compressed
         *
         * @generated from field: bytes wasm_byte_code = 4;
         */
        this.wasmByteCode = new Uint8Array(0);
        /**
         * UnpinCode code on upload, optional
         *
         * @generated from field: bool unpin_code = 8;
         */
        this.unpinCode = false;
        /**
         * Source is the URL where the code is hosted
         *
         * @generated from field: string source = 9;
         */
        this.source = "";
        /**
         * Builder is the docker image used to build the code deterministically, used
         * for smart contract verification
         *
         * @generated from field: string builder = 10;
         */
        this.builder = "";
        /**
         * CodeHash is the SHA256 sum of the code outputted by builder, used for smart
         * contract verification
         *
         * @generated from field: bytes code_hash = 11;
         */
        this.codeHash = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StoreCodeProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StoreCodeProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StoreCodeProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(StoreCodeProposal, a, b);
    }
}
StoreCodeProposal.runtime = proto3;
StoreCodeProposal.typeName = "cosmwasm.wasm.v1.StoreCodeProposal";
StoreCodeProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "run_as", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "wasm_byte_code", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "instantiate_permission", kind: "message", T: AccessConfig },
    { no: 8, name: "unpin_code", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "builder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit InstantiateContractProposal. To instantiate a contract,
 * a simple MsgInstantiateContract can be invoked from the x/gov module via
 * a v1 governance proposal.
 *
 * @generated from message cosmwasm.wasm.v1.InstantiateContractProposal
 * @deprecated
 */
export class InstantiateContractProposal extends Message {
    constructor(data) {
        super();
        /**
         * Title is a short summary
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * Description is a human readable text
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * RunAs is the address that is passed to the contract's environment as sender
         *
         * @generated from field: string run_as = 3;
         */
        this.runAs = "";
        /**
         * Admin is an optional address that can execute migrations
         *
         * @generated from field: string admin = 4;
         */
        this.admin = "";
        /**
         * CodeID is the reference to the stored WASM code
         *
         * @generated from field: uint64 code_id = 5;
         */
        this.codeId = protoInt64.zero;
        /**
         * Label is optional metadata to be stored with a constract instance.
         *
         * @generated from field: string label = 6;
         */
        this.label = "";
        /**
         * Msg json encoded message to be passed to the contract on instantiation
         *
         * @generated from field: bytes msg = 7;
         */
        this.msg = new Uint8Array(0);
        /**
         * Funds coins that are transferred to the contract on instantiation
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 8;
         */
        this.funds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstantiateContractProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstantiateContractProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstantiateContractProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(InstantiateContractProposal, a, b);
    }
}
InstantiateContractProposal.runtime = proto3;
InstantiateContractProposal.typeName = "cosmwasm.wasm.v1.InstantiateContractProposal";
InstantiateContractProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "run_as", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "funds", kind: "message", T: Coin, repeated: true },
]);
/**
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit InstantiateContract2Proposal. To instantiate contract 2,
 * a simple MsgInstantiateContract2 can be invoked from the x/gov module via
 * a v1 governance proposal.
 *
 * @generated from message cosmwasm.wasm.v1.InstantiateContract2Proposal
 * @deprecated
 */
export class InstantiateContract2Proposal extends Message {
    constructor(data) {
        super();
        /**
         * Title is a short summary
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * Description is a human readable text
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * RunAs is the address that is passed to the contract's enviroment as sender
         *
         * @generated from field: string run_as = 3;
         */
        this.runAs = "";
        /**
         * Admin is an optional address that can execute migrations
         *
         * @generated from field: string admin = 4;
         */
        this.admin = "";
        /**
         * CodeID is the reference to the stored WASM code
         *
         * @generated from field: uint64 code_id = 5;
         */
        this.codeId = protoInt64.zero;
        /**
         * Label is optional metadata to be stored with a constract instance.
         *
         * @generated from field: string label = 6;
         */
        this.label = "";
        /**
         * Msg json encode message to be passed to the contract on instantiation
         *
         * @generated from field: bytes msg = 7;
         */
        this.msg = new Uint8Array(0);
        /**
         * Funds coins that are transferred to the contract on instantiation
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 8;
         */
        this.funds = [];
        /**
         * Salt is an arbitrary value provided by the sender. Size can be 1 to 64.
         *
         * @generated from field: bytes salt = 9;
         */
        this.salt = new Uint8Array(0);
        /**
         * FixMsg include the msg value into the hash for the predictable address.
         * Default is false
         *
         * @generated from field: bool fix_msg = 10;
         */
        this.fixMsg = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InstantiateContract2Proposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InstantiateContract2Proposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InstantiateContract2Proposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(InstantiateContract2Proposal, a, b);
    }
}
InstantiateContract2Proposal.runtime = proto3;
InstantiateContract2Proposal.typeName = "cosmwasm.wasm.v1.InstantiateContract2Proposal";
InstantiateContract2Proposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "run_as", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "funds", kind: "message", T: Coin, repeated: true },
    { no: 9, name: "salt", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "fix_msg", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit MigrateContractProposal. To migrate a contract,
 * a simple MsgMigrateContract can be invoked from the x/gov module via
 * a v1 governance proposal.
 *
 * @generated from message cosmwasm.wasm.v1.MigrateContractProposal
 * @deprecated
 */
export class MigrateContractProposal extends Message {
    constructor(data) {
        super();
        /**
         * Title is a short summary
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * Description is a human readable text
         *
         * Note: skipping 3 as this was previously used for unneeded run_as
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * Contract is the address of the smart contract
         *
         * @generated from field: string contract = 4;
         */
        this.contract = "";
        /**
         * CodeID references the new WASM code
         *
         * @generated from field: uint64 code_id = 5;
         */
        this.codeId = protoInt64.zero;
        /**
         * Msg json encoded message to be passed to the contract on migration
         *
         * @generated from field: bytes msg = 6;
         */
        this.msg = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MigrateContractProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MigrateContractProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MigrateContractProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MigrateContractProposal, a, b);
    }
}
MigrateContractProposal.runtime = proto3;
MigrateContractProposal.typeName = "cosmwasm.wasm.v1.MigrateContractProposal";
MigrateContractProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit SudoContractProposal. To call sudo on a contract,
 * a simple MsgSudoContract can be invoked from the x/gov module via
 * a v1 governance proposal.
 *
 * @generated from message cosmwasm.wasm.v1.SudoContractProposal
 * @deprecated
 */
export class SudoContractProposal extends Message {
    constructor(data) {
        super();
        /**
         * Title is a short summary
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * Description is a human readable text
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * Contract is the address of the smart contract
         *
         * @generated from field: string contract = 3;
         */
        this.contract = "";
        /**
         * Msg json encoded message to be passed to the contract as sudo
         *
         * @generated from field: bytes msg = 4;
         */
        this.msg = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SudoContractProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SudoContractProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SudoContractProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SudoContractProposal, a, b);
    }
}
SudoContractProposal.runtime = proto3;
SudoContractProposal.typeName = "cosmwasm.wasm.v1.SudoContractProposal";
SudoContractProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit ExecuteContractProposal. To call execute on a contract,
 * a simple MsgExecuteContract can be invoked from the x/gov module via
 * a v1 governance proposal.
 *
 * @generated from message cosmwasm.wasm.v1.ExecuteContractProposal
 * @deprecated
 */
export class ExecuteContractProposal extends Message {
    constructor(data) {
        super();
        /**
         * Title is a short summary
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * Description is a human readable text
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * RunAs is the address that is passed to the contract's environment as sender
         *
         * @generated from field: string run_as = 3;
         */
        this.runAs = "";
        /**
         * Contract is the address of the smart contract
         *
         * @generated from field: string contract = 4;
         */
        this.contract = "";
        /**
         * Msg json encoded message to be passed to the contract as execute
         *
         * @generated from field: bytes msg = 5;
         */
        this.msg = new Uint8Array(0);
        /**
         * Funds coins that are transferred to the contract on instantiation
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 6;
         */
        this.funds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExecuteContractProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExecuteContractProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExecuteContractProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ExecuteContractProposal, a, b);
    }
}
ExecuteContractProposal.runtime = proto3;
ExecuteContractProposal.typeName = "cosmwasm.wasm.v1.ExecuteContractProposal";
ExecuteContractProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "run_as", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "funds", kind: "message", T: Coin, repeated: true },
]);
/**
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit UpdateAdminProposal. To set an admin for a contract,
 * a simple MsgUpdateAdmin can be invoked from the x/gov module via
 * a v1 governance proposal.
 *
 * @generated from message cosmwasm.wasm.v1.UpdateAdminProposal
 * @deprecated
 */
export class UpdateAdminProposal extends Message {
    constructor(data) {
        super();
        /**
         * Title is a short summary
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * Description is a human readable text
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * NewAdmin address to be set
         *
         * @generated from field: string new_admin = 3;
         */
        this.newAdmin = "";
        /**
         * Contract is the address of the smart contract
         *
         * @generated from field: string contract = 4;
         */
        this.contract = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateAdminProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateAdminProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateAdminProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateAdminProposal, a, b);
    }
}
UpdateAdminProposal.runtime = proto3;
UpdateAdminProposal.typeName = "cosmwasm.wasm.v1.UpdateAdminProposal";
UpdateAdminProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit ClearAdminProposal. To clear the admin of a contract,
 * a simple MsgClearAdmin can be invoked from the x/gov module via
 * a v1 governance proposal.
 *
 * @generated from message cosmwasm.wasm.v1.ClearAdminProposal
 * @deprecated
 */
export class ClearAdminProposal extends Message {
    constructor(data) {
        super();
        /**
         * Title is a short summary
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * Description is a human readable text
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * Contract is the address of the smart contract
         *
         * @generated from field: string contract = 3;
         */
        this.contract = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClearAdminProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClearAdminProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClearAdminProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClearAdminProposal, a, b);
    }
}
ClearAdminProposal.runtime = proto3;
ClearAdminProposal.typeName = "cosmwasm.wasm.v1.ClearAdminProposal";
ClearAdminProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit PinCodesProposal. To pin a set of code ids in the wasmvm
 * cache, a simple MsgPinCodes can be invoked from the x/gov module via
 * a v1 governance proposal.
 *
 * @generated from message cosmwasm.wasm.v1.PinCodesProposal
 * @deprecated
 */
export class PinCodesProposal extends Message {
    constructor(data) {
        super();
        /**
         * Title is a short summary
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * Description is a human readable text
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * CodeIDs references the new WASM codes
         *
         * @generated from field: repeated uint64 code_ids = 3;
         */
        this.codeIds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PinCodesProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PinCodesProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PinCodesProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PinCodesProposal, a, b);
    }
}
PinCodesProposal.runtime = proto3;
PinCodesProposal.typeName = "cosmwasm.wasm.v1.PinCodesProposal";
PinCodesProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
]);
/**
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit UnpinCodesProposal. To unpin a set of code ids in the wasmvm
 * cache, a simple MsgUnpinCodes can be invoked from the x/gov module via
 * a v1 governance proposal.
 *
 * @generated from message cosmwasm.wasm.v1.UnpinCodesProposal
 * @deprecated
 */
export class UnpinCodesProposal extends Message {
    constructor(data) {
        super();
        /**
         * Title is a short summary
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * Description is a human readable text
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * CodeIDs references the WASM codes
         *
         * @generated from field: repeated uint64 code_ids = 3;
         */
        this.codeIds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnpinCodesProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnpinCodesProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnpinCodesProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UnpinCodesProposal, a, b);
    }
}
UnpinCodesProposal.runtime = proto3;
UnpinCodesProposal.typeName = "cosmwasm.wasm.v1.UnpinCodesProposal";
UnpinCodesProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
]);
/**
 * AccessConfigUpdate contains the code id and the access config to be
 * applied.
 *
 * @generated from message cosmwasm.wasm.v1.AccessConfigUpdate
 */
export class AccessConfigUpdate extends Message {
    constructor(data) {
        super();
        /**
         * CodeID is the reference to the stored WASM code to be updated
         *
         * @generated from field: uint64 code_id = 1;
         */
        this.codeId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AccessConfigUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AccessConfigUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AccessConfigUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AccessConfigUpdate, a, b);
    }
}
AccessConfigUpdate.runtime = proto3;
AccessConfigUpdate.typeName = "cosmwasm.wasm.v1.AccessConfigUpdate";
AccessConfigUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "instantiate_permission", kind: "message", T: AccessConfig },
]);
/**
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit UpdateInstantiateConfigProposal. To update instantiate config
 * to a set of code ids, a simple MsgUpdateInstantiateConfig can be invoked from
 * the x/gov module via a v1 governance proposal.
 *
 * @generated from message cosmwasm.wasm.v1.UpdateInstantiateConfigProposal
 * @deprecated
 */
export class UpdateInstantiateConfigProposal extends Message {
    constructor(data) {
        super();
        /**
         * Title is a short summary
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * Description is a human readable text
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * AccessConfigUpdate contains the list of code ids and the access config
         * to be applied.
         *
         * @generated from field: repeated cosmwasm.wasm.v1.AccessConfigUpdate access_config_updates = 3;
         */
        this.accessConfigUpdates = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpdateInstantiateConfigProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpdateInstantiateConfigProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpdateInstantiateConfigProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpdateInstantiateConfigProposal, a, b);
    }
}
UpdateInstantiateConfigProposal.runtime = proto3;
UpdateInstantiateConfigProposal.typeName = "cosmwasm.wasm.v1.UpdateInstantiateConfigProposal";
UpdateInstantiateConfigProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "access_config_updates", kind: "message", T: AccessConfigUpdate, repeated: true },
]);
/**
 * Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
 * an explicit StoreAndInstantiateContractProposal. To store and instantiate
 * the contract, a simple MsgStoreAndInstantiateContract can be invoked from
 * the x/gov module via a v1 governance proposal.
 *
 * @generated from message cosmwasm.wasm.v1.StoreAndInstantiateContractProposal
 * @deprecated
 */
export class StoreAndInstantiateContractProposal extends Message {
    constructor(data) {
        super();
        /**
         * Title is a short summary
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * Description is a human readable text
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * RunAs is the address that is passed to the contract's environment as sender
         *
         * @generated from field: string run_as = 3;
         */
        this.runAs = "";
        /**
         * WASMByteCode can be raw or gzip compressed
         *
         * @generated from field: bytes wasm_byte_code = 4;
         */
        this.wasmByteCode = new Uint8Array(0);
        /**
         * UnpinCode code on upload, optional
         *
         * @generated from field: bool unpin_code = 6;
         */
        this.unpinCode = false;
        /**
         * Admin is an optional address that can execute migrations
         *
         * @generated from field: string admin = 7;
         */
        this.admin = "";
        /**
         * Label is optional metadata to be stored with a constract instance.
         *
         * @generated from field: string label = 8;
         */
        this.label = "";
        /**
         * Msg json encoded message to be passed to the contract on instantiation
         *
         * @generated from field: bytes msg = 9;
         */
        this.msg = new Uint8Array(0);
        /**
         * Funds coins that are transferred to the contract on instantiation
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 10;
         */
        this.funds = [];
        /**
         * Source is the URL where the code is hosted
         *
         * @generated from field: string source = 11;
         */
        this.source = "";
        /**
         * Builder is the docker image used to build the code deterministically, used
         * for smart contract verification
         *
         * @generated from field: string builder = 12;
         */
        this.builder = "";
        /**
         * CodeHash is the SHA256 sum of the code outputted by builder, used for smart
         * contract verification
         *
         * @generated from field: bytes code_hash = 13;
         */
        this.codeHash = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StoreAndInstantiateContractProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StoreAndInstantiateContractProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StoreAndInstantiateContractProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(StoreAndInstantiateContractProposal, a, b);
    }
}
StoreAndInstantiateContractProposal.runtime = proto3;
StoreAndInstantiateContractProposal.typeName = "cosmwasm.wasm.v1.StoreAndInstantiateContractProposal";
StoreAndInstantiateContractProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "run_as", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "wasm_byte_code", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "instantiate_permission", kind: "message", T: AccessConfig },
    { no: 6, name: "unpin_code", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "msg", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 10, name: "funds", kind: "message", T: Coin, repeated: true },
    { no: 11, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "builder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "code_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
//# sourceMappingURL=proposal_legacy_pb.js.map