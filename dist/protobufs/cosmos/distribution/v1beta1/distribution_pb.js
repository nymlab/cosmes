// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/distribution/v1beta1/distribution.proto (package cosmos.distribution.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin, DecCoin } from "../../base/v1beta1/coin_pb.js";
/**
 * Params defines the set of params for the distribution module.
 *
 * @generated from message cosmos.distribution.v1beta1.Params
 */
export class Params extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string community_tax = 1;
         */
        this.communityTax = "";
        /**
         * Deprecated: The base_proposer_reward field is deprecated and is no longer used
         * in the x/distribution module's reward mechanism.
         *
         * @generated from field: string base_proposer_reward = 2 [deprecated = true];
         * @deprecated
         */
        this.baseProposerReward = "";
        /**
         * Deprecated: The bonus_proposer_reward field is deprecated and is no longer used
         * in the x/distribution module's reward mechanism.
         *
         * @generated from field: string bonus_proposer_reward = 3 [deprecated = true];
         * @deprecated
         */
        this.bonusProposerReward = "";
        /**
         * @generated from field: bool withdraw_addr_enabled = 4;
         */
        this.withdrawAddrEnabled = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Params().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Params().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Params().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Params, a, b);
    }
}
Params.runtime = proto3;
Params.typeName = "cosmos.distribution.v1beta1.Params";
Params.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "community_tax", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base_proposer_reward", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bonus_proposer_reward", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "withdraw_addr_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * ValidatorHistoricalRewards represents historical rewards for a validator.
 * Height is implicit within the store key.
 * Cumulative reward ratio is the sum from the zeroeth period
 * until this period of rewards / tokens, per the spec.
 * The reference count indicates the number of objects
 * which might need to reference this historical entry at any point.
 * ReferenceCount =
 *    number of outstanding delegations which ended the associated period (and
 *    might need to read that record)
 *  + number of slashes which ended the associated period (and might need to
 *  read that record)
 *  + one per validator for the zeroeth period, set on initialization
 *
 * @generated from message cosmos.distribution.v1beta1.ValidatorHistoricalRewards
 */
export class ValidatorHistoricalRewards extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.DecCoin cumulative_reward_ratio = 1;
         */
        this.cumulativeRewardRatio = [];
        /**
         * @generated from field: uint32 reference_count = 2;
         */
        this.referenceCount = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ValidatorHistoricalRewards().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ValidatorHistoricalRewards().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ValidatorHistoricalRewards().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ValidatorHistoricalRewards, a, b);
    }
}
ValidatorHistoricalRewards.runtime = proto3;
ValidatorHistoricalRewards.typeName = "cosmos.distribution.v1beta1.ValidatorHistoricalRewards";
ValidatorHistoricalRewards.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "cumulative_reward_ratio", kind: "message", T: DecCoin, repeated: true },
    { no: 2, name: "reference_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * ValidatorCurrentRewards represents current rewards and current
 * period for a validator kept as a running counter and incremented
 * each block as long as the validator's tokens remain constant.
 *
 * @generated from message cosmos.distribution.v1beta1.ValidatorCurrentRewards
 */
export class ValidatorCurrentRewards extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.DecCoin rewards = 1;
         */
        this.rewards = [];
        /**
         * @generated from field: uint64 period = 2;
         */
        this.period = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ValidatorCurrentRewards().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ValidatorCurrentRewards().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ValidatorCurrentRewards().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ValidatorCurrentRewards, a, b);
    }
}
ValidatorCurrentRewards.runtime = proto3;
ValidatorCurrentRewards.typeName = "cosmos.distribution.v1beta1.ValidatorCurrentRewards";
ValidatorCurrentRewards.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: DecCoin, repeated: true },
    { no: 2, name: "period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * ValidatorAccumulatedCommission represents accumulated commission
 * for a validator kept as a running counter, can be withdrawn at any time.
 *
 * @generated from message cosmos.distribution.v1beta1.ValidatorAccumulatedCommission
 */
export class ValidatorAccumulatedCommission extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.DecCoin commission = 1;
         */
        this.commission = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ValidatorAccumulatedCommission().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ValidatorAccumulatedCommission().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ValidatorAccumulatedCommission().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ValidatorAccumulatedCommission, a, b);
    }
}
ValidatorAccumulatedCommission.runtime = proto3;
ValidatorAccumulatedCommission.typeName = "cosmos.distribution.v1beta1.ValidatorAccumulatedCommission";
ValidatorAccumulatedCommission.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "commission", kind: "message", T: DecCoin, repeated: true },
]);
/**
 * ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
 * for a validator inexpensive to track, allows simple sanity checks.
 *
 * @generated from message cosmos.distribution.v1beta1.ValidatorOutstandingRewards
 */
export class ValidatorOutstandingRewards extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.DecCoin rewards = 1;
         */
        this.rewards = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ValidatorOutstandingRewards().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ValidatorOutstandingRewards().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ValidatorOutstandingRewards().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ValidatorOutstandingRewards, a, b);
    }
}
ValidatorOutstandingRewards.runtime = proto3;
ValidatorOutstandingRewards.typeName = "cosmos.distribution.v1beta1.ValidatorOutstandingRewards";
ValidatorOutstandingRewards.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "rewards", kind: "message", T: DecCoin, repeated: true },
]);
/**
 * ValidatorSlashEvent represents a validator slash event.
 * Height is implicit within the store key.
 * This is needed to calculate appropriate amount of staking tokens
 * for delegations which are withdrawn after a slash has occurred.
 *
 * @generated from message cosmos.distribution.v1beta1.ValidatorSlashEvent
 */
export class ValidatorSlashEvent extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 validator_period = 1;
         */
        this.validatorPeriod = protoInt64.zero;
        /**
         * @generated from field: string fraction = 2;
         */
        this.fraction = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ValidatorSlashEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ValidatorSlashEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ValidatorSlashEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ValidatorSlashEvent, a, b);
    }
}
ValidatorSlashEvent.runtime = proto3;
ValidatorSlashEvent.typeName = "cosmos.distribution.v1beta1.ValidatorSlashEvent";
ValidatorSlashEvent.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "fraction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ValidatorSlashEvents is a collection of ValidatorSlashEvent messages.
 *
 * @generated from message cosmos.distribution.v1beta1.ValidatorSlashEvents
 */
export class ValidatorSlashEvents extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_events = 1;
         */
        this.validatorSlashEvents = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ValidatorSlashEvents().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ValidatorSlashEvents().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ValidatorSlashEvents().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ValidatorSlashEvents, a, b);
    }
}
ValidatorSlashEvents.runtime = proto3;
ValidatorSlashEvents.typeName = "cosmos.distribution.v1beta1.ValidatorSlashEvents";
ValidatorSlashEvents.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_slash_events", kind: "message", T: ValidatorSlashEvent, repeated: true },
]);
/**
 * FeePool is the global fee pool for distribution.
 *
 * @generated from message cosmos.distribution.v1beta1.FeePool
 */
export class FeePool extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.DecCoin community_pool = 1;
         */
        this.communityPool = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeePool().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeePool().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeePool().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FeePool, a, b);
    }
}
FeePool.runtime = proto3;
FeePool.typeName = "cosmos.distribution.v1beta1.FeePool";
FeePool.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "community_pool", kind: "message", T: DecCoin, repeated: true },
]);
/**
 * CommunityPoolSpendProposal details a proposal for use of community funds,
 * together with how many coins are proposed to be spent, and to which
 * recipient account.
 *
 * Deprecated: Do not use. As of the Cosmos SDK release v0.47.x, there is no
 * longer a need for an explicit CommunityPoolSpendProposal. To spend community
 * pool funds, a simple MsgCommunityPoolSpend can be invoked from the x/gov
 * module via a v1 governance proposal.
 *
 * @generated from message cosmos.distribution.v1beta1.CommunityPoolSpendProposal
 * @deprecated
 */
export class CommunityPoolSpendProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: string recipient = 3;
         */
        this.recipient = "";
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 4;
         */
        this.amount = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CommunityPoolSpendProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CommunityPoolSpendProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CommunityPoolSpendProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CommunityPoolSpendProposal, a, b);
    }
}
CommunityPoolSpendProposal.runtime = proto3;
CommunityPoolSpendProposal.typeName = "cosmos.distribution.v1beta1.CommunityPoolSpendProposal";
CommunityPoolSpendProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "message", T: Coin, repeated: true },
]);
/**
 * DelegatorStartingInfo represents the starting info for a delegator reward
 * period. It tracks the previous validator period, the delegation's amount of
 * staking token, and the creation height (to check later on if any slashes have
 * occurred). NOTE: Even though validators are slashed to whole staking tokens,
 * the delegators within the validator may be left with less than a full token,
 * thus sdk.Dec is used.
 *
 * @generated from message cosmos.distribution.v1beta1.DelegatorStartingInfo
 */
export class DelegatorStartingInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 previous_period = 1;
         */
        this.previousPeriod = protoInt64.zero;
        /**
         * @generated from field: string stake = 2;
         */
        this.stake = "";
        /**
         * @generated from field: uint64 height = 3;
         */
        this.height = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DelegatorStartingInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DelegatorStartingInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DelegatorStartingInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DelegatorStartingInfo, a, b);
    }
}
DelegatorStartingInfo.runtime = proto3;
DelegatorStartingInfo.typeName = "cosmos.distribution.v1beta1.DelegatorStartingInfo";
DelegatorStartingInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "previous_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "stake", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * DelegationDelegatorReward represents the properties
 * of a delegator's delegation reward.
 *
 * @generated from message cosmos.distribution.v1beta1.DelegationDelegatorReward
 */
export class DelegationDelegatorReward extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string validator_address = 1;
         */
        this.validatorAddress = "";
        /**
         * @generated from field: repeated cosmos.base.v1beta1.DecCoin reward = 2;
         */
        this.reward = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DelegationDelegatorReward().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DelegationDelegatorReward().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DelegationDelegatorReward().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DelegationDelegatorReward, a, b);
    }
}
DelegationDelegatorReward.runtime = proto3;
DelegationDelegatorReward.typeName = "cosmos.distribution.v1beta1.DelegationDelegatorReward";
DelegationDelegatorReward.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reward", kind: "message", T: DecCoin, repeated: true },
]);
/**
 * CommunityPoolSpendProposalWithDeposit defines a CommunityPoolSpendProposal
 * with a deposit
 *
 * @generated from message cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit
 */
export class CommunityPoolSpendProposalWithDeposit extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * @generated from field: string description = 2;
         */
        this.description = "";
        /**
         * @generated from field: string recipient = 3;
         */
        this.recipient = "";
        /**
         * @generated from field: string amount = 4;
         */
        this.amount = "";
        /**
         * @generated from field: string deposit = 5;
         */
        this.deposit = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CommunityPoolSpendProposalWithDeposit().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CommunityPoolSpendProposalWithDeposit().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CommunityPoolSpendProposalWithDeposit().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CommunityPoolSpendProposalWithDeposit, a, b);
    }
}
CommunityPoolSpendProposalWithDeposit.runtime = proto3;
CommunityPoolSpendProposalWithDeposit.typeName = "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit";
CommunityPoolSpendProposalWithDeposit.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "deposit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=distribution_pb.js.map