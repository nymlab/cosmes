// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmwasm/wasm/v1/ibc.proto (package cosmwasm.wasm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * MsgIBCSend
 *
 * @generated from message cosmwasm.wasm.v1.MsgIBCSend
 */
export class MsgIBCSend extends Message {
    constructor(data) {
        super();
        /**
         * the channel by which the packet will be sent
         *
         * @generated from field: string channel = 2;
         */
        this.channel = "";
        /**
         * Timeout height relative to the current block height.
         * The timeout is disabled when set to 0.
         *
         * @generated from field: uint64 timeout_height = 4;
         */
        this.timeoutHeight = protoInt64.zero;
        /**
         * Timeout timestamp (in nanoseconds) relative to the current block timestamp.
         * The timeout is disabled when set to 0.
         *
         * @generated from field: uint64 timeout_timestamp = 5;
         */
        this.timeoutTimestamp = protoInt64.zero;
        /**
         * Data is the payload to transfer. We must not make assumption what format or
         * content is in here.
         *
         * @generated from field: bytes data = 6;
         */
        this.data = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgIBCSend().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgIBCSend().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgIBCSend().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgIBCSend, a, b);
    }
}
MsgIBCSend.runtime = proto3;
MsgIBCSend.typeName = "cosmwasm.wasm.v1.MsgIBCSend";
MsgIBCSend.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timeout_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "timeout_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * MsgIBCSendResponse
 *
 * @generated from message cosmwasm.wasm.v1.MsgIBCSendResponse
 */
export class MsgIBCSendResponse extends Message {
    constructor(data) {
        super();
        /**
         * Sequence number of the IBC packet sent
         *
         * @generated from field: uint64 sequence = 1;
         */
        this.sequence = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgIBCSendResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgIBCSendResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgIBCSendResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgIBCSendResponse, a, b);
    }
}
MsgIBCSendResponse.runtime = proto3;
MsgIBCSendResponse.typeName = "cosmwasm.wasm.v1.MsgIBCSendResponse";
MsgIBCSendResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * MsgIBCCloseChannel port and channel need to be owned by the contract
 *
 * @generated from message cosmwasm.wasm.v1.MsgIBCCloseChannel
 */
export class MsgIBCCloseChannel extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string channel = 2;
         */
        this.channel = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgIBCCloseChannel().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgIBCCloseChannel().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgIBCCloseChannel().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgIBCCloseChannel, a, b);
    }
}
MsgIBCCloseChannel.runtime = proto3;
MsgIBCCloseChannel.typeName = "cosmwasm.wasm.v1.MsgIBCCloseChannel";
MsgIBCCloseChannel.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=ibc_pb.js.map