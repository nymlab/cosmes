// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/auction/v1beta1/auction.proto (package injective.auction.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * @generated from message injective.auction.v1beta1.Params
 */
export class Params extends Message {
    constructor(data) {
        super();
        /**
         * auction_period_duration defines the auction period duration
         *
         * @generated from field: int64 auction_period = 1;
         */
        this.auctionPeriod = protoInt64.zero;
        /**
         * min_next_bid_increment_rate defines the minimum increment rate for new bids
         *
         * @generated from field: string min_next_bid_increment_rate = 2;
         */
        this.minNextBidIncrementRate = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Params().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Params().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Params().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Params, a, b);
    }
}
Params.runtime = proto3;
Params.typeName = "injective.auction.v1beta1.Params";
Params.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "auction_period", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "min_next_bid_increment_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.auction.v1beta1.Bid
 */
export class Bid extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string bidder = 1;
         */
        this.bidder = "";
        /**
         * @generated from field: string amount = 2;
         */
        this.amount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Bid().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Bid().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Bid().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Bid, a, b);
    }
}
Bid.runtime = proto3;
Bid.typeName = "injective.auction.v1beta1.Bid";
Bid.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "bidder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.auction.v1beta1.EventBid
 */
export class EventBid extends Message {
    constructor(data) {
        super();
        /**
         * bidder describes the address of bidder
         *
         * @generated from field: string bidder = 1;
         */
        this.bidder = "";
        /**
         * amount describes the amount the bidder put on the auction
         *
         * @generated from field: string amount = 2;
         */
        this.amount = "";
        /**
         * round defines the round number of auction
         *
         * @generated from field: uint64 round = 3;
         */
        this.round = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventBid().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventBid().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventBid().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventBid, a, b);
    }
}
EventBid.runtime = proto3;
EventBid.typeName = "injective.auction.v1beta1.EventBid";
EventBid.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "bidder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message injective.auction.v1beta1.EventAuctionResult
 */
export class EventAuctionResult extends Message {
    constructor(data) {
        super();
        /**
         * winner describes the address of the winner
         *
         * @generated from field: string winner = 1;
         */
        this.winner = "";
        /**
         * amount describes the amount the winner get from the auction
         *
         * @generated from field: string amount = 2;
         */
        this.amount = "";
        /**
         * round defines the round number of auction
         *
         * @generated from field: uint64 round = 3;
         */
        this.round = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventAuctionResult().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventAuctionResult().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventAuctionResult().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventAuctionResult, a, b);
    }
}
EventAuctionResult.runtime = proto3;
EventAuctionResult.typeName = "injective.auction.v1beta1.EventAuctionResult";
EventAuctionResult.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "winner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message injective.auction.v1beta1.EventAuctionStart
 */
export class EventAuctionStart extends Message {
    constructor(data) {
        super();
        /**
         * round defines the round number of auction
         *
         * @generated from field: uint64 round = 1;
         */
        this.round = protoInt64.zero;
        /**
         * ending_timestamp describes auction end time
         *
         * @generated from field: int64 ending_timestamp = 2;
         */
        this.endingTimestamp = protoInt64.zero;
        /**
         * new_basket describes auction module balance at the time of new auction
         * start
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin new_basket = 3;
         */
        this.newBasket = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventAuctionStart().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventAuctionStart().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventAuctionStart().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventAuctionStart, a, b);
    }
}
EventAuctionStart.runtime = proto3;
EventAuctionStart.typeName = "injective.auction.v1beta1.EventAuctionStart";
EventAuctionStart.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "round", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "ending_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "new_basket", kind: "message", T: Coin, repeated: true },
]);
//# sourceMappingURL=auction_pb.js.map