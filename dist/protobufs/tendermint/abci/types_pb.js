// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file tendermint/abci/types.proto (package tendermint.abci, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { ConsensusParams } from "../types/params_pb.js";
import { Header } from "../types/types_pb.js";
import { ProofOps } from "../crypto/proof_pb.js";
import { PublicKey } from "../crypto/keys_pb.js";
/**
 * @generated from enum tendermint.abci.CheckTxType
 */
export var CheckTxType;
(function (CheckTxType) {
    /**
     * @generated from enum value: NEW = 0;
     */
    CheckTxType[CheckTxType["NEW"] = 0] = "NEW";
    /**
     * @generated from enum value: RECHECK = 1;
     */
    CheckTxType[CheckTxType["RECHECK"] = 1] = "RECHECK";
})(CheckTxType || (CheckTxType = {}));
// Retrieve enum metadata with: proto3.getEnumType(CheckTxType)
proto3.util.setEnumType(CheckTxType, "tendermint.abci.CheckTxType", [
    { no: 0, name: "NEW" },
    { no: 1, name: "RECHECK" },
]);
/**
 * @generated from enum tendermint.abci.MisbehaviorType
 */
export var MisbehaviorType;
(function (MisbehaviorType) {
    /**
     * @generated from enum value: UNKNOWN = 0;
     */
    MisbehaviorType[MisbehaviorType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * @generated from enum value: DUPLICATE_VOTE = 1;
     */
    MisbehaviorType[MisbehaviorType["DUPLICATE_VOTE"] = 1] = "DUPLICATE_VOTE";
    /**
     * @generated from enum value: LIGHT_CLIENT_ATTACK = 2;
     */
    MisbehaviorType[MisbehaviorType["LIGHT_CLIENT_ATTACK"] = 2] = "LIGHT_CLIENT_ATTACK";
})(MisbehaviorType || (MisbehaviorType = {}));
// Retrieve enum metadata with: proto3.getEnumType(MisbehaviorType)
proto3.util.setEnumType(MisbehaviorType, "tendermint.abci.MisbehaviorType", [
    { no: 0, name: "UNKNOWN" },
    { no: 1, name: "DUPLICATE_VOTE" },
    { no: 2, name: "LIGHT_CLIENT_ATTACK" },
]);
/**
 * @generated from message tendermint.abci.Request
 */
export class Request extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof tendermint.abci.Request.value
         */
        this.value = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Request().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Request().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Request().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Request, a, b);
    }
}
Request.runtime = proto3;
Request.typeName = "tendermint.abci.Request";
Request.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "echo", kind: "message", T: RequestEcho, oneof: "value" },
    { no: 2, name: "flush", kind: "message", T: RequestFlush, oneof: "value" },
    { no: 3, name: "info", kind: "message", T: RequestInfo, oneof: "value" },
    { no: 5, name: "init_chain", kind: "message", T: RequestInitChain, oneof: "value" },
    { no: 6, name: "query", kind: "message", T: RequestQuery, oneof: "value" },
    { no: 7, name: "begin_block", kind: "message", T: RequestBeginBlock, oneof: "value" },
    { no: 8, name: "check_tx", kind: "message", T: RequestCheckTx, oneof: "value" },
    { no: 9, name: "deliver_tx", kind: "message", T: RequestDeliverTx, oneof: "value" },
    { no: 10, name: "end_block", kind: "message", T: RequestEndBlock, oneof: "value" },
    { no: 11, name: "commit", kind: "message", T: RequestCommit, oneof: "value" },
    { no: 12, name: "list_snapshots", kind: "message", T: RequestListSnapshots, oneof: "value" },
    { no: 13, name: "offer_snapshot", kind: "message", T: RequestOfferSnapshot, oneof: "value" },
    { no: 14, name: "load_snapshot_chunk", kind: "message", T: RequestLoadSnapshotChunk, oneof: "value" },
    { no: 15, name: "apply_snapshot_chunk", kind: "message", T: RequestApplySnapshotChunk, oneof: "value" },
    { no: 16, name: "prepare_proposal", kind: "message", T: RequestPrepareProposal, oneof: "value" },
    { no: 17, name: "process_proposal", kind: "message", T: RequestProcessProposal, oneof: "value" },
]);
/**
 * @generated from message tendermint.abci.RequestEcho
 */
export class RequestEcho extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestEcho().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestEcho().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestEcho().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestEcho, a, b);
    }
}
RequestEcho.runtime = proto3;
RequestEcho.typeName = "tendermint.abci.RequestEcho";
RequestEcho.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message tendermint.abci.RequestFlush
 */
export class RequestFlush extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestFlush().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestFlush().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestFlush().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestFlush, a, b);
    }
}
RequestFlush.runtime = proto3;
RequestFlush.typeName = "tendermint.abci.RequestFlush";
RequestFlush.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message tendermint.abci.RequestInfo
 */
export class RequestInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string version = 1;
         */
        this.version = "";
        /**
         * @generated from field: uint64 block_version = 2;
         */
        this.blockVersion = protoInt64.zero;
        /**
         * @generated from field: uint64 p2p_version = 3;
         */
        this.p2pVersion = protoInt64.zero;
        /**
         * @generated from field: string abci_version = 4;
         */
        this.abciVersion = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestInfo, a, b);
    }
}
RequestInfo.runtime = proto3;
RequestInfo.typeName = "tendermint.abci.RequestInfo";
RequestInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "p2p_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "abci_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message tendermint.abci.RequestInitChain
 */
export class RequestInitChain extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string chain_id = 2;
         */
        this.chainId = "";
        /**
         * @generated from field: repeated tendermint.abci.ValidatorUpdate validators = 4;
         */
        this.validators = [];
        /**
         * @generated from field: bytes app_state_bytes = 5;
         */
        this.appStateBytes = new Uint8Array(0);
        /**
         * @generated from field: int64 initial_height = 6;
         */
        this.initialHeight = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestInitChain().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestInitChain().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestInitChain().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestInitChain, a, b);
    }
}
RequestInitChain.runtime = proto3;
RequestInitChain.typeName = "tendermint.abci.RequestInitChain";
RequestInitChain.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "message", T: Timestamp },
    { no: 2, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "consensus_params", kind: "message", T: ConsensusParams },
    { no: 4, name: "validators", kind: "message", T: ValidatorUpdate, repeated: true },
    { no: 5, name: "app_state_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "initial_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message tendermint.abci.RequestQuery
 */
export class RequestQuery extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes data = 1;
         */
        this.data = new Uint8Array(0);
        /**
         * @generated from field: string path = 2;
         */
        this.path = "";
        /**
         * @generated from field: int64 height = 3;
         */
        this.height = protoInt64.zero;
        /**
         * @generated from field: bool prove = 4;
         */
        this.prove = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestQuery().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestQuery().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestQuery().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestQuery, a, b);
    }
}
RequestQuery.runtime = proto3;
RequestQuery.typeName = "tendermint.abci.RequestQuery";
RequestQuery.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "prove", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message tendermint.abci.RequestBeginBlock
 */
export class RequestBeginBlock extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes hash = 1;
         */
        this.hash = new Uint8Array(0);
        /**
         * @generated from field: repeated tendermint.abci.Misbehavior byzantine_validators = 4;
         */
        this.byzantineValidators = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestBeginBlock().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestBeginBlock().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestBeginBlock().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestBeginBlock, a, b);
    }
}
RequestBeginBlock.runtime = proto3;
RequestBeginBlock.typeName = "tendermint.abci.RequestBeginBlock";
RequestBeginBlock.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "header", kind: "message", T: Header },
    { no: 3, name: "last_commit_info", kind: "message", T: CommitInfo },
    { no: 4, name: "byzantine_validators", kind: "message", T: Misbehavior, repeated: true },
]);
/**
 * @generated from message tendermint.abci.RequestCheckTx
 */
export class RequestCheckTx extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes tx = 1;
         */
        this.tx = new Uint8Array(0);
        /**
         * @generated from field: tendermint.abci.CheckTxType type = 2;
         */
        this.type = CheckTxType.NEW;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestCheckTx().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestCheckTx().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestCheckTx().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestCheckTx, a, b);
    }
}
RequestCheckTx.runtime = proto3;
RequestCheckTx.typeName = "tendermint.abci.RequestCheckTx";
RequestCheckTx.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(CheckTxType) },
]);
/**
 * @generated from message tendermint.abci.RequestDeliverTx
 */
export class RequestDeliverTx extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes tx = 1;
         */
        this.tx = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestDeliverTx().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestDeliverTx().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestDeliverTx().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestDeliverTx, a, b);
    }
}
RequestDeliverTx.runtime = proto3;
RequestDeliverTx.typeName = "tendermint.abci.RequestDeliverTx";
RequestDeliverTx.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message tendermint.abci.RequestEndBlock
 */
export class RequestEndBlock extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 height = 1;
         */
        this.height = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestEndBlock().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestEndBlock().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestEndBlock().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestEndBlock, a, b);
    }
}
RequestEndBlock.runtime = proto3;
RequestEndBlock.typeName = "tendermint.abci.RequestEndBlock";
RequestEndBlock.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message tendermint.abci.RequestCommit
 */
export class RequestCommit extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestCommit().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestCommit().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestCommit().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestCommit, a, b);
    }
}
RequestCommit.runtime = proto3;
RequestCommit.typeName = "tendermint.abci.RequestCommit";
RequestCommit.fields = proto3.util.newFieldList(() => []);
/**
 * lists available snapshots
 *
 * @generated from message tendermint.abci.RequestListSnapshots
 */
export class RequestListSnapshots extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestListSnapshots().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestListSnapshots().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestListSnapshots().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestListSnapshots, a, b);
    }
}
RequestListSnapshots.runtime = proto3;
RequestListSnapshots.typeName = "tendermint.abci.RequestListSnapshots";
RequestListSnapshots.fields = proto3.util.newFieldList(() => []);
/**
 * offers a snapshot to the application
 *
 * @generated from message tendermint.abci.RequestOfferSnapshot
 */
export class RequestOfferSnapshot extends Message {
    constructor(data) {
        super();
        /**
         * light client-verified app hash for snapshot height
         *
         * @generated from field: bytes app_hash = 2;
         */
        this.appHash = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestOfferSnapshot().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestOfferSnapshot().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestOfferSnapshot().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestOfferSnapshot, a, b);
    }
}
RequestOfferSnapshot.runtime = proto3;
RequestOfferSnapshot.typeName = "tendermint.abci.RequestOfferSnapshot";
RequestOfferSnapshot.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshot", kind: "message", T: Snapshot },
    { no: 2, name: "app_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * loads a snapshot chunk
 *
 * @generated from message tendermint.abci.RequestLoadSnapshotChunk
 */
export class RequestLoadSnapshotChunk extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 height = 1;
         */
        this.height = protoInt64.zero;
        /**
         * @generated from field: uint32 format = 2;
         */
        this.format = 0;
        /**
         * @generated from field: uint32 chunk = 3;
         */
        this.chunk = 0;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestLoadSnapshotChunk().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestLoadSnapshotChunk().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestLoadSnapshotChunk().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestLoadSnapshotChunk, a, b);
    }
}
RequestLoadSnapshotChunk.runtime = proto3;
RequestLoadSnapshotChunk.typeName = "tendermint.abci.RequestLoadSnapshotChunk";
RequestLoadSnapshotChunk.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "format", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "chunk", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
]);
/**
 * Applies a snapshot chunk
 *
 * @generated from message tendermint.abci.RequestApplySnapshotChunk
 */
export class RequestApplySnapshotChunk extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 index = 1;
         */
        this.index = 0;
        /**
         * @generated from field: bytes chunk = 2;
         */
        this.chunk = new Uint8Array(0);
        /**
         * @generated from field: string sender = 3;
         */
        this.sender = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestApplySnapshotChunk().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestApplySnapshotChunk().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestApplySnapshotChunk().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestApplySnapshotChunk, a, b);
    }
}
RequestApplySnapshotChunk.runtime = proto3;
RequestApplySnapshotChunk.typeName = "tendermint.abci.RequestApplySnapshotChunk";
RequestApplySnapshotChunk.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message tendermint.abci.RequestPrepareProposal
 */
export class RequestPrepareProposal extends Message {
    constructor(data) {
        super();
        /**
         * the modified transactions cannot exceed this size.
         *
         * @generated from field: int64 max_tx_bytes = 1;
         */
        this.maxTxBytes = protoInt64.zero;
        /**
         * txs is an array of transactions that will be included in a block,
         * sent to the app for possible modifications.
         *
         * @generated from field: repeated bytes txs = 2;
         */
        this.txs = [];
        /**
         * @generated from field: repeated tendermint.abci.Misbehavior misbehavior = 4;
         */
        this.misbehavior = [];
        /**
         * @generated from field: int64 height = 5;
         */
        this.height = protoInt64.zero;
        /**
         * @generated from field: bytes next_validators_hash = 7;
         */
        this.nextValidatorsHash = new Uint8Array(0);
        /**
         * address of the public key of the validator proposing the block.
         *
         * @generated from field: bytes proposer_address = 8;
         */
        this.proposerAddress = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestPrepareProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestPrepareProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestPrepareProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestPrepareProposal, a, b);
    }
}
RequestPrepareProposal.runtime = proto3;
RequestPrepareProposal.typeName = "tendermint.abci.RequestPrepareProposal";
RequestPrepareProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "max_tx_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "txs", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 3, name: "local_last_commit", kind: "message", T: ExtendedCommitInfo },
    { no: 4, name: "misbehavior", kind: "message", T: Misbehavior, repeated: true },
    { no: 5, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "time", kind: "message", T: Timestamp },
    { no: 7, name: "next_validators_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "proposer_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message tendermint.abci.RequestProcessProposal
 */
export class RequestProcessProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated bytes txs = 1;
         */
        this.txs = [];
        /**
         * @generated from field: repeated tendermint.abci.Misbehavior misbehavior = 3;
         */
        this.misbehavior = [];
        /**
         * hash is the merkle root hash of the fields of the proposed block.
         *
         * @generated from field: bytes hash = 4;
         */
        this.hash = new Uint8Array(0);
        /**
         * @generated from field: int64 height = 5;
         */
        this.height = protoInt64.zero;
        /**
         * @generated from field: bytes next_validators_hash = 7;
         */
        this.nextValidatorsHash = new Uint8Array(0);
        /**
         * address of the public key of the original proposer of the block.
         *
         * @generated from field: bytes proposer_address = 8;
         */
        this.proposerAddress = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RequestProcessProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestProcessProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestProcessProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RequestProcessProposal, a, b);
    }
}
RequestProcessProposal.runtime = proto3;
RequestProcessProposal.typeName = "tendermint.abci.RequestProcessProposal";
RequestProcessProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "txs", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 2, name: "proposed_last_commit", kind: "message", T: CommitInfo },
    { no: 3, name: "misbehavior", kind: "message", T: Misbehavior, repeated: true },
    { no: 4, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "time", kind: "message", T: Timestamp },
    { no: 7, name: "next_validators_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "proposer_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message tendermint.abci.Response
 */
export class Response extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof tendermint.abci.Response.value
         */
        this.value = { case: undefined };
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Response().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Response().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Response().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Response, a, b);
    }
}
Response.runtime = proto3;
Response.typeName = "tendermint.abci.Response";
Response.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "exception", kind: "message", T: ResponseException, oneof: "value" },
    { no: 2, name: "echo", kind: "message", T: ResponseEcho, oneof: "value" },
    { no: 3, name: "flush", kind: "message", T: ResponseFlush, oneof: "value" },
    { no: 4, name: "info", kind: "message", T: ResponseInfo, oneof: "value" },
    { no: 6, name: "init_chain", kind: "message", T: ResponseInitChain, oneof: "value" },
    { no: 7, name: "query", kind: "message", T: ResponseQuery, oneof: "value" },
    { no: 8, name: "begin_block", kind: "message", T: ResponseBeginBlock, oneof: "value" },
    { no: 9, name: "check_tx", kind: "message", T: ResponseCheckTx, oneof: "value" },
    { no: 10, name: "deliver_tx", kind: "message", T: ResponseDeliverTx, oneof: "value" },
    { no: 11, name: "end_block", kind: "message", T: ResponseEndBlock, oneof: "value" },
    { no: 12, name: "commit", kind: "message", T: ResponseCommit, oneof: "value" },
    { no: 13, name: "list_snapshots", kind: "message", T: ResponseListSnapshots, oneof: "value" },
    { no: 14, name: "offer_snapshot", kind: "message", T: ResponseOfferSnapshot, oneof: "value" },
    { no: 15, name: "load_snapshot_chunk", kind: "message", T: ResponseLoadSnapshotChunk, oneof: "value" },
    { no: 16, name: "apply_snapshot_chunk", kind: "message", T: ResponseApplySnapshotChunk, oneof: "value" },
    { no: 17, name: "prepare_proposal", kind: "message", T: ResponsePrepareProposal, oneof: "value" },
    { no: 18, name: "process_proposal", kind: "message", T: ResponseProcessProposal, oneof: "value" },
]);
/**
 * nondeterministic
 *
 * @generated from message tendermint.abci.ResponseException
 */
export class ResponseException extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string error = 1;
         */
        this.error = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseException().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseException().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseException().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseException, a, b);
    }
}
ResponseException.runtime = proto3;
ResponseException.typeName = "tendermint.abci.ResponseException";
ResponseException.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message tendermint.abci.ResponseEcho
 */
export class ResponseEcho extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string message = 1;
         */
        this.message = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseEcho().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseEcho().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseEcho().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseEcho, a, b);
    }
}
ResponseEcho.runtime = proto3;
ResponseEcho.typeName = "tendermint.abci.ResponseEcho";
ResponseEcho.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message tendermint.abci.ResponseFlush
 */
export class ResponseFlush extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseFlush().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseFlush().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseFlush().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseFlush, a, b);
    }
}
ResponseFlush.runtime = proto3;
ResponseFlush.typeName = "tendermint.abci.ResponseFlush";
ResponseFlush.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message tendermint.abci.ResponseInfo
 */
export class ResponseInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string data = 1;
         */
        this.data = "";
        /**
         * @generated from field: string version = 2;
         */
        this.version = "";
        /**
         * @generated from field: uint64 app_version = 3;
         */
        this.appVersion = protoInt64.zero;
        /**
         * @generated from field: int64 last_block_height = 4;
         */
        this.lastBlockHeight = protoInt64.zero;
        /**
         * @generated from field: bytes last_block_app_hash = 5;
         */
        this.lastBlockAppHash = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseInfo, a, b);
    }
}
ResponseInfo.runtime = proto3;
ResponseInfo.typeName = "tendermint.abci.ResponseInfo";
ResponseInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "app_version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "last_block_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "last_block_app_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message tendermint.abci.ResponseInitChain
 */
export class ResponseInitChain extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated tendermint.abci.ValidatorUpdate validators = 2;
         */
        this.validators = [];
        /**
         * @generated from field: bytes app_hash = 3;
         */
        this.appHash = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseInitChain().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseInitChain().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseInitChain().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseInitChain, a, b);
    }
}
ResponseInitChain.runtime = proto3;
ResponseInitChain.typeName = "tendermint.abci.ResponseInitChain";
ResponseInitChain.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "consensus_params", kind: "message", T: ConsensusParams },
    { no: 2, name: "validators", kind: "message", T: ValidatorUpdate, repeated: true },
    { no: 3, name: "app_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message tendermint.abci.ResponseQuery
 */
export class ResponseQuery extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 code = 1;
         */
        this.code = 0;
        /**
         * bytes data = 2; // use "value" instead.
         *
         * nondeterministic
         *
         * @generated from field: string log = 3;
         */
        this.log = "";
        /**
         * nondeterministic
         *
         * @generated from field: string info = 4;
         */
        this.info = "";
        /**
         * @generated from field: int64 index = 5;
         */
        this.index = protoInt64.zero;
        /**
         * @generated from field: bytes key = 6;
         */
        this.key = new Uint8Array(0);
        /**
         * @generated from field: bytes value = 7;
         */
        this.value = new Uint8Array(0);
        /**
         * @generated from field: int64 height = 9;
         */
        this.height = protoInt64.zero;
        /**
         * @generated from field: string codespace = 10;
         */
        this.codespace = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseQuery().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseQuery().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseQuery().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseQuery, a, b);
    }
}
ResponseQuery.runtime = proto3;
ResponseQuery.typeName = "tendermint.abci.ResponseQuery";
ResponseQuery.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "proof_ops", kind: "message", T: ProofOps },
    { no: 9, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "codespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message tendermint.abci.ResponseBeginBlock
 */
export class ResponseBeginBlock extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated tendermint.abci.Event events = 1;
         */
        this.events = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseBeginBlock().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseBeginBlock().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseBeginBlock().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseBeginBlock, a, b);
    }
}
ResponseBeginBlock.runtime = proto3;
ResponseBeginBlock.typeName = "tendermint.abci.ResponseBeginBlock";
ResponseBeginBlock.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: Event, repeated: true },
]);
/**
 * @generated from message tendermint.abci.ResponseCheckTx
 */
export class ResponseCheckTx extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 code = 1;
         */
        this.code = 0;
        /**
         * @generated from field: bytes data = 2;
         */
        this.data = new Uint8Array(0);
        /**
         * nondeterministic
         *
         * @generated from field: string log = 3;
         */
        this.log = "";
        /**
         * nondeterministic
         *
         * @generated from field: string info = 4;
         */
        this.info = "";
        /**
         * @generated from field: int64 gas_wanted = 5 [json_name = "gas_wanted"];
         */
        this.gasWanted = protoInt64.zero;
        /**
         * @generated from field: int64 gas_used = 6 [json_name = "gas_used"];
         */
        this.gasUsed = protoInt64.zero;
        /**
         * @generated from field: repeated tendermint.abci.Event events = 7;
         */
        this.events = [];
        /**
         * @generated from field: string codespace = 8;
         */
        this.codespace = "";
        /**
         * @generated from field: string sender = 9;
         */
        this.sender = "";
        /**
         * @generated from field: int64 priority = 10;
         */
        this.priority = protoInt64.zero;
        /**
         * mempool_error is set by CometBFT.
         * ABCI applictions creating a ResponseCheckTX should not set mempool_error.
         *
         * @generated from field: string mempool_error = 11;
         */
        this.mempoolError = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseCheckTx().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseCheckTx().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseCheckTx().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseCheckTx, a, b);
    }
}
ResponseCheckTx.runtime = proto3;
ResponseCheckTx.typeName = "tendermint.abci.ResponseCheckTx";
ResponseCheckTx.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "gas_wanted", jsonName: "gas_wanted", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "gas_used", jsonName: "gas_used", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "events", kind: "message", T: Event, repeated: true },
    { no: 8, name: "codespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "priority", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "mempool_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message tendermint.abci.ResponseDeliverTx
 */
export class ResponseDeliverTx extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 code = 1;
         */
        this.code = 0;
        /**
         * @generated from field: bytes data = 2;
         */
        this.data = new Uint8Array(0);
        /**
         * nondeterministic
         *
         * @generated from field: string log = 3;
         */
        this.log = "";
        /**
         * nondeterministic
         *
         * @generated from field: string info = 4;
         */
        this.info = "";
        /**
         * @generated from field: int64 gas_wanted = 5 [json_name = "gas_wanted"];
         */
        this.gasWanted = protoInt64.zero;
        /**
         * @generated from field: int64 gas_used = 6 [json_name = "gas_used"];
         */
        this.gasUsed = protoInt64.zero;
        /**
         * nondeterministic
         *
         * @generated from field: repeated tendermint.abci.Event events = 7;
         */
        this.events = [];
        /**
         * @generated from field: string codespace = 8;
         */
        this.codespace = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseDeliverTx().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseDeliverTx().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseDeliverTx().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseDeliverTx, a, b);
    }
}
ResponseDeliverTx.runtime = proto3;
ResponseDeliverTx.typeName = "tendermint.abci.ResponseDeliverTx";
ResponseDeliverTx.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "gas_wanted", jsonName: "gas_wanted", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "gas_used", jsonName: "gas_used", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "events", kind: "message", T: Event, repeated: true },
    { no: 8, name: "codespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message tendermint.abci.ResponseEndBlock
 */
export class ResponseEndBlock extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated tendermint.abci.ValidatorUpdate validator_updates = 1;
         */
        this.validatorUpdates = [];
        /**
         * @generated from field: repeated tendermint.abci.Event events = 3;
         */
        this.events = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseEndBlock().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseEndBlock().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseEndBlock().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseEndBlock, a, b);
    }
}
ResponseEndBlock.runtime = proto3;
ResponseEndBlock.typeName = "tendermint.abci.ResponseEndBlock";
ResponseEndBlock.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_updates", kind: "message", T: ValidatorUpdate, repeated: true },
    { no: 2, name: "consensus_param_updates", kind: "message", T: ConsensusParams },
    { no: 3, name: "events", kind: "message", T: Event, repeated: true },
]);
/**
 * @generated from message tendermint.abci.ResponseCommit
 */
export class ResponseCommit extends Message {
    constructor(data) {
        super();
        /**
         * reserve 1
         *
         * @generated from field: bytes data = 2;
         */
        this.data = new Uint8Array(0);
        /**
         * @generated from field: int64 retain_height = 3;
         */
        this.retainHeight = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseCommit().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseCommit().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseCommit().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseCommit, a, b);
    }
}
ResponseCommit.runtime = proto3;
ResponseCommit.typeName = "tendermint.abci.ResponseCommit";
ResponseCommit.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "retain_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message tendermint.abci.ResponseListSnapshots
 */
export class ResponseListSnapshots extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated tendermint.abci.Snapshot snapshots = 1;
         */
        this.snapshots = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseListSnapshots().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseListSnapshots().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseListSnapshots().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseListSnapshots, a, b);
    }
}
ResponseListSnapshots.runtime = proto3;
ResponseListSnapshots.typeName = "tendermint.abci.ResponseListSnapshots";
ResponseListSnapshots.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshots", kind: "message", T: Snapshot, repeated: true },
]);
/**
 * @generated from message tendermint.abci.ResponseOfferSnapshot
 */
export class ResponseOfferSnapshot extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: tendermint.abci.ResponseOfferSnapshot.Result result = 1;
         */
        this.result = ResponseOfferSnapshot_Result.UNKNOWN;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseOfferSnapshot().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseOfferSnapshot().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseOfferSnapshot().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseOfferSnapshot, a, b);
    }
}
ResponseOfferSnapshot.runtime = proto3;
ResponseOfferSnapshot.typeName = "tendermint.abci.ResponseOfferSnapshot";
ResponseOfferSnapshot.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResponseOfferSnapshot_Result) },
]);
/**
 * @generated from enum tendermint.abci.ResponseOfferSnapshot.Result
 */
export var ResponseOfferSnapshot_Result;
(function (ResponseOfferSnapshot_Result) {
    /**
     * Unknown result, abort all snapshot restoration
     *
     * @generated from enum value: UNKNOWN = 0;
     */
    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * Snapshot accepted, apply chunks
     *
     * @generated from enum value: ACCEPT = 1;
     */
    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["ACCEPT"] = 1] = "ACCEPT";
    /**
     * Abort all snapshot restoration
     *
     * @generated from enum value: ABORT = 2;
     */
    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["ABORT"] = 2] = "ABORT";
    /**
     * Reject this specific snapshot, try others
     *
     * @generated from enum value: REJECT = 3;
     */
    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["REJECT"] = 3] = "REJECT";
    /**
     * Reject all snapshots of this format, try others
     *
     * @generated from enum value: REJECT_FORMAT = 4;
     */
    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["REJECT_FORMAT"] = 4] = "REJECT_FORMAT";
    /**
     * Reject all snapshots from the sender(s), try others
     *
     * @generated from enum value: REJECT_SENDER = 5;
     */
    ResponseOfferSnapshot_Result[ResponseOfferSnapshot_Result["REJECT_SENDER"] = 5] = "REJECT_SENDER";
})(ResponseOfferSnapshot_Result || (ResponseOfferSnapshot_Result = {}));
// Retrieve enum metadata with: proto3.getEnumType(ResponseOfferSnapshot_Result)
proto3.util.setEnumType(ResponseOfferSnapshot_Result, "tendermint.abci.ResponseOfferSnapshot.Result", [
    { no: 0, name: "UNKNOWN" },
    { no: 1, name: "ACCEPT" },
    { no: 2, name: "ABORT" },
    { no: 3, name: "REJECT" },
    { no: 4, name: "REJECT_FORMAT" },
    { no: 5, name: "REJECT_SENDER" },
]);
/**
 * @generated from message tendermint.abci.ResponseLoadSnapshotChunk
 */
export class ResponseLoadSnapshotChunk extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes chunk = 1;
         */
        this.chunk = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseLoadSnapshotChunk().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseLoadSnapshotChunk().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseLoadSnapshotChunk().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseLoadSnapshotChunk, a, b);
    }
}
ResponseLoadSnapshotChunk.runtime = proto3;
ResponseLoadSnapshotChunk.typeName = "tendermint.abci.ResponseLoadSnapshotChunk";
ResponseLoadSnapshotChunk.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message tendermint.abci.ResponseApplySnapshotChunk
 */
export class ResponseApplySnapshotChunk extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: tendermint.abci.ResponseApplySnapshotChunk.Result result = 1;
         */
        this.result = ResponseApplySnapshotChunk_Result.UNKNOWN;
        /**
         * Chunks to refetch and reapply
         *
         * @generated from field: repeated uint32 refetch_chunks = 2;
         */
        this.refetchChunks = [];
        /**
         * Chunk senders to reject and ban
         *
         * @generated from field: repeated string reject_senders = 3;
         */
        this.rejectSenders = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseApplySnapshotChunk().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseApplySnapshotChunk().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseApplySnapshotChunk().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseApplySnapshotChunk, a, b);
    }
}
ResponseApplySnapshotChunk.runtime = proto3;
ResponseApplySnapshotChunk.typeName = "tendermint.abci.ResponseApplySnapshotChunk";
ResponseApplySnapshotChunk.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ResponseApplySnapshotChunk_Result) },
    { no: 2, name: "refetch_chunks", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 3, name: "reject_senders", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from enum tendermint.abci.ResponseApplySnapshotChunk.Result
 */
export var ResponseApplySnapshotChunk_Result;
(function (ResponseApplySnapshotChunk_Result) {
    /**
     * Unknown result, abort all snapshot restoration
     *
     * @generated from enum value: UNKNOWN = 0;
     */
    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * Chunk successfully accepted
     *
     * @generated from enum value: ACCEPT = 1;
     */
    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["ACCEPT"] = 1] = "ACCEPT";
    /**
     * Abort all snapshot restoration
     *
     * @generated from enum value: ABORT = 2;
     */
    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["ABORT"] = 2] = "ABORT";
    /**
     * Retry chunk (combine with refetch and reject)
     *
     * @generated from enum value: RETRY = 3;
     */
    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["RETRY"] = 3] = "RETRY";
    /**
     * Retry snapshot (combine with refetch and reject)
     *
     * @generated from enum value: RETRY_SNAPSHOT = 4;
     */
    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["RETRY_SNAPSHOT"] = 4] = "RETRY_SNAPSHOT";
    /**
     * Reject this snapshot, try others
     *
     * @generated from enum value: REJECT_SNAPSHOT = 5;
     */
    ResponseApplySnapshotChunk_Result[ResponseApplySnapshotChunk_Result["REJECT_SNAPSHOT"] = 5] = "REJECT_SNAPSHOT";
})(ResponseApplySnapshotChunk_Result || (ResponseApplySnapshotChunk_Result = {}));
// Retrieve enum metadata with: proto3.getEnumType(ResponseApplySnapshotChunk_Result)
proto3.util.setEnumType(ResponseApplySnapshotChunk_Result, "tendermint.abci.ResponseApplySnapshotChunk.Result", [
    { no: 0, name: "UNKNOWN" },
    { no: 1, name: "ACCEPT" },
    { no: 2, name: "ABORT" },
    { no: 3, name: "RETRY" },
    { no: 4, name: "RETRY_SNAPSHOT" },
    { no: 5, name: "REJECT_SNAPSHOT" },
]);
/**
 * @generated from message tendermint.abci.ResponsePrepareProposal
 */
export class ResponsePrepareProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated bytes txs = 1;
         */
        this.txs = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponsePrepareProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponsePrepareProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponsePrepareProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponsePrepareProposal, a, b);
    }
}
ResponsePrepareProposal.runtime = proto3;
ResponsePrepareProposal.typeName = "tendermint.abci.ResponsePrepareProposal";
ResponsePrepareProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "txs", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
]);
/**
 * @generated from message tendermint.abci.ResponseProcessProposal
 */
export class ResponseProcessProposal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: tendermint.abci.ResponseProcessProposal.ProposalStatus status = 1;
         */
        this.status = ResponseProcessProposal_ProposalStatus.UNKNOWN;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ResponseProcessProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ResponseProcessProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ResponseProcessProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ResponseProcessProposal, a, b);
    }
}
ResponseProcessProposal.runtime = proto3;
ResponseProcessProposal.typeName = "tendermint.abci.ResponseProcessProposal";
ResponseProcessProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ResponseProcessProposal_ProposalStatus) },
]);
/**
 * @generated from enum tendermint.abci.ResponseProcessProposal.ProposalStatus
 */
export var ResponseProcessProposal_ProposalStatus;
(function (ResponseProcessProposal_ProposalStatus) {
    /**
     * @generated from enum value: UNKNOWN = 0;
     */
    ResponseProcessProposal_ProposalStatus[ResponseProcessProposal_ProposalStatus["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * @generated from enum value: ACCEPT = 1;
     */
    ResponseProcessProposal_ProposalStatus[ResponseProcessProposal_ProposalStatus["ACCEPT"] = 1] = "ACCEPT";
    /**
     * @generated from enum value: REJECT = 2;
     */
    ResponseProcessProposal_ProposalStatus[ResponseProcessProposal_ProposalStatus["REJECT"] = 2] = "REJECT";
})(ResponseProcessProposal_ProposalStatus || (ResponseProcessProposal_ProposalStatus = {}));
// Retrieve enum metadata with: proto3.getEnumType(ResponseProcessProposal_ProposalStatus)
proto3.util.setEnumType(ResponseProcessProposal_ProposalStatus, "tendermint.abci.ResponseProcessProposal.ProposalStatus", [
    { no: 0, name: "UNKNOWN" },
    { no: 1, name: "ACCEPT" },
    { no: 2, name: "REJECT" },
]);
/**
 * @generated from message tendermint.abci.CommitInfo
 */
export class CommitInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 round = 1;
         */
        this.round = 0;
        /**
         * @generated from field: repeated tendermint.abci.VoteInfo votes = 2;
         */
        this.votes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CommitInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CommitInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CommitInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CommitInfo, a, b);
    }
}
CommitInfo.runtime = proto3;
CommitInfo.typeName = "tendermint.abci.CommitInfo";
CommitInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "votes", kind: "message", T: VoteInfo, repeated: true },
]);
/**
 * @generated from message tendermint.abci.ExtendedCommitInfo
 */
export class ExtendedCommitInfo extends Message {
    constructor(data) {
        super();
        /**
         * The round at which the block proposer decided in the previous height.
         *
         * @generated from field: int32 round = 1;
         */
        this.round = 0;
        /**
         * List of validators' addresses in the last validator set with their voting
         * information, including vote extensions.
         *
         * @generated from field: repeated tendermint.abci.ExtendedVoteInfo votes = 2;
         */
        this.votes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExtendedCommitInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExtendedCommitInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExtendedCommitInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ExtendedCommitInfo, a, b);
    }
}
ExtendedCommitInfo.runtime = proto3;
ExtendedCommitInfo.typeName = "tendermint.abci.ExtendedCommitInfo";
ExtendedCommitInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "votes", kind: "message", T: ExtendedVoteInfo, repeated: true },
]);
/**
 * Event allows application developers to attach additional information to
 * ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
 * Later, transactions may be queried using these events.
 *
 * @generated from message tendermint.abci.Event
 */
export class Event extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string type = 1;
         */
        this.type = "";
        /**
         * @generated from field: repeated tendermint.abci.EventAttribute attributes = 2;
         */
        this.attributes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Event().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Event().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Event().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Event, a, b);
    }
}
Event.runtime = proto3;
Event.typeName = "tendermint.abci.Event";
Event.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "attributes", kind: "message", T: EventAttribute, repeated: true },
]);
/**
 * EventAttribute is a single key-value pair, associated with an event.
 *
 * @generated from message tendermint.abci.EventAttribute
 */
export class EventAttribute extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string key = 1;
         */
        this.key = "";
        /**
         * @generated from field: string value = 2;
         */
        this.value = "";
        /**
         * nondeterministic
         *
         * @generated from field: bool index = 3;
         */
        this.index = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EventAttribute().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EventAttribute().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EventAttribute().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EventAttribute, a, b);
    }
}
EventAttribute.runtime = proto3;
EventAttribute.typeName = "tendermint.abci.EventAttribute";
EventAttribute.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "index", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * TxResult contains results of executing the transaction.
 *
 * One usage is indexing transaction results.
 *
 * @generated from message tendermint.abci.TxResult
 */
export class TxResult extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 height = 1;
         */
        this.height = protoInt64.zero;
        /**
         * @generated from field: uint32 index = 2;
         */
        this.index = 0;
        /**
         * @generated from field: bytes tx = 3;
         */
        this.tx = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TxResult().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TxResult().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TxResult().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TxResult, a, b);
    }
}
TxResult.runtime = proto3;
TxResult.typeName = "tendermint.abci.TxResult";
TxResult.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "tx", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "result", kind: "message", T: ResponseDeliverTx },
]);
/**
 * Validator
 *
 * @generated from message tendermint.abci.Validator
 */
export class Validator extends Message {
    constructor(data) {
        super();
        /**
         * The first 20 bytes of SHA256(public key)
         *
         * @generated from field: bytes address = 1;
         */
        this.address = new Uint8Array(0);
        /**
         * PubKey pub_key = 2 [(gogoproto.nullable)=false];
         *
         * The voting power
         *
         * @generated from field: int64 power = 3;
         */
        this.power = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Validator().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Validator().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Validator().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Validator, a, b);
    }
}
Validator.runtime = proto3;
Validator.typeName = "tendermint.abci.Validator";
Validator.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * ValidatorUpdate
 *
 * @generated from message tendermint.abci.ValidatorUpdate
 */
export class ValidatorUpdate extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 power = 2;
         */
        this.power = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ValidatorUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ValidatorUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ValidatorUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ValidatorUpdate, a, b);
    }
}
ValidatorUpdate.runtime = proto3;
ValidatorUpdate.typeName = "tendermint.abci.ValidatorUpdate";
ValidatorUpdate.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pub_key", kind: "message", T: PublicKey },
    { no: 2, name: "power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * VoteInfo
 *
 * @generated from message tendermint.abci.VoteInfo
 */
export class VoteInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool signed_last_block = 2;
         */
        this.signedLastBlock = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VoteInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VoteInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VoteInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VoteInfo, a, b);
    }
}
VoteInfo.runtime = proto3;
VoteInfo.typeName = "tendermint.abci.VoteInfo";
VoteInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "message", T: Validator },
    { no: 2, name: "signed_last_block", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message tendermint.abci.ExtendedVoteInfo
 */
export class ExtendedVoteInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool signed_last_block = 2;
         */
        this.signedLastBlock = false;
        /**
         * Reserved for future use
         *
         * @generated from field: bytes vote_extension = 3;
         */
        this.voteExtension = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExtendedVoteInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExtendedVoteInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExtendedVoteInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ExtendedVoteInfo, a, b);
    }
}
ExtendedVoteInfo.runtime = proto3;
ExtendedVoteInfo.typeName = "tendermint.abci.ExtendedVoteInfo";
ExtendedVoteInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "message", T: Validator },
    { no: 2, name: "signed_last_block", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "vote_extension", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * @generated from message tendermint.abci.Misbehavior
 */
export class Misbehavior extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: tendermint.abci.MisbehaviorType type = 1;
         */
        this.type = MisbehaviorType.UNKNOWN;
        /**
         * The height when the offense occurred
         *
         * @generated from field: int64 height = 3;
         */
        this.height = protoInt64.zero;
        /**
         * Total voting power of the validator set in case the ABCI application does
         * not store historical validators.
         * https://github.com/tendermint/tendermint/issues/4581
         *
         * @generated from field: int64 total_voting_power = 5;
         */
        this.totalVotingPower = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Misbehavior().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Misbehavior().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Misbehavior().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Misbehavior, a, b);
    }
}
Misbehavior.runtime = proto3;
Misbehavior.typeName = "tendermint.abci.Misbehavior";
Misbehavior.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(MisbehaviorType) },
    { no: 2, name: "validator", kind: "message", T: Validator },
    { no: 3, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "time", kind: "message", T: Timestamp },
    { no: 5, name: "total_voting_power", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message tendermint.abci.Snapshot
 */
export class Snapshot extends Message {
    constructor(data) {
        super();
        /**
         * The height at which the snapshot was taken
         *
         * @generated from field: uint64 height = 1;
         */
        this.height = protoInt64.zero;
        /**
         * The application-specific snapshot format
         *
         * @generated from field: uint32 format = 2;
         */
        this.format = 0;
        /**
         * Number of chunks in the snapshot
         *
         * @generated from field: uint32 chunks = 3;
         */
        this.chunks = 0;
        /**
         * Arbitrary snapshot hash, equal only if identical
         *
         * @generated from field: bytes hash = 4;
         */
        this.hash = new Uint8Array(0);
        /**
         * Arbitrary application metadata
         *
         * @generated from field: bytes metadata = 5;
         */
        this.metadata = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Snapshot().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Snapshot().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Snapshot().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Snapshot, a, b);
    }
}
Snapshot.runtime = proto3;
Snapshot.typeName = "tendermint.abci.Snapshot";
Snapshot.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "format", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "chunks", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "metadata", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
//# sourceMappingURL=types_pb.js.map