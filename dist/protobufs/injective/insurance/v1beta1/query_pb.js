// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/insurance/v1beta1/query.proto (package injective.insurance.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { InsuranceFund, Params } from "./insurance_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { GenesisState } from "./genesis_pb.js";
/**
 * QueryInsuranceParamsRequest is the request type for the Query/InsuranceParams
 * RPC method.
 *
 * @generated from message injective.insurance.v1beta1.QueryInsuranceParamsRequest
 */
export class QueryInsuranceParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryInsuranceParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryInsuranceParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryInsuranceParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryInsuranceParamsRequest, a, b);
    }
}
QueryInsuranceParamsRequest.runtime = proto3;
QueryInsuranceParamsRequest.typeName = "injective.insurance.v1beta1.QueryInsuranceParamsRequest";
QueryInsuranceParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryInsuranceParamsRequest is the response type for the
 * Query/InsuranceParams RPC method.
 *
 * @generated from message injective.insurance.v1beta1.QueryInsuranceParamsResponse
 */
export class QueryInsuranceParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryInsuranceParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryInsuranceParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryInsuranceParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryInsuranceParamsResponse, a, b);
    }
}
QueryInsuranceParamsResponse.runtime = proto3;
QueryInsuranceParamsResponse.typeName = "injective.insurance.v1beta1.QueryInsuranceParamsResponse";
QueryInsuranceParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * QueryInsuranceFundRequest is the request type for the Query/InsuranceFunds
 * RPC method.
 *
 * @generated from message injective.insurance.v1beta1.QueryInsuranceFundRequest
 */
export class QueryInsuranceFundRequest extends Message {
    constructor(data) {
        super();
        /**
         * Market ID for the market
         *
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryInsuranceFundRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryInsuranceFundRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryInsuranceFundRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryInsuranceFundRequest, a, b);
    }
}
QueryInsuranceFundRequest.runtime = proto3;
QueryInsuranceFundRequest.typeName = "injective.insurance.v1beta1.QueryInsuranceFundRequest";
QueryInsuranceFundRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryInsuranceFundResponse is the response type for the Query/InsuranceFund
 * RPC method.
 *
 * @generated from message injective.insurance.v1beta1.QueryInsuranceFundResponse
 */
export class QueryInsuranceFundResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryInsuranceFundResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryInsuranceFundResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryInsuranceFundResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryInsuranceFundResponse, a, b);
    }
}
QueryInsuranceFundResponse.runtime = proto3;
QueryInsuranceFundResponse.typeName = "injective.insurance.v1beta1.QueryInsuranceFundResponse";
QueryInsuranceFundResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "fund", kind: "message", T: InsuranceFund },
]);
/**
 * QueryInsuranceFundsRequest is the request type for the Query/InsuranceFunds
 * RPC method.
 *
 * @generated from message injective.insurance.v1beta1.QueryInsuranceFundsRequest
 */
export class QueryInsuranceFundsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryInsuranceFundsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryInsuranceFundsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryInsuranceFundsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryInsuranceFundsRequest, a, b);
    }
}
QueryInsuranceFundsRequest.runtime = proto3;
QueryInsuranceFundsRequest.typeName = "injective.insurance.v1beta1.QueryInsuranceFundsRequest";
QueryInsuranceFundsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryInsuranceFundsResponse is the response type for the Query/InsuranceFunds
 * RPC method.
 *
 * @generated from message injective.insurance.v1beta1.QueryInsuranceFundsResponse
 */
export class QueryInsuranceFundsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.insurance.v1beta1.InsuranceFund funds = 1;
         */
        this.funds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryInsuranceFundsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryInsuranceFundsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryInsuranceFundsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryInsuranceFundsResponse, a, b);
    }
}
QueryInsuranceFundsResponse.runtime = proto3;
QueryInsuranceFundsResponse.typeName = "injective.insurance.v1beta1.QueryInsuranceFundsResponse";
QueryInsuranceFundsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "funds", kind: "message", T: InsuranceFund, repeated: true },
]);
/**
 * QueryEstimatedRedemptionsRequest is the request type for the
 * Query/EstimatedRedemptions RPC method.
 *
 * @generated from message injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest
 */
export class QueryEstimatedRedemptionsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string marketId = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: string address = 2;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryEstimatedRedemptionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryEstimatedRedemptionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryEstimatedRedemptionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryEstimatedRedemptionsRequest, a, b);
    }
}
QueryEstimatedRedemptionsRequest.runtime = proto3;
QueryEstimatedRedemptionsRequest.typeName = "injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest";
QueryEstimatedRedemptionsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "marketId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryEstimatedRedemptionsResponse is the response type for the
 * Query/EstimatedRedemptions RPC method.
 *
 * @generated from message injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse
 */
export class QueryEstimatedRedemptionsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
         */
        this.amount = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryEstimatedRedemptionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryEstimatedRedemptionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryEstimatedRedemptionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryEstimatedRedemptionsResponse, a, b);
    }
}
QueryEstimatedRedemptionsResponse.runtime = proto3;
QueryEstimatedRedemptionsResponse.typeName = "injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse";
QueryEstimatedRedemptionsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
]);
/**
 * QueryPendingRedemptionsRequest is the request type for the
 * Query/PendingRedemptions RPC method.
 *
 * @generated from message injective.insurance.v1beta1.QueryPendingRedemptionsRequest
 */
export class QueryPendingRedemptionsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string marketId = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: string address = 2;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPendingRedemptionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPendingRedemptionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPendingRedemptionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPendingRedemptionsRequest, a, b);
    }
}
QueryPendingRedemptionsRequest.runtime = proto3;
QueryPendingRedemptionsRequest.typeName = "injective.insurance.v1beta1.QueryPendingRedemptionsRequest";
QueryPendingRedemptionsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "marketId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryPendingRedemptionsResponse is the response type for the
 * Query/PendingRedemptions RPC method.
 *
 * @generated from message injective.insurance.v1beta1.QueryPendingRedemptionsResponse
 */
export class QueryPendingRedemptionsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
         */
        this.amount = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPendingRedemptionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPendingRedemptionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPendingRedemptionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPendingRedemptionsResponse, a, b);
    }
}
QueryPendingRedemptionsResponse.runtime = proto3;
QueryPendingRedemptionsResponse.typeName = "injective.insurance.v1beta1.QueryPendingRedemptionsResponse";
QueryPendingRedemptionsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
]);
/**
 * QueryModuleStateRequest is the request type for the
 * Query/InsuranceModuleState RPC method.
 *
 * @generated from message injective.insurance.v1beta1.QueryModuleStateRequest
 */
export class QueryModuleStateRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleStateRequest, a, b);
    }
}
QueryModuleStateRequest.runtime = proto3;
QueryModuleStateRequest.typeName = "injective.insurance.v1beta1.QueryModuleStateRequest";
QueryModuleStateRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryModuleStateResponse is the response type for the
 * Query/InsuranceModuleState RPC method.
 *
 * @generated from message injective.insurance.v1beta1.QueryModuleStateResponse
 */
export class QueryModuleStateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleStateResponse, a, b);
    }
}
QueryModuleStateResponse.runtime = proto3;
QueryModuleStateResponse.typeName = "injective.insurance.v1beta1.QueryModuleStateResponse";
QueryModuleStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: GenesisState },
]);
//# sourceMappingURL=query_pb.js.map