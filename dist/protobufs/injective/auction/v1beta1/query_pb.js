// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/auction/v1beta1/query.proto (package injective.auction.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./auction_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { GenesisState } from "./genesis_pb.js";
/**
 * QueryAuctionParamsRequest is the request type for the Query/AuctionParams RPC
 * method.
 *
 * @generated from message injective.auction.v1beta1.QueryAuctionParamsRequest
 */
export class QueryAuctionParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAuctionParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAuctionParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAuctionParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAuctionParamsRequest, a, b);
    }
}
QueryAuctionParamsRequest.runtime = proto3;
QueryAuctionParamsRequest.typeName = "injective.auction.v1beta1.QueryAuctionParamsRequest";
QueryAuctionParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryAuctionParamsRequest is the response type for the Query/AuctionParams
 * RPC method.
 *
 * @generated from message injective.auction.v1beta1.QueryAuctionParamsResponse
 */
export class QueryAuctionParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAuctionParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAuctionParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAuctionParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAuctionParamsResponse, a, b);
    }
}
QueryAuctionParamsResponse.runtime = proto3;
QueryAuctionParamsResponse.typeName = "injective.auction.v1beta1.QueryAuctionParamsResponse";
QueryAuctionParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * QueryCurrentAuctionBasketRequest is the request type for the
 * Query/CurrentAuctionBasket RPC method.
 *
 * @generated from message injective.auction.v1beta1.QueryCurrentAuctionBasketRequest
 */
export class QueryCurrentAuctionBasketRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryCurrentAuctionBasketRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryCurrentAuctionBasketRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryCurrentAuctionBasketRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryCurrentAuctionBasketRequest, a, b);
    }
}
QueryCurrentAuctionBasketRequest.runtime = proto3;
QueryCurrentAuctionBasketRequest.typeName = "injective.auction.v1beta1.QueryCurrentAuctionBasketRequest";
QueryCurrentAuctionBasketRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryCurrentAuctionBasketResponse is the response type for the
 * Query/CurrentAuctionBasket RPC method.
 *
 * @generated from message injective.auction.v1beta1.QueryCurrentAuctionBasketResponse
 */
export class QueryCurrentAuctionBasketResponse extends Message {
    constructor(data) {
        super();
        /**
         * amount describes the amount put on auction
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
         */
        this.amount = [];
        /**
         * auctionRound describes current auction round
         *
         * @generated from field: uint64 auctionRound = 2;
         */
        this.auctionRound = protoInt64.zero;
        /**
         * auctionClosingTime describes auction close time for the round
         *
         * @generated from field: int64 auctionClosingTime = 3;
         */
        this.auctionClosingTime = protoInt64.zero;
        /**
         * highestBidder describes highest bidder on current round
         *
         * @generated from field: string highestBidder = 4;
         */
        this.highestBidder = "";
        /**
         * highestBidAmount describes highest bid amount on current round
         *
         * @generated from field: string highestBidAmount = 5;
         */
        this.highestBidAmount = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryCurrentAuctionBasketResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryCurrentAuctionBasketResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryCurrentAuctionBasketResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryCurrentAuctionBasketResponse, a, b);
    }
}
QueryCurrentAuctionBasketResponse.runtime = proto3;
QueryCurrentAuctionBasketResponse.typeName = "injective.auction.v1beta1.QueryCurrentAuctionBasketResponse";
QueryCurrentAuctionBasketResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "auctionRound", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "auctionClosingTime", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "highestBidder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "highestBidAmount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryModuleStateRequest is the request type for the Query/AuctionModuleState
 * RPC method.
 *
 * @generated from message injective.auction.v1beta1.QueryModuleStateRequest
 */
export class QueryModuleStateRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleStateRequest, a, b);
    }
}
QueryModuleStateRequest.runtime = proto3;
QueryModuleStateRequest.typeName = "injective.auction.v1beta1.QueryModuleStateRequest";
QueryModuleStateRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryModuleStateResponse is the response type for the
 * Query/AuctionModuleState RPC method.
 *
 * @generated from message injective.auction.v1beta1.QueryModuleStateResponse
 */
export class QueryModuleStateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleStateResponse, a, b);
    }
}
QueryModuleStateResponse.runtime = proto3;
QueryModuleStateResponse.typeName = "injective.auction.v1beta1.QueryModuleStateResponse";
QueryModuleStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: GenesisState },
]);
//# sourceMappingURL=query_pb.js.map