// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/upgrade/v1beta1/query.proto (package cosmos.upgrade.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ModuleVersion, Plan } from "./upgrade_pb.js";
/**
 * QueryCurrentPlanRequest is the request type for the Query/CurrentPlan RPC
 * method.
 *
 * @generated from message cosmos.upgrade.v1beta1.QueryCurrentPlanRequest
 */
export class QueryCurrentPlanRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryCurrentPlanRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryCurrentPlanRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryCurrentPlanRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryCurrentPlanRequest, a, b);
    }
}
QueryCurrentPlanRequest.runtime = proto3;
QueryCurrentPlanRequest.typeName = "cosmos.upgrade.v1beta1.QueryCurrentPlanRequest";
QueryCurrentPlanRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC
 * method.
 *
 * @generated from message cosmos.upgrade.v1beta1.QueryCurrentPlanResponse
 */
export class QueryCurrentPlanResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryCurrentPlanResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryCurrentPlanResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryCurrentPlanResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryCurrentPlanResponse, a, b);
    }
}
QueryCurrentPlanResponse.runtime = proto3;
QueryCurrentPlanResponse.typeName = "cosmos.upgrade.v1beta1.QueryCurrentPlanResponse";
QueryCurrentPlanResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "plan", kind: "message", T: Plan },
]);
/**
 * QueryCurrentPlanRequest is the request type for the Query/AppliedPlan RPC
 * method.
 *
 * @generated from message cosmos.upgrade.v1beta1.QueryAppliedPlanRequest
 */
export class QueryAppliedPlanRequest extends Message {
    constructor(data) {
        super();
        /**
         * name is the name of the applied plan to query for.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAppliedPlanRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAppliedPlanRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAppliedPlanRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAppliedPlanRequest, a, b);
    }
}
QueryAppliedPlanRequest.runtime = proto3;
QueryAppliedPlanRequest.typeName = "cosmos.upgrade.v1beta1.QueryAppliedPlanRequest";
QueryAppliedPlanRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC
 * method.
 *
 * @generated from message cosmos.upgrade.v1beta1.QueryAppliedPlanResponse
 */
export class QueryAppliedPlanResponse extends Message {
    constructor(data) {
        super();
        /**
         * height is the block height at which the plan was applied.
         *
         * @generated from field: int64 height = 1;
         */
        this.height = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAppliedPlanResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAppliedPlanResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAppliedPlanResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAppliedPlanResponse, a, b);
    }
}
QueryAppliedPlanResponse.runtime = proto3;
QueryAppliedPlanResponse.typeName = "cosmos.upgrade.v1beta1.QueryAppliedPlanResponse";
QueryAppliedPlanResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * QueryUpgradedConsensusStateRequest is the request type for the Query/UpgradedConsensusState
 * RPC method.
 *
 * @generated from message cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest
 * @deprecated
 */
export class QueryUpgradedConsensusStateRequest extends Message {
    constructor(data) {
        super();
        /**
         * last height of the current chain must be sent in request
         * as this is the height under which next consensus state is stored
         *
         * @generated from field: int64 last_height = 1;
         */
        this.lastHeight = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUpgradedConsensusStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUpgradedConsensusStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUpgradedConsensusStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUpgradedConsensusStateRequest, a, b);
    }
}
QueryUpgradedConsensusStateRequest.runtime = proto3;
QueryUpgradedConsensusStateRequest.typeName = "cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest";
QueryUpgradedConsensusStateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "last_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState
 * RPC method.
 *
 * @generated from message cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse
 * @deprecated
 */
export class QueryUpgradedConsensusStateResponse extends Message {
    constructor(data) {
        super();
        /**
         * Since: cosmos-sdk 0.43
         *
         * @generated from field: bytes upgraded_consensus_state = 2;
         */
        this.upgradedConsensusState = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUpgradedConsensusStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUpgradedConsensusStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUpgradedConsensusStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUpgradedConsensusStateResponse, a, b);
    }
}
QueryUpgradedConsensusStateResponse.runtime = proto3;
QueryUpgradedConsensusStateResponse.typeName = "cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse";
QueryUpgradedConsensusStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "upgraded_consensus_state", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * QueryModuleVersionsRequest is the request type for the Query/ModuleVersions
 * RPC method.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from message cosmos.upgrade.v1beta1.QueryModuleVersionsRequest
 */
export class QueryModuleVersionsRequest extends Message {
    constructor(data) {
        super();
        /**
         * module_name is a field to query a specific module
         * consensus version from state. Leaving this empty will
         * fetch the full list of module versions from state
         *
         * @generated from field: string module_name = 1;
         */
        this.moduleName = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleVersionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleVersionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleVersionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleVersionsRequest, a, b);
    }
}
QueryModuleVersionsRequest.runtime = proto3;
QueryModuleVersionsRequest.typeName = "cosmos.upgrade.v1beta1.QueryModuleVersionsRequest";
QueryModuleVersionsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryModuleVersionsResponse is the response type for the Query/ModuleVersions
 * RPC method.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from message cosmos.upgrade.v1beta1.QueryModuleVersionsResponse
 */
export class QueryModuleVersionsResponse extends Message {
    constructor(data) {
        super();
        /**
         * module_versions is a list of module names with their consensus versions.
         *
         * @generated from field: repeated cosmos.upgrade.v1beta1.ModuleVersion module_versions = 1;
         */
        this.moduleVersions = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleVersionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleVersionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleVersionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleVersionsResponse, a, b);
    }
}
QueryModuleVersionsResponse.runtime = proto3;
QueryModuleVersionsResponse.typeName = "cosmos.upgrade.v1beta1.QueryModuleVersionsResponse";
QueryModuleVersionsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "module_versions", kind: "message", T: ModuleVersion, repeated: true },
]);
/**
 * QueryAuthorityRequest is the request type for Query/Authority
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.upgrade.v1beta1.QueryAuthorityRequest
 */
export class QueryAuthorityRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAuthorityRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAuthorityRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAuthorityRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAuthorityRequest, a, b);
    }
}
QueryAuthorityRequest.runtime = proto3;
QueryAuthorityRequest.typeName = "cosmos.upgrade.v1beta1.QueryAuthorityRequest";
QueryAuthorityRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryAuthorityResponse is the response type for Query/Authority
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.upgrade.v1beta1.QueryAuthorityResponse
 */
export class QueryAuthorityResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string address = 1;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAuthorityResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAuthorityResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAuthorityResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAuthorityResponse, a, b);
    }
}
QueryAuthorityResponse.runtime = proto3;
QueryAuthorityResponse.typeName = "cosmos.upgrade.v1beta1.QueryAuthorityResponse";
QueryAuthorityResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=query_pb.js.map