// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/lightclients/solomachine/v2/solomachine.proto (package ibc.lightclients.solomachine.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ConnectionEnd } from "../../../core/connection/v1/connection_pb.js";
import { Channel } from "../../../core/channel/v1/channel_pb.js";
/**
 * DataType defines the type of solo machine proof being created. This is done
 * to preserve uniqueness of different data sign byte encodings.
 *
 * @generated from enum ibc.lightclients.solomachine.v2.DataType
 */
export var DataType;
(function (DataType) {
    /**
     * Default State
     *
     * @generated from enum value: DATA_TYPE_UNINITIALIZED_UNSPECIFIED = 0;
     */
    DataType[DataType["UNINITIALIZED_UNSPECIFIED"] = 0] = "UNINITIALIZED_UNSPECIFIED";
    /**
     * Data type for client state verification
     *
     * @generated from enum value: DATA_TYPE_CLIENT_STATE = 1;
     */
    DataType[DataType["CLIENT_STATE"] = 1] = "CLIENT_STATE";
    /**
     * Data type for consensus state verification
     *
     * @generated from enum value: DATA_TYPE_CONSENSUS_STATE = 2;
     */
    DataType[DataType["CONSENSUS_STATE"] = 2] = "CONSENSUS_STATE";
    /**
     * Data type for connection state verification
     *
     * @generated from enum value: DATA_TYPE_CONNECTION_STATE = 3;
     */
    DataType[DataType["CONNECTION_STATE"] = 3] = "CONNECTION_STATE";
    /**
     * Data type for channel state verification
     *
     * @generated from enum value: DATA_TYPE_CHANNEL_STATE = 4;
     */
    DataType[DataType["CHANNEL_STATE"] = 4] = "CHANNEL_STATE";
    /**
     * Data type for packet commitment verification
     *
     * @generated from enum value: DATA_TYPE_PACKET_COMMITMENT = 5;
     */
    DataType[DataType["PACKET_COMMITMENT"] = 5] = "PACKET_COMMITMENT";
    /**
     * Data type for packet acknowledgement verification
     *
     * @generated from enum value: DATA_TYPE_PACKET_ACKNOWLEDGEMENT = 6;
     */
    DataType[DataType["PACKET_ACKNOWLEDGEMENT"] = 6] = "PACKET_ACKNOWLEDGEMENT";
    /**
     * Data type for packet receipt absence verification
     *
     * @generated from enum value: DATA_TYPE_PACKET_RECEIPT_ABSENCE = 7;
     */
    DataType[DataType["PACKET_RECEIPT_ABSENCE"] = 7] = "PACKET_RECEIPT_ABSENCE";
    /**
     * Data type for next sequence recv verification
     *
     * @generated from enum value: DATA_TYPE_NEXT_SEQUENCE_RECV = 8;
     */
    DataType[DataType["NEXT_SEQUENCE_RECV"] = 8] = "NEXT_SEQUENCE_RECV";
    /**
     * Data type for header verification
     *
     * @generated from enum value: DATA_TYPE_HEADER = 9;
     */
    DataType[DataType["HEADER"] = 9] = "HEADER";
})(DataType || (DataType = {}));
// Retrieve enum metadata with: proto3.getEnumType(DataType)
proto3.util.setEnumType(DataType, "ibc.lightclients.solomachine.v2.DataType", [
    { no: 0, name: "DATA_TYPE_UNINITIALIZED_UNSPECIFIED" },
    { no: 1, name: "DATA_TYPE_CLIENT_STATE" },
    { no: 2, name: "DATA_TYPE_CONSENSUS_STATE" },
    { no: 3, name: "DATA_TYPE_CONNECTION_STATE" },
    { no: 4, name: "DATA_TYPE_CHANNEL_STATE" },
    { no: 5, name: "DATA_TYPE_PACKET_COMMITMENT" },
    { no: 6, name: "DATA_TYPE_PACKET_ACKNOWLEDGEMENT" },
    { no: 7, name: "DATA_TYPE_PACKET_RECEIPT_ABSENCE" },
    { no: 8, name: "DATA_TYPE_NEXT_SEQUENCE_RECV" },
    { no: 9, name: "DATA_TYPE_HEADER" },
]);
/**
 * ClientState defines a solo machine client that tracks the current consensus
 * state and if the client is frozen.
 *
 * @generated from message ibc.lightclients.solomachine.v2.ClientState
 */
export class ClientState extends Message {
    constructor(data) {
        super();
        /**
         * latest sequence of the client state
         *
         * @generated from field: uint64 sequence = 1;
         */
        this.sequence = protoInt64.zero;
        /**
         * frozen sequence of the solo machine
         *
         * @generated from field: bool is_frozen = 2;
         */
        this.isFrozen = false;
        /**
         * when set to true, will allow governance to update a solo machine client.
         * The client will be unfrozen if it is frozen.
         *
         * @generated from field: bool allow_update_after_proposal = 4;
         */
        this.allowUpdateAfterProposal = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClientState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClientState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClientState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClientState, a, b);
    }
}
ClientState.runtime = proto3;
ClientState.typeName = "ibc.lightclients.solomachine.v2.ClientState";
ClientState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "is_frozen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "consensus_state", kind: "message", T: ConsensusState },
    { no: 4, name: "allow_update_after_proposal", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * ConsensusState defines a solo machine consensus state. The sequence of a
 * consensus state is contained in the "height" key used in storing the
 * consensus state.
 *
 * @generated from message ibc.lightclients.solomachine.v2.ConsensusState
 */
export class ConsensusState extends Message {
    constructor(data) {
        super();
        /**
         * diversifier allows the same public key to be re-used across different solo
         * machine clients (potentially on different chains) without being considered
         * misbehaviour.
         *
         * @generated from field: string diversifier = 2;
         */
        this.diversifier = "";
        /**
         * @generated from field: uint64 timestamp = 3;
         */
        this.timestamp = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConsensusState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConsensusState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConsensusState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConsensusState, a, b);
    }
}
ConsensusState.runtime = proto3;
ConsensusState.typeName = "ibc.lightclients.solomachine.v2.ConsensusState";
ConsensusState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "message", T: Any },
    { no: 2, name: "diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Header defines a solo machine consensus header
 *
 * @generated from message ibc.lightclients.solomachine.v2.Header
 */
export class Header extends Message {
    constructor(data) {
        super();
        /**
         * sequence to update solo machine public key at
         *
         * @generated from field: uint64 sequence = 1;
         */
        this.sequence = protoInt64.zero;
        /**
         * @generated from field: uint64 timestamp = 2;
         */
        this.timestamp = protoInt64.zero;
        /**
         * @generated from field: bytes signature = 3;
         */
        this.signature = new Uint8Array(0);
        /**
         * @generated from field: string new_diversifier = 5;
         */
        this.newDiversifier = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Header().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Header().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Header().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Header, a, b);
    }
}
Header.runtime = proto3;
Header.typeName = "ibc.lightclients.solomachine.v2.Header";
Header.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "new_public_key", kind: "message", T: Any },
    { no: 5, name: "new_diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Misbehaviour defines misbehaviour for a solo machine which consists
 * of a sequence and two signatures over different messages at that sequence.
 *
 * @generated from message ibc.lightclients.solomachine.v2.Misbehaviour
 */
export class Misbehaviour extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string client_id = 1;
         */
        this.clientId = "";
        /**
         * @generated from field: uint64 sequence = 2;
         */
        this.sequence = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Misbehaviour().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Misbehaviour().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Misbehaviour().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Misbehaviour, a, b);
    }
}
Misbehaviour.runtime = proto3;
Misbehaviour.typeName = "ibc.lightclients.solomachine.v2.Misbehaviour";
Misbehaviour.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "signature_one", kind: "message", T: SignatureAndData },
    { no: 4, name: "signature_two", kind: "message", T: SignatureAndData },
]);
/**
 * SignatureAndData contains a signature and the data signed over to create that
 * signature.
 *
 * @generated from message ibc.lightclients.solomachine.v2.SignatureAndData
 */
export class SignatureAndData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes signature = 1;
         */
        this.signature = new Uint8Array(0);
        /**
         * @generated from field: ibc.lightclients.solomachine.v2.DataType data_type = 2;
         */
        this.dataType = DataType.UNINITIALIZED_UNSPECIFIED;
        /**
         * @generated from field: bytes data = 3;
         */
        this.data = new Uint8Array(0);
        /**
         * @generated from field: uint64 timestamp = 4;
         */
        this.timestamp = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SignatureAndData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SignatureAndData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SignatureAndData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SignatureAndData, a, b);
    }
}
SignatureAndData.runtime = proto3;
SignatureAndData.typeName = "ibc.lightclients.solomachine.v2.SignatureAndData";
SignatureAndData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "data_type", kind: "enum", T: proto3.getEnumType(DataType) },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * TimestampedSignatureData contains the signature data and the timestamp of the
 * signature.
 *
 * @generated from message ibc.lightclients.solomachine.v2.TimestampedSignatureData
 */
export class TimestampedSignatureData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes signature_data = 1;
         */
        this.signatureData = new Uint8Array(0);
        /**
         * @generated from field: uint64 timestamp = 2;
         */
        this.timestamp = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TimestampedSignatureData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TimestampedSignatureData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TimestampedSignatureData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TimestampedSignatureData, a, b);
    }
}
TimestampedSignatureData.runtime = proto3;
TimestampedSignatureData.typeName = "ibc.lightclients.solomachine.v2.TimestampedSignatureData";
TimestampedSignatureData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "signature_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * SignBytes defines the signed bytes used for signature verification.
 *
 * @generated from message ibc.lightclients.solomachine.v2.SignBytes
 */
export class SignBytes extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 sequence = 1;
         */
        this.sequence = protoInt64.zero;
        /**
         * @generated from field: uint64 timestamp = 2;
         */
        this.timestamp = protoInt64.zero;
        /**
         * @generated from field: string diversifier = 3;
         */
        this.diversifier = "";
        /**
         * type of the data used
         *
         * @generated from field: ibc.lightclients.solomachine.v2.DataType data_type = 4;
         */
        this.dataType = DataType.UNINITIALIZED_UNSPECIFIED;
        /**
         * marshaled data
         *
         * @generated from field: bytes data = 5;
         */
        this.data = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SignBytes().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SignBytes().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SignBytes().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SignBytes, a, b);
    }
}
SignBytes.runtime = proto3;
SignBytes.typeName = "ibc.lightclients.solomachine.v2.SignBytes";
SignBytes.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "data_type", kind: "enum", T: proto3.getEnumType(DataType) },
    { no: 5, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * HeaderData returns the SignBytes data for update verification.
 *
 * @generated from message ibc.lightclients.solomachine.v2.HeaderData
 */
export class HeaderData extends Message {
    constructor(data) {
        super();
        /**
         * header diversifier
         *
         * @generated from field: string new_diversifier = 2;
         */
        this.newDiversifier = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HeaderData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HeaderData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HeaderData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(HeaderData, a, b);
    }
}
HeaderData.runtime = proto3;
HeaderData.typeName = "ibc.lightclients.solomachine.v2.HeaderData";
HeaderData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "new_pub_key", kind: "message", T: Any },
    { no: 2, name: "new_diversifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ClientStateData returns the SignBytes data for client state verification.
 *
 * @generated from message ibc.lightclients.solomachine.v2.ClientStateData
 */
export class ClientStateData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes path = 1;
         */
        this.path = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClientStateData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClientStateData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClientStateData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClientStateData, a, b);
    }
}
ClientStateData.runtime = proto3;
ClientStateData.typeName = "ibc.lightclients.solomachine.v2.ClientStateData";
ClientStateData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "client_state", kind: "message", T: Any },
]);
/**
 * ConsensusStateData returns the SignBytes data for consensus state
 * verification.
 *
 * @generated from message ibc.lightclients.solomachine.v2.ConsensusStateData
 */
export class ConsensusStateData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes path = 1;
         */
        this.path = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConsensusStateData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConsensusStateData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConsensusStateData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConsensusStateData, a, b);
    }
}
ConsensusStateData.runtime = proto3;
ConsensusStateData.typeName = "ibc.lightclients.solomachine.v2.ConsensusStateData";
ConsensusStateData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "consensus_state", kind: "message", T: Any },
]);
/**
 * ConnectionStateData returns the SignBytes data for connection state
 * verification.
 *
 * @generated from message ibc.lightclients.solomachine.v2.ConnectionStateData
 */
export class ConnectionStateData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes path = 1;
         */
        this.path = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConnectionStateData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConnectionStateData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConnectionStateData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConnectionStateData, a, b);
    }
}
ConnectionStateData.runtime = proto3;
ConnectionStateData.typeName = "ibc.lightclients.solomachine.v2.ConnectionStateData";
ConnectionStateData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "connection", kind: "message", T: ConnectionEnd },
]);
/**
 * ChannelStateData returns the SignBytes data for channel state
 * verification.
 *
 * @generated from message ibc.lightclients.solomachine.v2.ChannelStateData
 */
export class ChannelStateData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes path = 1;
         */
        this.path = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ChannelStateData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ChannelStateData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ChannelStateData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ChannelStateData, a, b);
    }
}
ChannelStateData.runtime = proto3;
ChannelStateData.typeName = "ibc.lightclients.solomachine.v2.ChannelStateData";
ChannelStateData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "channel", kind: "message", T: Channel },
]);
/**
 * PacketCommitmentData returns the SignBytes data for packet commitment
 * verification.
 *
 * @generated from message ibc.lightclients.solomachine.v2.PacketCommitmentData
 */
export class PacketCommitmentData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes path = 1;
         */
        this.path = new Uint8Array(0);
        /**
         * @generated from field: bytes commitment = 2;
         */
        this.commitment = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PacketCommitmentData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PacketCommitmentData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PacketCommitmentData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PacketCommitmentData, a, b);
    }
}
PacketCommitmentData.runtime = proto3;
PacketCommitmentData.typeName = "ibc.lightclients.solomachine.v2.PacketCommitmentData";
PacketCommitmentData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "commitment", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * PacketAcknowledgementData returns the SignBytes data for acknowledgement
 * verification.
 *
 * @generated from message ibc.lightclients.solomachine.v2.PacketAcknowledgementData
 */
export class PacketAcknowledgementData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes path = 1;
         */
        this.path = new Uint8Array(0);
        /**
         * @generated from field: bytes acknowledgement = 2;
         */
        this.acknowledgement = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PacketAcknowledgementData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PacketAcknowledgementData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PacketAcknowledgementData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PacketAcknowledgementData, a, b);
    }
}
PacketAcknowledgementData.runtime = proto3;
PacketAcknowledgementData.typeName = "ibc.lightclients.solomachine.v2.PacketAcknowledgementData";
PacketAcknowledgementData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "acknowledgement", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * PacketReceiptAbsenceData returns the SignBytes data for
 * packet receipt absence verification.
 *
 * @generated from message ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
 */
export class PacketReceiptAbsenceData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes path = 1;
         */
        this.path = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PacketReceiptAbsenceData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PacketReceiptAbsenceData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PacketReceiptAbsenceData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PacketReceiptAbsenceData, a, b);
    }
}
PacketReceiptAbsenceData.runtime = proto3;
PacketReceiptAbsenceData.typeName = "ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData";
PacketReceiptAbsenceData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 * NextSequenceRecvData returns the SignBytes data for verification of the next
 * sequence to be received.
 *
 * @generated from message ibc.lightclients.solomachine.v2.NextSequenceRecvData
 */
export class NextSequenceRecvData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes path = 1;
         */
        this.path = new Uint8Array(0);
        /**
         * @generated from field: uint64 next_seq_recv = 2;
         */
        this.nextSeqRecv = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NextSequenceRecvData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NextSequenceRecvData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NextSequenceRecvData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NextSequenceRecvData, a, b);
    }
}
NextSequenceRecvData.runtime = proto3;
NextSequenceRecvData.typeName = "ibc.lightclients.solomachine.v2.NextSequenceRecvData";
NextSequenceRecvData.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "next_seq_recv", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
//# sourceMappingURL=solomachine_pb.js.map