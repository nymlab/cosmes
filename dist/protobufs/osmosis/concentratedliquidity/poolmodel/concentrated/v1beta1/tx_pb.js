// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/concentratedliquidity/poolmodel/concentrated/v1beta1/tx.proto (package osmosis.concentratedliquidity.poolmodel.concentrated.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * ===================== MsgCreateConcentratedPool
 *
 * @generated from message osmosis.concentratedliquidity.poolmodel.concentrated.v1beta1.MsgCreateConcentratedPool
 */
export class MsgCreateConcentratedPool extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: string denom0 = 2;
         */
        this.denom0 = "";
        /**
         * @generated from field: string denom1 = 3;
         */
        this.denom1 = "";
        /**
         * @generated from field: uint64 tick_spacing = 4;
         */
        this.tickSpacing = protoInt64.zero;
        /**
         * @generated from field: string spread_factor = 5;
         */
        this.spreadFactor = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateConcentratedPool().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateConcentratedPool().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateConcentratedPool().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateConcentratedPool, a, b);
    }
}
MsgCreateConcentratedPool.runtime = proto3;
MsgCreateConcentratedPool.typeName = "osmosis.concentratedliquidity.poolmodel.concentrated.v1beta1.MsgCreateConcentratedPool";
MsgCreateConcentratedPool.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tick_spacing", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "spread_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Returns a unique poolID to identify the pool with.
 *
 * @generated from message osmosis.concentratedliquidity.poolmodel.concentrated.v1beta1.MsgCreateConcentratedPoolResponse
 */
export class MsgCreateConcentratedPoolResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateConcentratedPoolResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateConcentratedPoolResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateConcentratedPoolResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateConcentratedPoolResponse, a, b);
    }
}
MsgCreateConcentratedPoolResponse.runtime = proto3;
MsgCreateConcentratedPoolResponse.typeName = "osmosis.concentratedliquidity.poolmodel.concentrated.v1beta1.MsgCreateConcentratedPoolResponse";
MsgCreateConcentratedPoolResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
//# sourceMappingURL=tx_pb.js.map