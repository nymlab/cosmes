// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/insurance/v1beta1/insurance.proto (package injective.insurance.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { OracleType } from "../../oracle/v1beta1/oracle_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * @generated from message injective.insurance.v1beta1.Params
 */
export class Params extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Params().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Params().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Params().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Params, a, b);
    }
}
Params.runtime = proto3;
Params.typeName = "injective.insurance.v1beta1.Params";
Params.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "default_redemption_notice_period_duration", kind: "message", T: Duration },
]);
/**
 * @generated from message injective.insurance.v1beta1.InsuranceFund
 */
export class InsuranceFund extends Message {
    constructor(data) {
        super();
        /**
         * deposit denomination for the given insurance fund
         *
         * @generated from field: string deposit_denom = 1;
         */
        this.depositDenom = "";
        /**
         * insurance fund pool token denomination for the given insurance fund
         *
         * @generated from field: string insurance_pool_token_denom = 2;
         */
        this.insurancePoolTokenDenom = "";
        /**
         * balance of fund
         *
         * @generated from field: string balance = 4;
         */
        this.balance = "";
        /**
         * total share tokens minted
         *
         * @generated from field: string total_share = 5;
         */
        this.totalShare = "";
        /**
         * marketID of the derivative market
         *
         * @generated from field: string market_id = 6;
         */
        this.marketId = "";
        /**
         * ticker of the derivative market
         *
         * @generated from field: string market_ticker = 7;
         */
        this.marketTicker = "";
        /**
         * Oracle base currency of the derivative market OR the oracle symbol for the
         * binary options market.
         *
         * @generated from field: string oracle_base = 8;
         */
        this.oracleBase = "";
        /**
         * Oracle quote currency of the derivative market OR the oracle provider for
         * the binary options market.
         *
         * @generated from field: string oracle_quote = 9;
         */
        this.oracleQuote = "";
        /**
         * Oracle type of the binary options or derivative market
         *
         * @generated from field: injective.oracle.v1beta1.OracleType oracle_type = 10;
         */
        this.oracleType = OracleType.Unspecified;
        /**
         * Expiration time of the derivative market. Should be -1 for perpetual or -2
         * for binary options markets.
         *
         * @generated from field: int64 expiry = 11;
         */
        this.expiry = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InsuranceFund().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InsuranceFund().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InsuranceFund().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(InsuranceFund, a, b);
    }
}
InsuranceFund.runtime = proto3;
InsuranceFund.typeName = "injective.insurance.v1beta1.InsuranceFund";
InsuranceFund.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "deposit_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "insurance_pool_token_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "redemption_notice_period_duration", kind: "message", T: Duration },
    { no: 4, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "total_share", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "market_ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "oracle_base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "oracle_quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "oracle_type", kind: "enum", T: proto3.getEnumType(OracleType) },
    { no: 11, name: "expiry", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message injective.insurance.v1beta1.RedemptionSchedule
 */
export class RedemptionSchedule extends Message {
    constructor(data) {
        super();
        /**
         * id of redemption schedule
         *
         * @generated from field: uint64 id = 1;
         */
        this.id = protoInt64.zero;
        /**
         * marketId of insurance fund for the redemption
         *
         * @generated from field: string marketId = 2;
         */
        this.marketId = "";
        /**
         * address of the redeemer
         *
         * @generated from field: string redeemer = 3;
         */
        this.redeemer = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RedemptionSchedule().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RedemptionSchedule().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RedemptionSchedule().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RedemptionSchedule, a, b);
    }
}
RedemptionSchedule.runtime = proto3;
RedemptionSchedule.typeName = "injective.insurance.v1beta1.RedemptionSchedule";
RedemptionSchedule.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "marketId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "redeemer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "claimable_redemption_time", kind: "message", T: Timestamp },
    { no: 5, name: "redemption_amount", kind: "message", T: Coin },
]);
//# sourceMappingURL=insurance_pb.js.map