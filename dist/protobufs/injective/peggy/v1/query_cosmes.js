// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file injective/peggy/v1/query.proto (package injective.peggy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { MissingNoncesRequest, MissingNoncesResponse, QueryBatchConfirmsRequest, QueryBatchConfirmsResponse, QueryBatchFeeRequest, QueryBatchFeeResponse, QueryBatchRequestByNonceRequest, QueryBatchRequestByNonceResponse, QueryCurrentValsetRequest, QueryCurrentValsetResponse, QueryDelegateKeysByEthAddress, QueryDelegateKeysByEthAddressResponse, QueryDelegateKeysByOrchestratorAddress, QueryDelegateKeysByOrchestratorAddressResponse, QueryDelegateKeysByValidatorAddress, QueryDelegateKeysByValidatorAddressResponse, QueryDenomToERC20Request, QueryDenomToERC20Response, QueryERC20ToDenomRequest, QueryERC20ToDenomResponse, QueryLastEventByAddrRequest, QueryLastEventByAddrResponse, QueryLastPendingBatchRequestByAddrRequest, QueryLastPendingBatchRequestByAddrResponse, QueryLastPendingValsetRequestByAddrRequest, QueryLastPendingValsetRequestByAddrResponse, QueryLastValsetRequestsRequest, QueryLastValsetRequestsResponse, QueryModuleStateRequest, QueryModuleStateResponse, QueryOutgoingTxBatchesRequest, QueryOutgoingTxBatchesResponse, QueryParamsRequest, QueryParamsResponse, QueryPendingSendToEth, QueryPendingSendToEthResponse, QueryValsetConfirmRequest, QueryValsetConfirmResponse, QueryValsetConfirmsByNonceRequest, QueryValsetConfirmsByNonceResponse, QueryValsetRequestRequest, QueryValsetRequestResponse } from "./query_pb.js";
const TYPE_NAME = "injective.peggy.v1.Query";
/**
 * Deployments queries deployments
 *
 * @generated from rpc injective.peggy.v1.Query.Params
 */
export const QueryParamsService = {
    typeName: TYPE_NAME,
    method: "Params",
    Request: QueryParamsRequest,
    Response: QueryParamsResponse,
};
/**
 * valset
 *
 * @generated from rpc injective.peggy.v1.Query.CurrentValset
 */
export const QueryCurrentValsetService = {
    typeName: TYPE_NAME,
    method: "CurrentValset",
    Request: QueryCurrentValsetRequest,
    Response: QueryCurrentValsetResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.ValsetRequest
 */
export const QueryValsetRequestService = {
    typeName: TYPE_NAME,
    method: "ValsetRequest",
    Request: QueryValsetRequestRequest,
    Response: QueryValsetRequestResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.ValsetConfirm
 */
export const QueryValsetConfirmService = {
    typeName: TYPE_NAME,
    method: "ValsetConfirm",
    Request: QueryValsetConfirmRequest,
    Response: QueryValsetConfirmResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.ValsetConfirmsByNonce
 */
export const QueryValsetConfirmsByNonceService = {
    typeName: TYPE_NAME,
    method: "ValsetConfirmsByNonce",
    Request: QueryValsetConfirmsByNonceRequest,
    Response: QueryValsetConfirmsByNonceResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.LastValsetRequests
 */
export const QueryLastValsetRequestsService = {
    typeName: TYPE_NAME,
    method: "LastValsetRequests",
    Request: QueryLastValsetRequestsRequest,
    Response: QueryLastValsetRequestsResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.LastPendingValsetRequestByAddr
 */
export const QueryLastPendingValsetRequestByAddrService = {
    typeName: TYPE_NAME,
    method: "LastPendingValsetRequestByAddr",
    Request: QueryLastPendingValsetRequestByAddrRequest,
    Response: QueryLastPendingValsetRequestByAddrResponse,
};
/**
 * claim
 *
 * @generated from rpc injective.peggy.v1.Query.LastEventByAddr
 */
export const QueryLastEventByAddrService = {
    typeName: TYPE_NAME,
    method: "LastEventByAddr",
    Request: QueryLastEventByAddrRequest,
    Response: QueryLastEventByAddrResponse,
};
/**
 * batch
 *
 * @generated from rpc injective.peggy.v1.Query.GetPendingSendToEth
 */
export const QueryGetPendingSendToEthService = {
    typeName: TYPE_NAME,
    method: "GetPendingSendToEth",
    Request: QueryPendingSendToEth,
    Response: QueryPendingSendToEthResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.BatchFees
 */
export const QueryBatchFeesService = {
    typeName: TYPE_NAME,
    method: "BatchFees",
    Request: QueryBatchFeeRequest,
    Response: QueryBatchFeeResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.OutgoingTxBatches
 */
export const QueryOutgoingTxBatchesService = {
    typeName: TYPE_NAME,
    method: "OutgoingTxBatches",
    Request: QueryOutgoingTxBatchesRequest,
    Response: QueryOutgoingTxBatchesResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.LastPendingBatchRequestByAddr
 */
export const QueryLastPendingBatchRequestByAddrService = {
    typeName: TYPE_NAME,
    method: "LastPendingBatchRequestByAddr",
    Request: QueryLastPendingBatchRequestByAddrRequest,
    Response: QueryLastPendingBatchRequestByAddrResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.BatchRequestByNonce
 */
export const QueryBatchRequestByNonceService = {
    typeName: TYPE_NAME,
    method: "BatchRequestByNonce",
    Request: QueryBatchRequestByNonceRequest,
    Response: QueryBatchRequestByNonceResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.BatchConfirms
 */
export const QueryBatchConfirmsService = {
    typeName: TYPE_NAME,
    method: "BatchConfirms",
    Request: QueryBatchConfirmsRequest,
    Response: QueryBatchConfirmsResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.ERC20ToDenom
 */
export const QueryERC20ToDenomService = {
    typeName: TYPE_NAME,
    method: "ERC20ToDenom",
    Request: QueryERC20ToDenomRequest,
    Response: QueryERC20ToDenomResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.DenomToERC20
 */
export const QueryDenomToERC20Service = {
    typeName: TYPE_NAME,
    method: "DenomToERC20",
    Request: QueryDenomToERC20Request,
    Response: QueryDenomToERC20Response,
};
/**
 * @generated from rpc injective.peggy.v1.Query.GetDelegateKeyByValidator
 */
export const QueryGetDelegateKeyByValidatorService = {
    typeName: TYPE_NAME,
    method: "GetDelegateKeyByValidator",
    Request: QueryDelegateKeysByValidatorAddress,
    Response: QueryDelegateKeysByValidatorAddressResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.GetDelegateKeyByEth
 */
export const QueryGetDelegateKeyByEthService = {
    typeName: TYPE_NAME,
    method: "GetDelegateKeyByEth",
    Request: QueryDelegateKeysByEthAddress,
    Response: QueryDelegateKeysByEthAddressResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.GetDelegateKeyByOrchestrator
 */
export const QueryGetDelegateKeyByOrchestratorService = {
    typeName: TYPE_NAME,
    method: "GetDelegateKeyByOrchestrator",
    Request: QueryDelegateKeysByOrchestratorAddress,
    Response: QueryDelegateKeysByOrchestratorAddressResponse,
};
/**
 * Retrieves the entire peggy module's state
 *
 * @generated from rpc injective.peggy.v1.Query.PeggyModuleState
 */
export const QueryPeggyModuleStateService = {
    typeName: TYPE_NAME,
    method: "PeggyModuleState",
    Request: QueryModuleStateRequest,
    Response: QueryModuleStateResponse,
};
/**
 * @generated from rpc injective.peggy.v1.Query.MissingPeggoNonces
 */
export const QueryMissingPeggoNoncesService = {
    typeName: TYPE_NAME,
    method: "MissingPeggoNonces",
    Request: MissingNoncesRequest,
    Response: MissingNoncesResponse,
};
//# sourceMappingURL=query_cosmes.js.map