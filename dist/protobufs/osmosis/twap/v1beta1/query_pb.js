// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/twap/v1beta1/query.proto (package osmosis.twap.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";
/**
 * @generated from message osmosis.twap.v1beta1.ArithmeticTwapRequest
 */
export class ArithmeticTwapRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        /**
         * @generated from field: string base_asset = 2;
         */
        this.baseAsset = "";
        /**
         * @generated from field: string quote_asset = 3;
         */
        this.quoteAsset = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ArithmeticTwapRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ArithmeticTwapRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ArithmeticTwapRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ArithmeticTwapRequest, a, b);
    }
}
ArithmeticTwapRequest.runtime = proto3;
ArithmeticTwapRequest.typeName = "osmosis.twap.v1beta1.ArithmeticTwapRequest";
ArithmeticTwapRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "base_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "start_time", kind: "message", T: Timestamp },
    { no: 5, name: "end_time", kind: "message", T: Timestamp },
]);
/**
 * @generated from message osmosis.twap.v1beta1.ArithmeticTwapResponse
 */
export class ArithmeticTwapResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string arithmetic_twap = 1;
         */
        this.arithmeticTwap = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ArithmeticTwapResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ArithmeticTwapResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ArithmeticTwapResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ArithmeticTwapResponse, a, b);
    }
}
ArithmeticTwapResponse.runtime = proto3;
ArithmeticTwapResponse.typeName = "osmosis.twap.v1beta1.ArithmeticTwapResponse";
ArithmeticTwapResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "arithmetic_twap", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.twap.v1beta1.ArithmeticTwapToNowRequest
 */
export class ArithmeticTwapToNowRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        /**
         * @generated from field: string base_asset = 2;
         */
        this.baseAsset = "";
        /**
         * @generated from field: string quote_asset = 3;
         */
        this.quoteAsset = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ArithmeticTwapToNowRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ArithmeticTwapToNowRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ArithmeticTwapToNowRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ArithmeticTwapToNowRequest, a, b);
    }
}
ArithmeticTwapToNowRequest.runtime = proto3;
ArithmeticTwapToNowRequest.typeName = "osmosis.twap.v1beta1.ArithmeticTwapToNowRequest";
ArithmeticTwapToNowRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "base_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "start_time", kind: "message", T: Timestamp },
]);
/**
 * @generated from message osmosis.twap.v1beta1.ArithmeticTwapToNowResponse
 */
export class ArithmeticTwapToNowResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string arithmetic_twap = 1;
         */
        this.arithmeticTwap = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ArithmeticTwapToNowResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ArithmeticTwapToNowResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ArithmeticTwapToNowResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ArithmeticTwapToNowResponse, a, b);
    }
}
ArithmeticTwapToNowResponse.runtime = proto3;
ArithmeticTwapToNowResponse.typeName = "osmosis.twap.v1beta1.ArithmeticTwapToNowResponse";
ArithmeticTwapToNowResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "arithmetic_twap", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.twap.v1beta1.GeometricTwapRequest
 */
export class GeometricTwapRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        /**
         * @generated from field: string base_asset = 2;
         */
        this.baseAsset = "";
        /**
         * @generated from field: string quote_asset = 3;
         */
        this.quoteAsset = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeometricTwapRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeometricTwapRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeometricTwapRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GeometricTwapRequest, a, b);
    }
}
GeometricTwapRequest.runtime = proto3;
GeometricTwapRequest.typeName = "osmosis.twap.v1beta1.GeometricTwapRequest";
GeometricTwapRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "base_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "start_time", kind: "message", T: Timestamp },
    { no: 5, name: "end_time", kind: "message", T: Timestamp },
]);
/**
 * @generated from message osmosis.twap.v1beta1.GeometricTwapResponse
 */
export class GeometricTwapResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string geometric_twap = 1;
         */
        this.geometricTwap = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeometricTwapResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeometricTwapResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeometricTwapResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GeometricTwapResponse, a, b);
    }
}
GeometricTwapResponse.runtime = proto3;
GeometricTwapResponse.typeName = "osmosis.twap.v1beta1.GeometricTwapResponse";
GeometricTwapResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "geometric_twap", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.twap.v1beta1.GeometricTwapToNowRequest
 */
export class GeometricTwapToNowRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        /**
         * @generated from field: string base_asset = 2;
         */
        this.baseAsset = "";
        /**
         * @generated from field: string quote_asset = 3;
         */
        this.quoteAsset = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeometricTwapToNowRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeometricTwapToNowRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeometricTwapToNowRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GeometricTwapToNowRequest, a, b);
    }
}
GeometricTwapToNowRequest.runtime = proto3;
GeometricTwapToNowRequest.typeName = "osmosis.twap.v1beta1.GeometricTwapToNowRequest";
GeometricTwapToNowRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "base_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "start_time", kind: "message", T: Timestamp },
]);
/**
 * @generated from message osmosis.twap.v1beta1.GeometricTwapToNowResponse
 */
export class GeometricTwapToNowResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string geometric_twap = 1;
         */
        this.geometricTwap = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GeometricTwapToNowResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GeometricTwapToNowResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GeometricTwapToNowResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GeometricTwapToNowResponse, a, b);
    }
}
GeometricTwapToNowResponse.runtime = proto3;
GeometricTwapToNowResponse.typeName = "osmosis.twap.v1beta1.GeometricTwapToNowResponse";
GeometricTwapToNowResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "geometric_twap", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.twap.v1beta1.ParamsRequest
 */
export class ParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ParamsRequest, a, b);
    }
}
ParamsRequest.runtime = proto3;
ParamsRequest.typeName = "osmosis.twap.v1beta1.ParamsRequest";
ParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.twap.v1beta1.ParamsResponse
 */
export class ParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ParamsResponse, a, b);
    }
}
ParamsResponse.runtime = proto3;
ParamsResponse.typeName = "osmosis.twap.v1beta1.ParamsResponse";
ParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
//# sourceMappingURL=query_pb.js.map