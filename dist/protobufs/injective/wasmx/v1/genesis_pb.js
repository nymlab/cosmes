// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/wasmx/v1/genesis.proto (package injective.wasmx.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params, RegisteredContract } from "./wasmx_pb.js";
/**
 * @generated from message injective.wasmx.v1.RegisteredContractWithAddress
 */
export class RegisteredContractWithAddress extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string address = 1;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisteredContractWithAddress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisteredContractWithAddress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisteredContractWithAddress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RegisteredContractWithAddress, a, b);
    }
}
RegisteredContractWithAddress.runtime = proto3;
RegisteredContractWithAddress.typeName = "injective.wasmx.v1.RegisteredContractWithAddress";
RegisteredContractWithAddress.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "registered_contract", kind: "message", T: RegisteredContract },
]);
/**
 * GenesisState defines the wasmx module's genesis state.
 *
 * @generated from message injective.wasmx.v1.GenesisState
 */
export class GenesisState extends Message {
    constructor(data) {
        super();
        /**
         * registered_contracts is an array containing the genesis registered
         * contracts
         *
         * @generated from field: repeated injective.wasmx.v1.RegisteredContractWithAddress registered_contracts = 2;
         */
        this.registeredContracts = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GenesisState, a, b);
    }
}
GenesisState.runtime = proto3;
GenesisState.typeName = "injective.wasmx.v1.GenesisState";
GenesisState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "registered_contracts", kind: "message", T: RegisteredContractWithAddress, repeated: true },
]);
//# sourceMappingURL=genesis_pb.js.map