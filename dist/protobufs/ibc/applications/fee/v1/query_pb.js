// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/applications/fee/v1/query.proto (package ibc.applications.fee.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { IdentifiedPacketFees } from "./fee_pb.js";
import { PacketId } from "../../../core/channel/v1/channel_pb.js";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";
import { FeeEnabledChannel } from "./genesis_pb.js";
/**
 * QueryIncentivizedPacketsRequest defines the request type for the IncentivizedPackets rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryIncentivizedPacketsRequest
 */
export class QueryIncentivizedPacketsRequest extends Message {
    constructor(data) {
        super();
        /**
         * block height at which to query
         *
         * @generated from field: uint64 query_height = 2;
         */
        this.queryHeight = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryIncentivizedPacketsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryIncentivizedPacketsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryIncentivizedPacketsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryIncentivizedPacketsRequest, a, b);
    }
}
QueryIncentivizedPacketsRequest.runtime = proto3;
QueryIncentivizedPacketsRequest.typeName = "ibc.applications.fee.v1.QueryIncentivizedPacketsRequest";
QueryIncentivizedPacketsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "query_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryIncentivizedPacketsResponse defines the response type for the IncentivizedPackets rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryIncentivizedPacketsResponse
 */
export class QueryIncentivizedPacketsResponse extends Message {
    constructor(data) {
        super();
        /**
         * list of identified fees for incentivized packets
         *
         * @generated from field: repeated ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1;
         */
        this.incentivizedPackets = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryIncentivizedPacketsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryIncentivizedPacketsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryIncentivizedPacketsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryIncentivizedPacketsResponse, a, b);
    }
}
QueryIncentivizedPacketsResponse.runtime = proto3;
QueryIncentivizedPacketsResponse.typeName = "ibc.applications.fee.v1.QueryIncentivizedPacketsResponse";
QueryIncentivizedPacketsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "incentivized_packets", kind: "message", T: IdentifiedPacketFees, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryIncentivizedPacketRequest defines the request type for the IncentivizedPacket rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryIncentivizedPacketRequest
 */
export class QueryIncentivizedPacketRequest extends Message {
    constructor(data) {
        super();
        /**
         * block height at which to query
         *
         * @generated from field: uint64 query_height = 2;
         */
        this.queryHeight = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryIncentivizedPacketRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryIncentivizedPacketRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryIncentivizedPacketRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryIncentivizedPacketRequest, a, b);
    }
}
QueryIncentivizedPacketRequest.runtime = proto3;
QueryIncentivizedPacketRequest.typeName = "ibc.applications.fee.v1.QueryIncentivizedPacketRequest";
QueryIncentivizedPacketRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "packet_id", kind: "message", T: PacketId },
    { no: 2, name: "query_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryIncentivizedPacketsResponse defines the response type for the IncentivizedPacket rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryIncentivizedPacketResponse
 */
export class QueryIncentivizedPacketResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryIncentivizedPacketResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryIncentivizedPacketResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryIncentivizedPacketResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryIncentivizedPacketResponse, a, b);
    }
}
QueryIncentivizedPacketResponse.runtime = proto3;
QueryIncentivizedPacketResponse.typeName = "ibc.applications.fee.v1.QueryIncentivizedPacketResponse";
QueryIncentivizedPacketResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "incentivized_packet", kind: "message", T: IdentifiedPacketFees },
]);
/**
 * QueryIncentivizedPacketsForChannelRequest defines the request type for querying for all incentivized packets
 * for a specific channel
 *
 * @generated from message ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest
 */
export class QueryIncentivizedPacketsForChannelRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string port_id = 2;
         */
        this.portId = "";
        /**
         * @generated from field: string channel_id = 3;
         */
        this.channelId = "";
        /**
         * Height to query at
         *
         * @generated from field: uint64 query_height = 4;
         */
        this.queryHeight = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryIncentivizedPacketsForChannelRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryIncentivizedPacketsForChannelRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryIncentivizedPacketsForChannelRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryIncentivizedPacketsForChannelRequest, a, b);
    }
}
QueryIncentivizedPacketsForChannelRequest.runtime = proto3;
QueryIncentivizedPacketsForChannelRequest.typeName = "ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest";
QueryIncentivizedPacketsForChannelRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "query_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryIncentivizedPacketsResponse defines the response type for the incentivized packets RPC
 *
 * @generated from message ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse
 */
export class QueryIncentivizedPacketsForChannelResponse extends Message {
    constructor(data) {
        super();
        /**
         * Map of all incentivized_packets
         *
         * @generated from field: repeated ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1;
         */
        this.incentivizedPackets = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryIncentivizedPacketsForChannelResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryIncentivizedPacketsForChannelResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryIncentivizedPacketsForChannelResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryIncentivizedPacketsForChannelResponse, a, b);
    }
}
QueryIncentivizedPacketsForChannelResponse.runtime = proto3;
QueryIncentivizedPacketsForChannelResponse.typeName = "ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse";
QueryIncentivizedPacketsForChannelResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "incentivized_packets", kind: "message", T: IdentifiedPacketFees, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryTotalRecvFeesRequest defines the request type for the TotalRecvFees rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryTotalRecvFeesRequest
 */
export class QueryTotalRecvFeesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryTotalRecvFeesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryTotalRecvFeesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryTotalRecvFeesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryTotalRecvFeesRequest, a, b);
    }
}
QueryTotalRecvFeesRequest.runtime = proto3;
QueryTotalRecvFeesRequest.typeName = "ibc.applications.fee.v1.QueryTotalRecvFeesRequest";
QueryTotalRecvFeesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "packet_id", kind: "message", T: PacketId },
]);
/**
 * QueryTotalRecvFeesResponse defines the response type for the TotalRecvFees rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryTotalRecvFeesResponse
 */
export class QueryTotalRecvFeesResponse extends Message {
    constructor(data) {
        super();
        /**
         * the total packet receive fees
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin recv_fees = 1;
         */
        this.recvFees = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryTotalRecvFeesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryTotalRecvFeesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryTotalRecvFeesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryTotalRecvFeesResponse, a, b);
    }
}
QueryTotalRecvFeesResponse.runtime = proto3;
QueryTotalRecvFeesResponse.typeName = "ibc.applications.fee.v1.QueryTotalRecvFeesResponse";
QueryTotalRecvFeesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "recv_fees", kind: "message", T: Coin, repeated: true },
]);
/**
 * QueryTotalAckFeesRequest defines the request type for the TotalAckFees rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryTotalAckFeesRequest
 */
export class QueryTotalAckFeesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryTotalAckFeesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryTotalAckFeesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryTotalAckFeesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryTotalAckFeesRequest, a, b);
    }
}
QueryTotalAckFeesRequest.runtime = proto3;
QueryTotalAckFeesRequest.typeName = "ibc.applications.fee.v1.QueryTotalAckFeesRequest";
QueryTotalAckFeesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "packet_id", kind: "message", T: PacketId },
]);
/**
 * QueryTotalAckFeesResponse defines the response type for the TotalAckFees rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryTotalAckFeesResponse
 */
export class QueryTotalAckFeesResponse extends Message {
    constructor(data) {
        super();
        /**
         * the total packet acknowledgement fees
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin ack_fees = 1;
         */
        this.ackFees = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryTotalAckFeesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryTotalAckFeesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryTotalAckFeesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryTotalAckFeesResponse, a, b);
    }
}
QueryTotalAckFeesResponse.runtime = proto3;
QueryTotalAckFeesResponse.typeName = "ibc.applications.fee.v1.QueryTotalAckFeesResponse";
QueryTotalAckFeesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "ack_fees", kind: "message", T: Coin, repeated: true },
]);
/**
 * QueryTotalTimeoutFeesRequest defines the request type for the TotalTimeoutFees rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest
 */
export class QueryTotalTimeoutFeesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryTotalTimeoutFeesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryTotalTimeoutFeesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryTotalTimeoutFeesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryTotalTimeoutFeesRequest, a, b);
    }
}
QueryTotalTimeoutFeesRequest.runtime = proto3;
QueryTotalTimeoutFeesRequest.typeName = "ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest";
QueryTotalTimeoutFeesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "packet_id", kind: "message", T: PacketId },
]);
/**
 * QueryTotalTimeoutFeesResponse defines the response type for the TotalTimeoutFees rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse
 */
export class QueryTotalTimeoutFeesResponse extends Message {
    constructor(data) {
        super();
        /**
         * the total packet timeout fees
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin timeout_fees = 1;
         */
        this.timeoutFees = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryTotalTimeoutFeesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryTotalTimeoutFeesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryTotalTimeoutFeesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryTotalTimeoutFeesResponse, a, b);
    }
}
QueryTotalTimeoutFeesResponse.runtime = proto3;
QueryTotalTimeoutFeesResponse.typeName = "ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse";
QueryTotalTimeoutFeesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "timeout_fees", kind: "message", T: Coin, repeated: true },
]);
/**
 * QueryPayeeRequest defines the request type for the Payee rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryPayeeRequest
 */
export class QueryPayeeRequest extends Message {
    constructor(data) {
        super();
        /**
         * unique channel identifier
         *
         * @generated from field: string channel_id = 1;
         */
        this.channelId = "";
        /**
         * the relayer address to which the distribution address is registered
         *
         * @generated from field: string relayer = 2;
         */
        this.relayer = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPayeeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPayeeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPayeeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPayeeRequest, a, b);
    }
}
QueryPayeeRequest.runtime = proto3;
QueryPayeeRequest.typeName = "ibc.applications.fee.v1.QueryPayeeRequest";
QueryPayeeRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "relayer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryPayeeResponse defines the response type for the Payee rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryPayeeResponse
 */
export class QueryPayeeResponse extends Message {
    constructor(data) {
        super();
        /**
         * the payee address to which packet fees are paid out
         *
         * @generated from field: string payee_address = 1;
         */
        this.payeeAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPayeeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPayeeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPayeeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPayeeResponse, a, b);
    }
}
QueryPayeeResponse.runtime = proto3;
QueryPayeeResponse.typeName = "ibc.applications.fee.v1.QueryPayeeResponse";
QueryPayeeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "payee_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryCounterpartyPayeeRequest defines the request type for the CounterpartyPayee rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryCounterpartyPayeeRequest
 */
export class QueryCounterpartyPayeeRequest extends Message {
    constructor(data) {
        super();
        /**
         * unique channel identifier
         *
         * @generated from field: string channel_id = 1;
         */
        this.channelId = "";
        /**
         * the relayer address to which the counterparty is registered
         *
         * @generated from field: string relayer = 2;
         */
        this.relayer = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryCounterpartyPayeeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryCounterpartyPayeeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryCounterpartyPayeeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryCounterpartyPayeeRequest, a, b);
    }
}
QueryCounterpartyPayeeRequest.runtime = proto3;
QueryCounterpartyPayeeRequest.typeName = "ibc.applications.fee.v1.QueryCounterpartyPayeeRequest";
QueryCounterpartyPayeeRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "relayer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryCounterpartyPayeeResponse defines the response type for the CounterpartyPayee rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryCounterpartyPayeeResponse
 */
export class QueryCounterpartyPayeeResponse extends Message {
    constructor(data) {
        super();
        /**
         * the counterparty payee address used to compensate forward relaying
         *
         * @generated from field: string counterparty_payee = 1;
         */
        this.counterpartyPayee = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryCounterpartyPayeeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryCounterpartyPayeeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryCounterpartyPayeeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryCounterpartyPayeeResponse, a, b);
    }
}
QueryCounterpartyPayeeResponse.runtime = proto3;
QueryCounterpartyPayeeResponse.typeName = "ibc.applications.fee.v1.QueryCounterpartyPayeeResponse";
QueryCounterpartyPayeeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "counterparty_payee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryFeeEnabledChannelsRequest defines the request type for the FeeEnabledChannels rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest
 */
export class QueryFeeEnabledChannelsRequest extends Message {
    constructor(data) {
        super();
        /**
         * block height at which to query
         *
         * @generated from field: uint64 query_height = 2;
         */
        this.queryHeight = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryFeeEnabledChannelsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryFeeEnabledChannelsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryFeeEnabledChannelsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryFeeEnabledChannelsRequest, a, b);
    }
}
QueryFeeEnabledChannelsRequest.runtime = proto3;
QueryFeeEnabledChannelsRequest.typeName = "ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest";
QueryFeeEnabledChannelsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "query_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryFeeEnabledChannelsResponse defines the response type for the FeeEnabledChannels rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse
 */
export class QueryFeeEnabledChannelsResponse extends Message {
    constructor(data) {
        super();
        /**
         * list of fee enabled channels
         *
         * @generated from field: repeated ibc.applications.fee.v1.FeeEnabledChannel fee_enabled_channels = 1;
         */
        this.feeEnabledChannels = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryFeeEnabledChannelsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryFeeEnabledChannelsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryFeeEnabledChannelsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryFeeEnabledChannelsResponse, a, b);
    }
}
QueryFeeEnabledChannelsResponse.runtime = proto3;
QueryFeeEnabledChannelsResponse.typeName = "ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse";
QueryFeeEnabledChannelsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "fee_enabled_channels", kind: "message", T: FeeEnabledChannel, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryFeeEnabledChannelRequest defines the request type for the FeeEnabledChannel rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryFeeEnabledChannelRequest
 */
export class QueryFeeEnabledChannelRequest extends Message {
    constructor(data) {
        super();
        /**
         * unique port identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * unique channel identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryFeeEnabledChannelRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryFeeEnabledChannelRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryFeeEnabledChannelRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryFeeEnabledChannelRequest, a, b);
    }
}
QueryFeeEnabledChannelRequest.runtime = proto3;
QueryFeeEnabledChannelRequest.typeName = "ibc.applications.fee.v1.QueryFeeEnabledChannelRequest";
QueryFeeEnabledChannelRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryFeeEnabledChannelResponse defines the response type for the FeeEnabledChannel rpc
 *
 * @generated from message ibc.applications.fee.v1.QueryFeeEnabledChannelResponse
 */
export class QueryFeeEnabledChannelResponse extends Message {
    constructor(data) {
        super();
        /**
         * boolean flag representing the fee enabled channel status
         *
         * @generated from field: bool fee_enabled = 1;
         */
        this.feeEnabled = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryFeeEnabledChannelResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryFeeEnabledChannelResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryFeeEnabledChannelResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryFeeEnabledChannelResponse, a, b);
    }
}
QueryFeeEnabledChannelResponse.runtime = proto3;
QueryFeeEnabledChannelResponse.typeName = "ibc.applications.fee.v1.QueryFeeEnabledChannelResponse";
QueryFeeEnabledChannelResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "fee_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
//# sourceMappingURL=query_pb.js.map