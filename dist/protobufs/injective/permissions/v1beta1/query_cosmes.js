// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file injective/permissions/v1beta1/query.proto (package injective.permissions.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { QueryAddressesByRoleRequest, QueryAddressesByRoleResponse, QueryAddressRolesRequest, QueryAddressRolesResponse, QueryAllNamespacesRequest, QueryAllNamespacesResponse, QueryNamespaceByDenomRequest, QueryNamespaceByDenomResponse, QueryParamsRequest, QueryParamsResponse, QueryVouchersForAddressRequest, QueryVouchersForAddressResponse } from "./query_pb.js";
const TYPE_NAME = "injective.permissions.v1beta1.Query";
/**
 * Params defines a gRPC query method that returns the permissions module's
 * parameters.
 *
 * @generated from rpc injective.permissions.v1beta1.Query.Params
 */
export const QueryParamsService = {
    typeName: TYPE_NAME,
    method: "Params",
    Request: QueryParamsRequest,
    Response: QueryParamsResponse,
};
/**
 * AllNamespaces defines a gRPC query method that returns the permissions
 * module's created namespaces.
 *
 * @generated from rpc injective.permissions.v1beta1.Query.AllNamespaces
 */
export const QueryAllNamespacesService = {
    typeName: TYPE_NAME,
    method: "AllNamespaces",
    Request: QueryAllNamespacesRequest,
    Response: QueryAllNamespacesResponse,
};
/**
 * NamespaceByDenom defines a gRPC query method that returns the permissions
 * module's namespace associated with the provided denom.
 *
 * @generated from rpc injective.permissions.v1beta1.Query.NamespaceByDenom
 */
export const QueryNamespaceByDenomService = {
    typeName: TYPE_NAME,
    method: "NamespaceByDenom",
    Request: QueryNamespaceByDenomRequest,
    Response: QueryNamespaceByDenomResponse,
};
/**
 * AddressRoles defines a gRPC query method that returns address roles in the
 * namespace
 *
 * @generated from rpc injective.permissions.v1beta1.Query.AddressRoles
 */
export const QueryAddressRolesService = {
    typeName: TYPE_NAME,
    method: "AddressRoles",
    Request: QueryAddressRolesRequest,
    Response: QueryAddressRolesResponse,
};
/**
 * AddressesByRole defines a gRPC query method that returns a namespace's
 * roles associated with the provided address.
 *
 * @generated from rpc injective.permissions.v1beta1.Query.AddressesByRole
 */
export const QueryAddressesByRoleService = {
    typeName: TYPE_NAME,
    method: "AddressesByRole",
    Request: QueryAddressesByRoleRequest,
    Response: QueryAddressesByRoleResponse,
};
/**
 * VouchersForAddress defines a gRPC query method that returns a map of
 * vouchers that are held by permissions module for this address, keyed by the
 * originator address
 *
 * @generated from rpc injective.permissions.v1beta1.Query.VouchersForAddress
 */
export const QueryVouchersForAddressService = {
    typeName: TYPE_NAME,
    method: "VouchersForAddress",
    Request: QueryVouchersForAddressRequest,
    Response: QueryVouchersForAddressResponse,
};
//# sourceMappingURL=query_cosmes.js.map