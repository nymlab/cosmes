// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/ocr/v1beta1/genesis.proto (package injective.ocr.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { EpochAndRound, FeedConfig, Params, Transmission } from "./ocr_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * GenesisState defines the OCR module's genesis state.
 *
 * @generated from message injective.ocr.v1beta1.GenesisState
 */
export class GenesisState extends Message {
    constructor(data) {
        super();
        /**
         * feed_configs stores all of the supported OCR feeds
         *
         * @generated from field: repeated injective.ocr.v1beta1.FeedConfig feed_configs = 2;
         */
        this.feedConfigs = [];
        /**
         * latest_epoch_and_rounds stores the latest epoch and round for each feedId
         *
         * @generated from field: repeated injective.ocr.v1beta1.FeedEpochAndRound latest_epoch_and_rounds = 3;
         */
        this.latestEpochAndRounds = [];
        /**
         * feed_transmissions stores the last transmission for each feed
         *
         * @generated from field: repeated injective.ocr.v1beta1.FeedTransmission feed_transmissions = 4;
         */
        this.feedTransmissions = [];
        /**
         * latest_aggregator_round_ids stores the latest aggregator round ID for each
         * feedId
         *
         * @generated from field: repeated injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs latest_aggregator_round_ids = 5;
         */
        this.latestAggregatorRoundIds = [];
        /**
         * reward_pools stores the reward pools
         *
         * @generated from field: repeated injective.ocr.v1beta1.RewardPool reward_pools = 6;
         */
        this.rewardPools = [];
        /**
         * feed_observation_counts stores the feed observation counts
         *
         * @generated from field: repeated injective.ocr.v1beta1.FeedCounts feed_observation_counts = 7;
         */
        this.feedObservationCounts = [];
        /**
         * feed_transmission_counts stores the feed transmission counts
         *
         * @generated from field: repeated injective.ocr.v1beta1.FeedCounts feed_transmission_counts = 8;
         */
        this.feedTransmissionCounts = [];
        /**
         * pending_payeeships stores the pending payeeships
         *
         * @generated from field: repeated injective.ocr.v1beta1.PendingPayeeship pending_payeeships = 9;
         */
        this.pendingPayeeships = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GenesisState, a, b);
    }
}
GenesisState.runtime = proto3;
GenesisState.typeName = "injective.ocr.v1beta1.GenesisState";
GenesisState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "feed_configs", kind: "message", T: FeedConfig, repeated: true },
    { no: 3, name: "latest_epoch_and_rounds", kind: "message", T: FeedEpochAndRound, repeated: true },
    { no: 4, name: "feed_transmissions", kind: "message", T: FeedTransmission, repeated: true },
    { no: 5, name: "latest_aggregator_round_ids", kind: "message", T: FeedLatestAggregatorRoundIDs, repeated: true },
    { no: 6, name: "reward_pools", kind: "message", T: RewardPool, repeated: true },
    { no: 7, name: "feed_observation_counts", kind: "message", T: FeedCounts, repeated: true },
    { no: 8, name: "feed_transmission_counts", kind: "message", T: FeedCounts, repeated: true },
    { no: 9, name: "pending_payeeships", kind: "message", T: PendingPayeeship, repeated: true },
]);
/**
 * @generated from message injective.ocr.v1beta1.FeedTransmission
 */
export class FeedTransmission extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string feed_id = 1;
         */
        this.feedId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeedTransmission().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeedTransmission().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeedTransmission().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FeedTransmission, a, b);
    }
}
FeedTransmission.runtime = proto3;
FeedTransmission.typeName = "injective.ocr.v1beta1.FeedTransmission";
FeedTransmission.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transmission", kind: "message", T: Transmission },
]);
/**
 * @generated from message injective.ocr.v1beta1.FeedEpochAndRound
 */
export class FeedEpochAndRound extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string feed_id = 1;
         */
        this.feedId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeedEpochAndRound().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeedEpochAndRound().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeedEpochAndRound().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FeedEpochAndRound, a, b);
    }
}
FeedEpochAndRound.runtime = proto3;
FeedEpochAndRound.typeName = "injective.ocr.v1beta1.FeedEpochAndRound";
FeedEpochAndRound.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "epoch_and_round", kind: "message", T: EpochAndRound },
]);
/**
 * @generated from message injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs
 */
export class FeedLatestAggregatorRoundIDs extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string feed_id = 1;
         */
        this.feedId = "";
        /**
         * @generated from field: uint64 aggregator_round_id = 2;
         */
        this.aggregatorRoundId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeedLatestAggregatorRoundIDs().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeedLatestAggregatorRoundIDs().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeedLatestAggregatorRoundIDs().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FeedLatestAggregatorRoundIDs, a, b);
    }
}
FeedLatestAggregatorRoundIDs.runtime = proto3;
FeedLatestAggregatorRoundIDs.typeName = "injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs";
FeedLatestAggregatorRoundIDs.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "aggregator_round_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.RewardPool
 */
export class RewardPool extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string feed_id = 1;
         */
        this.feedId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RewardPool().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RewardPool().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RewardPool().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RewardPool, a, b);
    }
}
RewardPool.runtime = proto3;
RewardPool.typeName = "injective.ocr.v1beta1.RewardPool";
RewardPool.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
]);
/**
 * @generated from message injective.ocr.v1beta1.FeedCounts
 */
export class FeedCounts extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string feed_id = 1;
         */
        this.feedId = "";
        /**
         * @generated from field: repeated injective.ocr.v1beta1.Count counts = 2;
         */
        this.counts = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeedCounts().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeedCounts().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeedCounts().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FeedCounts, a, b);
    }
}
FeedCounts.runtime = proto3;
FeedCounts.typeName = "injective.ocr.v1beta1.FeedCounts";
FeedCounts.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "counts", kind: "message", T: Count, repeated: true },
]);
/**
 * @generated from message injective.ocr.v1beta1.Count
 */
export class Count extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string address = 1;
         */
        this.address = "";
        /**
         * @generated from field: uint64 count = 2;
         */
        this.count = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Count().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Count().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Count().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Count, a, b);
    }
}
Count.runtime = proto3;
Count.typeName = "injective.ocr.v1beta1.Count";
Count.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message injective.ocr.v1beta1.PendingPayeeship
 */
export class PendingPayeeship extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string feed_id = 1;
         */
        this.feedId = "";
        /**
         * @generated from field: string transmitter = 2;
         */
        this.transmitter = "";
        /**
         * @generated from field: string proposed_payee = 3;
         */
        this.proposedPayee = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PendingPayeeship().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PendingPayeeship().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PendingPayeeship().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PendingPayeeship, a, b);
    }
}
PendingPayeeship.runtime = proto3;
PendingPayeeship.typeName = "injective.ocr.v1beta1.PendingPayeeship";
PendingPayeeship.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "feed_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transmitter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "proposed_payee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=genesis_pb.js.map