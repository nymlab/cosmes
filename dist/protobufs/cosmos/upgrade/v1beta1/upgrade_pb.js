// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/upgrade/v1beta1/upgrade.proto (package cosmos.upgrade.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Any, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
/**
 * Plan specifies information about a planned upgrade and when it should occur.
 *
 * @generated from message cosmos.upgrade.v1beta1.Plan
 */
export class Plan extends Message {
    constructor(data) {
        super();
        /**
         * Sets the name for the upgrade. This name will be used by the upgraded
         * version of the software to apply any special "on-upgrade" commands during
         * the first BeginBlock method after the upgrade is applied. It is also used
         * to detect whether a software version can handle a given upgrade. If no
         * upgrade handler with this name has been set in the software, it will be
         * assumed that the software is out-of-date when the upgrade Time or Height is
         * reached and the software will exit.
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * The height at which the upgrade must be performed.
         *
         * @generated from field: int64 height = 3;
         */
        this.height = protoInt64.zero;
        /**
         * Any application specific upgrade info to be included on-chain
         * such as a git commit that validators could automatically upgrade to
         *
         * @generated from field: string info = 4;
         */
        this.info = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Plan().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plan().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plan().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Plan, a, b);
    }
}
Plan.runtime = proto3;
Plan.typeName = "cosmos.upgrade.v1beta1.Plan";
Plan.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time", kind: "message", T: Timestamp },
    { no: 3, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "upgraded_client_state", kind: "message", T: Any },
]);
/**
 * SoftwareUpgradeProposal is a gov Content type for initiating a software
 * upgrade.
 * Deprecated: This legacy proposal is deprecated in favor of Msg-based gov
 * proposals, see MsgSoftwareUpgrade.
 *
 * @generated from message cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
 * @deprecated
 */
export class SoftwareUpgradeProposal extends Message {
    constructor(data) {
        super();
        /**
         * title of the proposal
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * description of the proposal
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SoftwareUpgradeProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SoftwareUpgradeProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SoftwareUpgradeProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SoftwareUpgradeProposal, a, b);
    }
}
SoftwareUpgradeProposal.runtime = proto3;
SoftwareUpgradeProposal.typeName = "cosmos.upgrade.v1beta1.SoftwareUpgradeProposal";
SoftwareUpgradeProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "plan", kind: "message", T: Plan },
]);
/**
 * CancelSoftwareUpgradeProposal is a gov Content type for cancelling a software
 * upgrade.
 * Deprecated: This legacy proposal is deprecated in favor of Msg-based gov
 * proposals, see MsgCancelUpgrade.
 *
 * @generated from message cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
 * @deprecated
 */
export class CancelSoftwareUpgradeProposal extends Message {
    constructor(data) {
        super();
        /**
         * title of the proposal
         *
         * @generated from field: string title = 1;
         */
        this.title = "";
        /**
         * description of the proposal
         *
         * @generated from field: string description = 2;
         */
        this.description = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CancelSoftwareUpgradeProposal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CancelSoftwareUpgradeProposal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CancelSoftwareUpgradeProposal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CancelSoftwareUpgradeProposal, a, b);
    }
}
CancelSoftwareUpgradeProposal.runtime = proto3;
CancelSoftwareUpgradeProposal.typeName = "cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal";
CancelSoftwareUpgradeProposal.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * ModuleVersion specifies a module and its consensus version.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from message cosmos.upgrade.v1beta1.ModuleVersion
 */
export class ModuleVersion extends Message {
    constructor(data) {
        super();
        /**
         * name of the app module
         *
         * @generated from field: string name = 1;
         */
        this.name = "";
        /**
         * consensus version of the app module
         *
         * @generated from field: uint64 version = 2;
         */
        this.version = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleVersion().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleVersion().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleVersion().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ModuleVersion, a, b);
    }
}
ModuleVersion.runtime = proto3;
ModuleVersion.typeName = "cosmos.upgrade.v1beta1.ModuleVersion";
ModuleVersion.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
//# sourceMappingURL=upgrade_pb.js.map