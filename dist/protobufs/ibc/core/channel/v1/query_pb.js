// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/core/channel/v1/query.proto (package ibc.core.channel.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Channel, IdentifiedChannel, PacketState, Params } from "./channel_pb.js";
import { Height, IdentifiedClientState } from "../../client/v1/client_pb.js";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { ErrorReceipt, Upgrade } from "./upgrade_pb.js";
/**
 * QueryChannelRequest is the request type for the Query/Channel RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryChannelRequest
 */
export class QueryChannelRequest extends Message {
    constructor(data) {
        super();
        /**
         * port unique identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * channel unique identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryChannelRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryChannelRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryChannelRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryChannelRequest, a, b);
    }
}
QueryChannelRequest.runtime = proto3;
QueryChannelRequest.typeName = "ibc.core.channel.v1.QueryChannelRequest";
QueryChannelRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryChannelResponse is the response type for the Query/Channel RPC method.
 * Besides the Channel end, it includes a proof and the height from which the
 * proof was retrieved.
 *
 * @generated from message ibc.core.channel.v1.QueryChannelResponse
 */
export class QueryChannelResponse extends Message {
    constructor(data) {
        super();
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryChannelResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryChannelResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryChannelResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryChannelResponse, a, b);
    }
}
QueryChannelResponse.runtime = proto3;
QueryChannelResponse.typeName = "ibc.core.channel.v1.QueryChannelResponse";
QueryChannelResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "channel", kind: "message", T: Channel },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryChannelsRequest is the request type for the Query/Channels RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryChannelsRequest
 */
export class QueryChannelsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryChannelsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryChannelsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryChannelsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryChannelsRequest, a, b);
    }
}
QueryChannelsRequest.runtime = proto3;
QueryChannelsRequest.typeName = "ibc.core.channel.v1.QueryChannelsRequest";
QueryChannelsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryChannelsResponse is the response type for the Query/Channels RPC method.
 *
 * @generated from message ibc.core.channel.v1.QueryChannelsResponse
 */
export class QueryChannelsResponse extends Message {
    constructor(data) {
        super();
        /**
         * list of stored channels of the chain.
         *
         * @generated from field: repeated ibc.core.channel.v1.IdentifiedChannel channels = 1;
         */
        this.channels = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryChannelsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryChannelsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryChannelsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryChannelsResponse, a, b);
    }
}
QueryChannelsResponse.runtime = proto3;
QueryChannelsResponse.typeName = "ibc.core.channel.v1.QueryChannelsResponse";
QueryChannelsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "channels", kind: "message", T: IdentifiedChannel, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
    { no: 3, name: "height", kind: "message", T: Height },
]);
/**
 * QueryConnectionChannelsRequest is the request type for the
 * Query/QueryConnectionChannels RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryConnectionChannelsRequest
 */
export class QueryConnectionChannelsRequest extends Message {
    constructor(data) {
        super();
        /**
         * connection unique identifier
         *
         * @generated from field: string connection = 1;
         */
        this.connection = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConnectionChannelsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConnectionChannelsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConnectionChannelsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConnectionChannelsRequest, a, b);
    }
}
QueryConnectionChannelsRequest.runtime = proto3;
QueryConnectionChannelsRequest.typeName = "ibc.core.channel.v1.QueryConnectionChannelsRequest";
QueryConnectionChannelsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "connection", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryConnectionChannelsResponse is the Response type for the
 * Query/QueryConnectionChannels RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryConnectionChannelsResponse
 */
export class QueryConnectionChannelsResponse extends Message {
    constructor(data) {
        super();
        /**
         * list of channels associated with a connection.
         *
         * @generated from field: repeated ibc.core.channel.v1.IdentifiedChannel channels = 1;
         */
        this.channels = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryConnectionChannelsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryConnectionChannelsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryConnectionChannelsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryConnectionChannelsResponse, a, b);
    }
}
QueryConnectionChannelsResponse.runtime = proto3;
QueryConnectionChannelsResponse.typeName = "ibc.core.channel.v1.QueryConnectionChannelsResponse";
QueryConnectionChannelsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "channels", kind: "message", T: IdentifiedChannel, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
    { no: 3, name: "height", kind: "message", T: Height },
]);
/**
 * QueryChannelClientStateRequest is the request type for the Query/ClientState
 * RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryChannelClientStateRequest
 */
export class QueryChannelClientStateRequest extends Message {
    constructor(data) {
        super();
        /**
         * port unique identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * channel unique identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryChannelClientStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryChannelClientStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryChannelClientStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryChannelClientStateRequest, a, b);
    }
}
QueryChannelClientStateRequest.runtime = proto3;
QueryChannelClientStateRequest.typeName = "ibc.core.channel.v1.QueryChannelClientStateRequest";
QueryChannelClientStateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryChannelClientStateResponse is the Response type for the
 * Query/QueryChannelClientState RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryChannelClientStateResponse
 */
export class QueryChannelClientStateResponse extends Message {
    constructor(data) {
        super();
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryChannelClientStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryChannelClientStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryChannelClientStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryChannelClientStateResponse, a, b);
    }
}
QueryChannelClientStateResponse.runtime = proto3;
QueryChannelClientStateResponse.typeName = "ibc.core.channel.v1.QueryChannelClientStateResponse";
QueryChannelClientStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "identified_client_state", kind: "message", T: IdentifiedClientState },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryChannelConsensusStateRequest is the request type for the
 * Query/ConsensusState RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryChannelConsensusStateRequest
 */
export class QueryChannelConsensusStateRequest extends Message {
    constructor(data) {
        super();
        /**
         * port unique identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * channel unique identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        /**
         * revision number of the consensus state
         *
         * @generated from field: uint64 revision_number = 3;
         */
        this.revisionNumber = protoInt64.zero;
        /**
         * revision height of the consensus state
         *
         * @generated from field: uint64 revision_height = 4;
         */
        this.revisionHeight = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryChannelConsensusStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryChannelConsensusStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryChannelConsensusStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryChannelConsensusStateRequest, a, b);
    }
}
QueryChannelConsensusStateRequest.runtime = proto3;
QueryChannelConsensusStateRequest.typeName = "ibc.core.channel.v1.QueryChannelConsensusStateRequest";
QueryChannelConsensusStateRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "revision_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "revision_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryChannelClientStateResponse is the Response type for the
 * Query/QueryChannelClientState RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryChannelConsensusStateResponse
 */
export class QueryChannelConsensusStateResponse extends Message {
    constructor(data) {
        super();
        /**
         * client ID associated with the consensus state
         *
         * @generated from field: string client_id = 2;
         */
        this.clientId = "";
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 3;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryChannelConsensusStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryChannelConsensusStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryChannelConsensusStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryChannelConsensusStateResponse, a, b);
    }
}
QueryChannelConsensusStateResponse.runtime = proto3;
QueryChannelConsensusStateResponse.typeName = "ibc.core.channel.v1.QueryChannelConsensusStateResponse";
QueryChannelConsensusStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "consensus_state", kind: "message", T: Any },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryPacketCommitmentRequest is the request type for the
 * Query/PacketCommitment RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketCommitmentRequest
 */
export class QueryPacketCommitmentRequest extends Message {
    constructor(data) {
        super();
        /**
         * port unique identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * channel unique identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        /**
         * packet sequence
         *
         * @generated from field: uint64 sequence = 3;
         */
        this.sequence = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPacketCommitmentRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPacketCommitmentRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPacketCommitmentRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPacketCommitmentRequest, a, b);
    }
}
QueryPacketCommitmentRequest.runtime = proto3;
QueryPacketCommitmentRequest.typeName = "ibc.core.channel.v1.QueryPacketCommitmentRequest";
QueryPacketCommitmentRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryPacketCommitmentResponse defines the client query response for a packet
 * which also includes a proof and the height from which the proof was
 * retrieved
 *
 * @generated from message ibc.core.channel.v1.QueryPacketCommitmentResponse
 */
export class QueryPacketCommitmentResponse extends Message {
    constructor(data) {
        super();
        /**
         * packet associated with the request fields
         *
         * @generated from field: bytes commitment = 1;
         */
        this.commitment = new Uint8Array(0);
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPacketCommitmentResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPacketCommitmentResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPacketCommitmentResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPacketCommitmentResponse, a, b);
    }
}
QueryPacketCommitmentResponse.runtime = proto3;
QueryPacketCommitmentResponse.typeName = "ibc.core.channel.v1.QueryPacketCommitmentResponse";
QueryPacketCommitmentResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "commitment", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryPacketCommitmentsRequest is the request type for the
 * Query/QueryPacketCommitments RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketCommitmentsRequest
 */
export class QueryPacketCommitmentsRequest extends Message {
    constructor(data) {
        super();
        /**
         * port unique identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * channel unique identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPacketCommitmentsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPacketCommitmentsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPacketCommitmentsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPacketCommitmentsRequest, a, b);
    }
}
QueryPacketCommitmentsRequest.runtime = proto3;
QueryPacketCommitmentsRequest.typeName = "ibc.core.channel.v1.QueryPacketCommitmentsRequest";
QueryPacketCommitmentsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryPacketCommitmentsResponse is the request type for the
 * Query/QueryPacketCommitments RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketCommitmentsResponse
 */
export class QueryPacketCommitmentsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated ibc.core.channel.v1.PacketState commitments = 1;
         */
        this.commitments = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPacketCommitmentsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPacketCommitmentsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPacketCommitmentsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPacketCommitmentsResponse, a, b);
    }
}
QueryPacketCommitmentsResponse.runtime = proto3;
QueryPacketCommitmentsResponse.typeName = "ibc.core.channel.v1.QueryPacketCommitmentsResponse";
QueryPacketCommitmentsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "commitments", kind: "message", T: PacketState, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
    { no: 3, name: "height", kind: "message", T: Height },
]);
/**
 * QueryPacketReceiptRequest is the request type for the
 * Query/PacketReceipt RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketReceiptRequest
 */
export class QueryPacketReceiptRequest extends Message {
    constructor(data) {
        super();
        /**
         * port unique identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * channel unique identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        /**
         * packet sequence
         *
         * @generated from field: uint64 sequence = 3;
         */
        this.sequence = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPacketReceiptRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPacketReceiptRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPacketReceiptRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPacketReceiptRequest, a, b);
    }
}
QueryPacketReceiptRequest.runtime = proto3;
QueryPacketReceiptRequest.typeName = "ibc.core.channel.v1.QueryPacketReceiptRequest";
QueryPacketReceiptRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryPacketReceiptResponse defines the client query response for a packet
 * receipt which also includes a proof, and the height from which the proof was
 * retrieved
 *
 * @generated from message ibc.core.channel.v1.QueryPacketReceiptResponse
 */
export class QueryPacketReceiptResponse extends Message {
    constructor(data) {
        super();
        /**
         * success flag for if receipt exists
         *
         * @generated from field: bool received = 2;
         */
        this.received = false;
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 3;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPacketReceiptResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPacketReceiptResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPacketReceiptResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPacketReceiptResponse, a, b);
    }
}
QueryPacketReceiptResponse.runtime = proto3;
QueryPacketReceiptResponse.typeName = "ibc.core.channel.v1.QueryPacketReceiptResponse";
QueryPacketReceiptResponse.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "received", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryPacketAcknowledgementRequest is the request type for the
 * Query/PacketAcknowledgement RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketAcknowledgementRequest
 */
export class QueryPacketAcknowledgementRequest extends Message {
    constructor(data) {
        super();
        /**
         * port unique identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * channel unique identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        /**
         * packet sequence
         *
         * @generated from field: uint64 sequence = 3;
         */
        this.sequence = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPacketAcknowledgementRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPacketAcknowledgementRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPacketAcknowledgementRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPacketAcknowledgementRequest, a, b);
    }
}
QueryPacketAcknowledgementRequest.runtime = proto3;
QueryPacketAcknowledgementRequest.typeName = "ibc.core.channel.v1.QueryPacketAcknowledgementRequest";
QueryPacketAcknowledgementRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * QueryPacketAcknowledgementResponse defines the client query response for a
 * packet which also includes a proof and the height from which the
 * proof was retrieved
 *
 * @generated from message ibc.core.channel.v1.QueryPacketAcknowledgementResponse
 */
export class QueryPacketAcknowledgementResponse extends Message {
    constructor(data) {
        super();
        /**
         * packet associated with the request fields
         *
         * @generated from field: bytes acknowledgement = 1;
         */
        this.acknowledgement = new Uint8Array(0);
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPacketAcknowledgementResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPacketAcknowledgementResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPacketAcknowledgementResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPacketAcknowledgementResponse, a, b);
    }
}
QueryPacketAcknowledgementResponse.runtime = proto3;
QueryPacketAcknowledgementResponse.typeName = "ibc.core.channel.v1.QueryPacketAcknowledgementResponse";
QueryPacketAcknowledgementResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "acknowledgement", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryPacketAcknowledgementsRequest is the request type for the
 * Query/QueryPacketCommitments RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
 */
export class QueryPacketAcknowledgementsRequest extends Message {
    constructor(data) {
        super();
        /**
         * port unique identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * channel unique identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        /**
         * list of packet sequences
         *
         * @generated from field: repeated uint64 packet_commitment_sequences = 4;
         */
        this.packetCommitmentSequences = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPacketAcknowledgementsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPacketAcknowledgementsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPacketAcknowledgementsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPacketAcknowledgementsRequest, a, b);
    }
}
QueryPacketAcknowledgementsRequest.runtime = proto3;
QueryPacketAcknowledgementsRequest.typeName = "ibc.core.channel.v1.QueryPacketAcknowledgementsRequest";
QueryPacketAcknowledgementsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
    { no: 4, name: "packet_commitment_sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
]);
/**
 * QueryPacketAcknowledgemetsResponse is the request type for the
 * Query/QueryPacketAcknowledgements RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
 */
export class QueryPacketAcknowledgementsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated ibc.core.channel.v1.PacketState acknowledgements = 1;
         */
        this.acknowledgements = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPacketAcknowledgementsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPacketAcknowledgementsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPacketAcknowledgementsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPacketAcknowledgementsResponse, a, b);
    }
}
QueryPacketAcknowledgementsResponse.runtime = proto3;
QueryPacketAcknowledgementsResponse.typeName = "ibc.core.channel.v1.QueryPacketAcknowledgementsResponse";
QueryPacketAcknowledgementsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "acknowledgements", kind: "message", T: PacketState, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
    { no: 3, name: "height", kind: "message", T: Height },
]);
/**
 * QueryUnreceivedPacketsRequest is the request type for the
 * Query/UnreceivedPackets RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryUnreceivedPacketsRequest
 */
export class QueryUnreceivedPacketsRequest extends Message {
    constructor(data) {
        super();
        /**
         * port unique identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * channel unique identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        /**
         * list of packet sequences
         *
         * @generated from field: repeated uint64 packet_commitment_sequences = 3;
         */
        this.packetCommitmentSequences = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUnreceivedPacketsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUnreceivedPacketsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUnreceivedPacketsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUnreceivedPacketsRequest, a, b);
    }
}
QueryUnreceivedPacketsRequest.runtime = proto3;
QueryUnreceivedPacketsRequest.typeName = "ibc.core.channel.v1.QueryUnreceivedPacketsRequest";
QueryUnreceivedPacketsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "packet_commitment_sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
]);
/**
 * QueryUnreceivedPacketsResponse is the response type for the
 * Query/UnreceivedPacketCommitments RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryUnreceivedPacketsResponse
 */
export class QueryUnreceivedPacketsResponse extends Message {
    constructor(data) {
        super();
        /**
         * list of unreceived packet sequences
         *
         * @generated from field: repeated uint64 sequences = 1;
         */
        this.sequences = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUnreceivedPacketsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUnreceivedPacketsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUnreceivedPacketsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUnreceivedPacketsResponse, a, b);
    }
}
QueryUnreceivedPacketsResponse.runtime = proto3;
QueryUnreceivedPacketsResponse.typeName = "ibc.core.channel.v1.QueryUnreceivedPacketsResponse";
QueryUnreceivedPacketsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "height", kind: "message", T: Height },
]);
/**
 * QueryUnreceivedAcks is the request type for the
 * Query/UnreceivedAcks RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryUnreceivedAcksRequest
 */
export class QueryUnreceivedAcksRequest extends Message {
    constructor(data) {
        super();
        /**
         * port unique identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * channel unique identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        /**
         * list of acknowledgement sequences
         *
         * @generated from field: repeated uint64 packet_ack_sequences = 3;
         */
        this.packetAckSequences = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUnreceivedAcksRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUnreceivedAcksRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUnreceivedAcksRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUnreceivedAcksRequest, a, b);
    }
}
QueryUnreceivedAcksRequest.runtime = proto3;
QueryUnreceivedAcksRequest.typeName = "ibc.core.channel.v1.QueryUnreceivedAcksRequest";
QueryUnreceivedAcksRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "packet_ack_sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
]);
/**
 * QueryUnreceivedAcksResponse is the response type for the
 * Query/UnreceivedAcks RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryUnreceivedAcksResponse
 */
export class QueryUnreceivedAcksResponse extends Message {
    constructor(data) {
        super();
        /**
         * list of unreceived acknowledgement sequences
         *
         * @generated from field: repeated uint64 sequences = 1;
         */
        this.sequences = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUnreceivedAcksResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUnreceivedAcksResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUnreceivedAcksResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUnreceivedAcksResponse, a, b);
    }
}
QueryUnreceivedAcksResponse.runtime = proto3;
QueryUnreceivedAcksResponse.typeName = "ibc.core.channel.v1.QueryUnreceivedAcksResponse";
QueryUnreceivedAcksResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sequences", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "height", kind: "message", T: Height },
]);
/**
 * QueryNextSequenceReceiveRequest is the request type for the
 * Query/QueryNextSequenceReceiveRequest RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryNextSequenceReceiveRequest
 */
export class QueryNextSequenceReceiveRequest extends Message {
    constructor(data) {
        super();
        /**
         * port unique identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * channel unique identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryNextSequenceReceiveRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryNextSequenceReceiveRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryNextSequenceReceiveRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryNextSequenceReceiveRequest, a, b);
    }
}
QueryNextSequenceReceiveRequest.runtime = proto3;
QueryNextSequenceReceiveRequest.typeName = "ibc.core.channel.v1.QueryNextSequenceReceiveRequest";
QueryNextSequenceReceiveRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QuerySequenceResponse is the response type for the
 * Query/QueryNextSequenceReceiveResponse RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryNextSequenceReceiveResponse
 */
export class QueryNextSequenceReceiveResponse extends Message {
    constructor(data) {
        super();
        /**
         * next sequence receive number
         *
         * @generated from field: uint64 next_sequence_receive = 1;
         */
        this.nextSequenceReceive = protoInt64.zero;
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryNextSequenceReceiveResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryNextSequenceReceiveResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryNextSequenceReceiveResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryNextSequenceReceiveResponse, a, b);
    }
}
QueryNextSequenceReceiveResponse.runtime = proto3;
QueryNextSequenceReceiveResponse.typeName = "ibc.core.channel.v1.QueryNextSequenceReceiveResponse";
QueryNextSequenceReceiveResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "next_sequence_receive", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryNextSequenceSendRequest is the request type for the
 * Query/QueryNextSequenceSend RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryNextSequenceSendRequest
 */
export class QueryNextSequenceSendRequest extends Message {
    constructor(data) {
        super();
        /**
         * port unique identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * channel unique identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryNextSequenceSendRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryNextSequenceSendRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryNextSequenceSendRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryNextSequenceSendRequest, a, b);
    }
}
QueryNextSequenceSendRequest.runtime = proto3;
QueryNextSequenceSendRequest.typeName = "ibc.core.channel.v1.QueryNextSequenceSendRequest";
QueryNextSequenceSendRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryNextSequenceSendResponse is the request type for the
 * Query/QueryNextSequenceSend RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryNextSequenceSendResponse
 */
export class QueryNextSequenceSendResponse extends Message {
    constructor(data) {
        super();
        /**
         * next sequence send number
         *
         * @generated from field: uint64 next_sequence_send = 1;
         */
        this.nextSequenceSend = protoInt64.zero;
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryNextSequenceSendResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryNextSequenceSendResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryNextSequenceSendResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryNextSequenceSendResponse, a, b);
    }
}
QueryNextSequenceSendResponse.runtime = proto3;
QueryNextSequenceSendResponse.typeName = "ibc.core.channel.v1.QueryNextSequenceSendResponse";
QueryNextSequenceSendResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "next_sequence_send", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryUpgradeErrorRequest is the request type for the Query/QueryUpgradeError RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryUpgradeErrorRequest
 */
export class QueryUpgradeErrorRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUpgradeErrorRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUpgradeErrorRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUpgradeErrorRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUpgradeErrorRequest, a, b);
    }
}
QueryUpgradeErrorRequest.runtime = proto3;
QueryUpgradeErrorRequest.typeName = "ibc.core.channel.v1.QueryUpgradeErrorRequest";
QueryUpgradeErrorRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryUpgradeErrorResponse is the response type for the Query/QueryUpgradeError RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryUpgradeErrorResponse
 */
export class QueryUpgradeErrorResponse extends Message {
    constructor(data) {
        super();
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUpgradeErrorResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUpgradeErrorResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUpgradeErrorResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUpgradeErrorResponse, a, b);
    }
}
QueryUpgradeErrorResponse.runtime = proto3;
QueryUpgradeErrorResponse.typeName = "ibc.core.channel.v1.QueryUpgradeErrorResponse";
QueryUpgradeErrorResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "error_receipt", kind: "message", T: ErrorReceipt },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryUpgradeRequest is the request type for the QueryUpgradeRequest RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryUpgradeRequest
 */
export class QueryUpgradeRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUpgradeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUpgradeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUpgradeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUpgradeRequest, a, b);
    }
}
QueryUpgradeRequest.runtime = proto3;
QueryUpgradeRequest.typeName = "ibc.core.channel.v1.QueryUpgradeRequest";
QueryUpgradeRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryUpgradeResponse is the response type for the QueryUpgradeResponse RPC method
 *
 * @generated from message ibc.core.channel.v1.QueryUpgradeResponse
 */
export class QueryUpgradeResponse extends Message {
    constructor(data) {
        super();
        /**
         * merkle proof of existence
         *
         * @generated from field: bytes proof = 2;
         */
        this.proof = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUpgradeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUpgradeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUpgradeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUpgradeResponse, a, b);
    }
}
QueryUpgradeResponse.runtime = proto3;
QueryUpgradeResponse.typeName = "ibc.core.channel.v1.QueryUpgradeResponse";
QueryUpgradeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "upgrade", kind: "message", T: Upgrade },
    { no: 2, name: "proof", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "proof_height", kind: "message", T: Height },
]);
/**
 * QueryChannelParamsRequest is the request type for the Query/ChannelParams RPC method.
 *
 * @generated from message ibc.core.channel.v1.QueryChannelParamsRequest
 */
export class QueryChannelParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryChannelParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryChannelParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryChannelParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryChannelParamsRequest, a, b);
    }
}
QueryChannelParamsRequest.runtime = proto3;
QueryChannelParamsRequest.typeName = "ibc.core.channel.v1.QueryChannelParamsRequest";
QueryChannelParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryChannelParamsResponse is the response type for the Query/ChannelParams RPC method.
 *
 * @generated from message ibc.core.channel.v1.QueryChannelParamsResponse
 */
export class QueryChannelParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryChannelParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryChannelParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryChannelParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryChannelParamsResponse, a, b);
    }
}
QueryChannelParamsResponse.runtime = proto3;
QueryChannelParamsResponse.typeName = "ibc.core.channel.v1.QueryChannelParamsResponse";
QueryChannelParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
//# sourceMappingURL=query_pb.js.map