// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ethermint/feemarket/v1/query.proto (package ethermint.feemarket.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./feemarket_pb.js";
/**
 * QueryParamsRequest defines the request type for querying x/evm parameters.
 *
 * @generated from message ethermint.feemarket.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "ethermint.feemarket.v1.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryParamsResponse defines the response type for querying x/evm parameters.
 *
 * @generated from message ethermint.feemarket.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "ethermint.feemarket.v1.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * QueryBaseFeeRequest defines the request type for querying the EIP1559 base
 * fee.
 *
 * @generated from message ethermint.feemarket.v1.QueryBaseFeeRequest
 */
export class QueryBaseFeeRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBaseFeeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBaseFeeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBaseFeeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBaseFeeRequest, a, b);
    }
}
QueryBaseFeeRequest.runtime = proto3;
QueryBaseFeeRequest.typeName = "ethermint.feemarket.v1.QueryBaseFeeRequest";
QueryBaseFeeRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryBaseFeeResponse returns the EIP1559 base fee.
 *
 * @generated from message ethermint.feemarket.v1.QueryBaseFeeResponse
 */
export class QueryBaseFeeResponse extends Message {
    constructor(data) {
        super();
        /**
         * base_fee is the EIP1559 base fee
         *
         * @generated from field: string base_fee = 1;
         */
        this.baseFee = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBaseFeeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBaseFeeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBaseFeeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBaseFeeResponse, a, b);
    }
}
QueryBaseFeeResponse.runtime = proto3;
QueryBaseFeeResponse.typeName = "ethermint.feemarket.v1.QueryBaseFeeResponse";
QueryBaseFeeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "base_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryBlockGasRequest defines the request type for querying the EIP1559 base
 * fee.
 *
 * @generated from message ethermint.feemarket.v1.QueryBlockGasRequest
 */
export class QueryBlockGasRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBlockGasRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBlockGasRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBlockGasRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBlockGasRequest, a, b);
    }
}
QueryBlockGasRequest.runtime = proto3;
QueryBlockGasRequest.typeName = "ethermint.feemarket.v1.QueryBlockGasRequest";
QueryBlockGasRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryBlockGasResponse returns block gas used for a given height.
 *
 * @generated from message ethermint.feemarket.v1.QueryBlockGasResponse
 */
export class QueryBlockGasResponse extends Message {
    constructor(data) {
        super();
        /**
         * gas is the returned block gas
         *
         * @generated from field: int64 gas = 1;
         */
        this.gas = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBlockGasResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBlockGasResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBlockGasResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBlockGasResponse, a, b);
    }
}
QueryBlockGasResponse.runtime = proto3;
QueryBlockGasResponse.typeName = "ethermint.feemarket.v1.QueryBlockGasResponse";
QueryBlockGasResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "gas", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
//# sourceMappingURL=query_pb.js.map