// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/applications/interchain_accounts/genesis/v1/genesis.proto (package ibc.applications.interchain_accounts.genesis.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "../../controller/v1/controller_pb.js";
import { Params as Params$1 } from "../../host/v1/host_pb.js";
/**
 * GenesisState defines the interchain accounts genesis state
 *
 * @generated from message ibc.applications.interchain_accounts.genesis.v1.GenesisState
 */
export class GenesisState extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GenesisState, a, b);
    }
}
GenesisState.runtime = proto3;
GenesisState.typeName = "ibc.applications.interchain_accounts.genesis.v1.GenesisState";
GenesisState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "controller_genesis_state", kind: "message", T: ControllerGenesisState },
    { no: 2, name: "host_genesis_state", kind: "message", T: HostGenesisState },
]);
/**
 * ControllerGenesisState defines the interchain accounts controller genesis state
 *
 * @generated from message ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState
 */
export class ControllerGenesisState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated ibc.applications.interchain_accounts.genesis.v1.ActiveChannel active_channels = 1;
         */
        this.activeChannels = [];
        /**
         * @generated from field: repeated ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount interchain_accounts = 2;
         */
        this.interchainAccounts = [];
        /**
         * @generated from field: repeated string ports = 3;
         */
        this.ports = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ControllerGenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ControllerGenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ControllerGenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ControllerGenesisState, a, b);
    }
}
ControllerGenesisState.runtime = proto3;
ControllerGenesisState.typeName = "ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState";
ControllerGenesisState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "active_channels", kind: "message", T: ActiveChannel, repeated: true },
    { no: 2, name: "interchain_accounts", kind: "message", T: RegisteredInterchainAccount, repeated: true },
    { no: 3, name: "ports", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "params", kind: "message", T: Params },
]);
/**
 * HostGenesisState defines the interchain accounts host genesis state
 *
 * @generated from message ibc.applications.interchain_accounts.genesis.v1.HostGenesisState
 */
export class HostGenesisState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated ibc.applications.interchain_accounts.genesis.v1.ActiveChannel active_channels = 1;
         */
        this.activeChannels = [];
        /**
         * @generated from field: repeated ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount interchain_accounts = 2;
         */
        this.interchainAccounts = [];
        /**
         * @generated from field: string port = 3;
         */
        this.port = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new HostGenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HostGenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HostGenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(HostGenesisState, a, b);
    }
}
HostGenesisState.runtime = proto3;
HostGenesisState.typeName = "ibc.applications.interchain_accounts.genesis.v1.HostGenesisState";
HostGenesisState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "active_channels", kind: "message", T: ActiveChannel, repeated: true },
    { no: 2, name: "interchain_accounts", kind: "message", T: RegisteredInterchainAccount, repeated: true },
    { no: 3, name: "port", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "params", kind: "message", T: Params$1 },
]);
/**
 * ActiveChannel contains a connection ID, port ID and associated active channel ID, as well as a boolean flag to
 * indicate if the channel is middleware enabled
 *
 * @generated from message ibc.applications.interchain_accounts.genesis.v1.ActiveChannel
 */
export class ActiveChannel extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string connection_id = 1;
         */
        this.connectionId = "";
        /**
         * @generated from field: string port_id = 2;
         */
        this.portId = "";
        /**
         * @generated from field: string channel_id = 3;
         */
        this.channelId = "";
        /**
         * @generated from field: bool is_middleware_enabled = 4;
         */
        this.isMiddlewareEnabled = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ActiveChannel().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ActiveChannel().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ActiveChannel().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ActiveChannel, a, b);
    }
}
ActiveChannel.runtime = proto3;
ActiveChannel.typeName = "ibc.applications.interchain_accounts.genesis.v1.ActiveChannel";
ActiveChannel.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_middleware_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * RegisteredInterchainAccount contains a connection ID, port ID and associated interchain account address
 *
 * @generated from message ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount
 */
export class RegisteredInterchainAccount extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string connection_id = 1;
         */
        this.connectionId = "";
        /**
         * @generated from field: string port_id = 2;
         */
        this.portId = "";
        /**
         * @generated from field: string account_address = 3;
         */
        this.accountAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RegisteredInterchainAccount().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RegisteredInterchainAccount().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RegisteredInterchainAccount().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RegisteredInterchainAccount, a, b);
    }
}
RegisteredInterchainAccount.runtime = proto3;
RegisteredInterchainAccount.typeName = "ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount";
RegisteredInterchainAccount.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=genesis_pb.js.map