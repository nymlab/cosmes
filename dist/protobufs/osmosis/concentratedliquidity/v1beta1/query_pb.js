// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/concentratedliquidity/v1beta1/query.proto (package osmosis.concentratedliquidity.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { FullPositionBreakdown, PositionWithPeriodLock } from "./position_pb.js";
import { Params } from "../params_pb.js";
import { Coin, DecCoin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { UptimeTracker } from "./tickInfo_pb.js";
import { IncentiveRecord } from "./incentive_record_pb.js";
/**
 * =============================== UserPositions
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.UserPositionsRequest
 */
export class UserPositionsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string address = 1;
         */
        this.address = "";
        /**
         * @generated from field: uint64 pool_id = 2;
         */
        this.poolId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserPositionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserPositionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserPositionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserPositionsRequest, a, b);
    }
}
UserPositionsRequest.runtime = proto3;
UserPositionsRequest.typeName = "osmosis.concentratedliquidity.v1beta1.UserPositionsRequest";
UserPositionsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.UserPositionsResponse
 */
export class UserPositionsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.FullPositionBreakdown positions = 1;
         */
        this.positions = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserPositionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserPositionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserPositionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserPositionsResponse, a, b);
    }
}
UserPositionsResponse.runtime = proto3;
UserPositionsResponse.typeName = "osmosis.concentratedliquidity.v1beta1.UserPositionsResponse";
UserPositionsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "positions", kind: "message", T: FullPositionBreakdown, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * =============================== PositionById
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.PositionByIdRequest
 */
export class PositionByIdRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 position_id = 1;
         */
        this.positionId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PositionByIdRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PositionByIdRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PositionByIdRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PositionByIdRequest, a, b);
    }
}
PositionByIdRequest.runtime = proto3;
PositionByIdRequest.typeName = "osmosis.concentratedliquidity.v1beta1.PositionByIdRequest";
PositionByIdRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.PositionByIdResponse
 */
export class PositionByIdResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PositionByIdResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PositionByIdResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PositionByIdResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PositionByIdResponse, a, b);
    }
}
PositionByIdResponse.runtime = proto3;
PositionByIdResponse.typeName = "osmosis.concentratedliquidity.v1beta1.PositionByIdResponse";
PositionByIdResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "message", T: FullPositionBreakdown },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.NumPoolPositionsRequest
 */
export class NumPoolPositionsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NumPoolPositionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NumPoolPositionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NumPoolPositionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NumPoolPositionsRequest, a, b);
    }
}
NumPoolPositionsRequest.runtime = proto3;
NumPoolPositionsRequest.typeName = "osmosis.concentratedliquidity.v1beta1.NumPoolPositionsRequest";
NumPoolPositionsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.NumPoolPositionsResponse
 */
export class NumPoolPositionsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 position_count = 1;
         */
        this.positionCount = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NumPoolPositionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NumPoolPositionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NumPoolPositionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NumPoolPositionsResponse, a, b);
    }
}
NumPoolPositionsResponse.runtime = proto3;
NumPoolPositionsResponse.typeName = "osmosis.concentratedliquidity.v1beta1.NumPoolPositionsResponse";
NumPoolPositionsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * =============================== Pools
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.PoolsRequest
 */
export class PoolsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PoolsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PoolsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PoolsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PoolsRequest, a, b);
    }
}
PoolsRequest.runtime = proto3;
PoolsRequest.typeName = "osmosis.concentratedliquidity.v1beta1.PoolsRequest";
PoolsRequest.fields = proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.PoolsResponse
 */
export class PoolsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.Any pools = 1;
         */
        this.pools = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PoolsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PoolsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PoolsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PoolsResponse, a, b);
    }
}
PoolsResponse.runtime = proto3;
PoolsResponse.typeName = "osmosis.concentratedliquidity.v1beta1.PoolsResponse";
PoolsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Any, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * =============================== ModuleParams
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.ParamsRequest
 */
export class ParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ParamsRequest, a, b);
    }
}
ParamsRequest.runtime = proto3;
ParamsRequest.typeName = "osmosis.concentratedliquidity.v1beta1.ParamsRequest";
ParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.ParamsResponse
 */
export class ParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ParamsResponse, a, b);
    }
}
ParamsResponse.runtime = proto3;
ParamsResponse.typeName = "osmosis.concentratedliquidity.v1beta1.ParamsResponse";
ParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.TickLiquidityNet
 */
export class TickLiquidityNet extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string liquidity_net = 1;
         */
        this.liquidityNet = "";
        /**
         * @generated from field: int64 tick_index = 2;
         */
        this.tickIndex = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TickLiquidityNet().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TickLiquidityNet().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TickLiquidityNet().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TickLiquidityNet, a, b);
    }
}
TickLiquidityNet.runtime = proto3;
TickLiquidityNet.typeName = "osmosis.concentratedliquidity.v1beta1.TickLiquidityNet";
TickLiquidityNet.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity_net", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tick_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.LiquidityDepthWithRange
 */
export class LiquidityDepthWithRange extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string liquidity_amount = 1;
         */
        this.liquidityAmount = "";
        /**
         * @generated from field: int64 lower_tick = 2;
         */
        this.lowerTick = protoInt64.zero;
        /**
         * @generated from field: int64 upper_tick = 3;
         */
        this.upperTick = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LiquidityDepthWithRange().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LiquidityDepthWithRange().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LiquidityDepthWithRange().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LiquidityDepthWithRange, a, b);
    }
}
LiquidityDepthWithRange.runtime = proto3;
LiquidityDepthWithRange.typeName = "osmosis.concentratedliquidity.v1beta1.LiquidityDepthWithRange";
LiquidityDepthWithRange.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lower_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "upper_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * =============================== LiquidityNetInDirection
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionRequest
 */
export class LiquidityNetInDirectionRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        /**
         * @generated from field: string token_in = 2;
         */
        this.tokenIn = "";
        /**
         * @generated from field: int64 start_tick = 3;
         */
        this.startTick = protoInt64.zero;
        /**
         * @generated from field: bool use_cur_tick = 4;
         */
        this.useCurTick = false;
        /**
         * @generated from field: int64 bound_tick = 5;
         */
        this.boundTick = protoInt64.zero;
        /**
         * @generated from field: bool use_no_bound = 6;
         */
        this.useNoBound = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LiquidityNetInDirectionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LiquidityNetInDirectionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LiquidityNetInDirectionRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LiquidityNetInDirectionRequest, a, b);
    }
}
LiquidityNetInDirectionRequest.runtime = proto3;
LiquidityNetInDirectionRequest.typeName = "osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionRequest";
LiquidityNetInDirectionRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "use_cur_tick", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "bound_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "use_no_bound", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionResponse
 */
export class LiquidityNetInDirectionResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.TickLiquidityNet liquidity_depths = 1;
         */
        this.liquidityDepths = [];
        /**
         * @generated from field: int64 current_tick = 2;
         */
        this.currentTick = protoInt64.zero;
        /**
         * @generated from field: string current_liquidity = 3;
         */
        this.currentLiquidity = "";
        /**
         * @generated from field: string current_sqrt_price = 4;
         */
        this.currentSqrtPrice = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LiquidityNetInDirectionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LiquidityNetInDirectionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LiquidityNetInDirectionResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LiquidityNetInDirectionResponse, a, b);
    }
}
LiquidityNetInDirectionResponse.runtime = proto3;
LiquidityNetInDirectionResponse.typeName = "osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionResponse";
LiquidityNetInDirectionResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity_depths", kind: "message", T: TickLiquidityNet, repeated: true },
    { no: 2, name: "current_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "current_liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "current_sqrt_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * =============================== LiquidityPerTickRange
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeRequest
 */
export class LiquidityPerTickRangeRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LiquidityPerTickRangeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LiquidityPerTickRangeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LiquidityPerTickRangeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LiquidityPerTickRangeRequest, a, b);
    }
}
LiquidityPerTickRangeRequest.runtime = proto3;
LiquidityPerTickRangeRequest.typeName = "osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeRequest";
LiquidityPerTickRangeRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeResponse
 */
export class LiquidityPerTickRangeResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.LiquidityDepthWithRange liquidity = 1;
         */
        this.liquidity = [];
        /**
         * @generated from field: int64 bucket_index = 2;
         */
        this.bucketIndex = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LiquidityPerTickRangeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LiquidityPerTickRangeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LiquidityPerTickRangeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LiquidityPerTickRangeResponse, a, b);
    }
}
LiquidityPerTickRangeResponse.runtime = proto3;
LiquidityPerTickRangeResponse.typeName = "osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeResponse";
LiquidityPerTickRangeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity", kind: "message", T: LiquidityDepthWithRange, repeated: true },
    { no: 2, name: "bucket_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * ===================== QueryClaimableSpreadRewards
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsRequest
 */
export class ClaimableSpreadRewardsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 position_id = 1;
         */
        this.positionId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClaimableSpreadRewardsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClaimableSpreadRewardsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClaimableSpreadRewardsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClaimableSpreadRewardsRequest, a, b);
    }
}
ClaimableSpreadRewardsRequest.runtime = proto3;
ClaimableSpreadRewardsRequest.typeName = "osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsRequest";
ClaimableSpreadRewardsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsResponse
 */
export class ClaimableSpreadRewardsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin claimable_spread_rewards = 1;
         */
        this.claimableSpreadRewards = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClaimableSpreadRewardsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClaimableSpreadRewardsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClaimableSpreadRewardsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClaimableSpreadRewardsResponse, a, b);
    }
}
ClaimableSpreadRewardsResponse.runtime = proto3;
ClaimableSpreadRewardsResponse.typeName = "osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsResponse";
ClaimableSpreadRewardsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "claimable_spread_rewards", kind: "message", T: Coin, repeated: true },
]);
/**
 * ===================== QueryClaimableIncentives
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesRequest
 */
export class ClaimableIncentivesRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 position_id = 1;
         */
        this.positionId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClaimableIncentivesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClaimableIncentivesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClaimableIncentivesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClaimableIncentivesRequest, a, b);
    }
}
ClaimableIncentivesRequest.runtime = proto3;
ClaimableIncentivesRequest.typeName = "osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesRequest";
ClaimableIncentivesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesResponse
 */
export class ClaimableIncentivesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin claimable_incentives = 1;
         */
        this.claimableIncentives = [];
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin forfeited_incentives = 2;
         */
        this.forfeitedIncentives = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ClaimableIncentivesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ClaimableIncentivesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ClaimableIncentivesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ClaimableIncentivesResponse, a, b);
    }
}
ClaimableIncentivesResponse.runtime = proto3;
ClaimableIncentivesResponse.typeName = "osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesResponse";
ClaimableIncentivesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "claimable_incentives", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "forfeited_incentives", kind: "message", T: Coin, repeated: true },
]);
/**
 * ===================== QueryPoolAccumulatorRewards
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsRequest
 */
export class PoolAccumulatorRewardsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PoolAccumulatorRewardsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PoolAccumulatorRewardsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PoolAccumulatorRewardsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PoolAccumulatorRewardsRequest, a, b);
    }
}
PoolAccumulatorRewardsRequest.runtime = proto3;
PoolAccumulatorRewardsRequest.typeName = "osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsRequest";
PoolAccumulatorRewardsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsResponse
 */
export class PoolAccumulatorRewardsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.DecCoin spread_reward_growth_global = 1;
         */
        this.spreadRewardGrowthGlobal = [];
        /**
         * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.UptimeTracker uptime_growth_global = 2;
         */
        this.uptimeGrowthGlobal = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PoolAccumulatorRewardsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PoolAccumulatorRewardsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PoolAccumulatorRewardsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PoolAccumulatorRewardsResponse, a, b);
    }
}
PoolAccumulatorRewardsResponse.runtime = proto3;
PoolAccumulatorRewardsResponse.typeName = "osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsResponse";
PoolAccumulatorRewardsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "spread_reward_growth_global", kind: "message", T: DecCoin, repeated: true },
    { no: 2, name: "uptime_growth_global", kind: "message", T: UptimeTracker, repeated: true },
]);
/**
 * ===================== QueryTickAccumulatorTrackers
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersRequest
 */
export class TickAccumulatorTrackersRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        /**
         * @generated from field: int64 tick_index = 2;
         */
        this.tickIndex = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TickAccumulatorTrackersRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TickAccumulatorTrackersRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TickAccumulatorTrackersRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TickAccumulatorTrackersRequest, a, b);
    }
}
TickAccumulatorTrackersRequest.runtime = proto3;
TickAccumulatorTrackersRequest.typeName = "osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersRequest";
TickAccumulatorTrackersRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "tick_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersResponse
 */
export class TickAccumulatorTrackersResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.DecCoin spread_reward_growth_opposite_direction_of_last_traversal = 1;
         */
        this.spreadRewardGrowthOppositeDirectionOfLastTraversal = [];
        /**
         * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.UptimeTracker uptime_trackers = 2;
         */
        this.uptimeTrackers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TickAccumulatorTrackersResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TickAccumulatorTrackersResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TickAccumulatorTrackersResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TickAccumulatorTrackersResponse, a, b);
    }
}
TickAccumulatorTrackersResponse.runtime = proto3;
TickAccumulatorTrackersResponse.typeName = "osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersResponse";
TickAccumulatorTrackersResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "spread_reward_growth_opposite_direction_of_last_traversal", kind: "message", T: DecCoin, repeated: true },
    { no: 2, name: "uptime_trackers", kind: "message", T: UptimeTracker, repeated: true },
]);
/**
 * ===================== QueryIncentiveRecords
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.IncentiveRecordsRequest
 */
export class IncentiveRecordsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IncentiveRecordsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IncentiveRecordsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IncentiveRecordsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IncentiveRecordsRequest, a, b);
    }
}
IncentiveRecordsRequest.runtime = proto3;
IncentiveRecordsRequest.typeName = "osmosis.concentratedliquidity.v1beta1.IncentiveRecordsRequest";
IncentiveRecordsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.IncentiveRecordsResponse
 */
export class IncentiveRecordsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.IncentiveRecord incentive_records = 1;
         */
        this.incentiveRecords = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IncentiveRecordsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IncentiveRecordsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IncentiveRecordsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IncentiveRecordsResponse, a, b);
    }
}
IncentiveRecordsResponse.runtime = proto3;
IncentiveRecordsResponse.typeName = "osmosis.concentratedliquidity.v1beta1.IncentiveRecordsResponse";
IncentiveRecordsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "incentive_records", kind: "message", T: IncentiveRecord, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * =============================== CFMMPoolIdLinkFromConcentratedPoolId
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.CFMMPoolIdLinkFromConcentratedPoolIdRequest
 */
export class CFMMPoolIdLinkFromConcentratedPoolIdRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 concentrated_pool_id = 1;
         */
        this.concentratedPoolId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CFMMPoolIdLinkFromConcentratedPoolIdRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CFMMPoolIdLinkFromConcentratedPoolIdRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CFMMPoolIdLinkFromConcentratedPoolIdRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CFMMPoolIdLinkFromConcentratedPoolIdRequest, a, b);
    }
}
CFMMPoolIdLinkFromConcentratedPoolIdRequest.runtime = proto3;
CFMMPoolIdLinkFromConcentratedPoolIdRequest.typeName = "osmosis.concentratedliquidity.v1beta1.CFMMPoolIdLinkFromConcentratedPoolIdRequest";
CFMMPoolIdLinkFromConcentratedPoolIdRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "concentrated_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.CFMMPoolIdLinkFromConcentratedPoolIdResponse
 */
export class CFMMPoolIdLinkFromConcentratedPoolIdResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 cfmm_pool_id = 1;
         */
        this.cfmmPoolId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CFMMPoolIdLinkFromConcentratedPoolIdResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CFMMPoolIdLinkFromConcentratedPoolIdResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CFMMPoolIdLinkFromConcentratedPoolIdResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CFMMPoolIdLinkFromConcentratedPoolIdResponse, a, b);
    }
}
CFMMPoolIdLinkFromConcentratedPoolIdResponse.runtime = proto3;
CFMMPoolIdLinkFromConcentratedPoolIdResponse.typeName = "osmosis.concentratedliquidity.v1beta1.CFMMPoolIdLinkFromConcentratedPoolIdResponse";
CFMMPoolIdLinkFromConcentratedPoolIdResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "cfmm_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * =============================== UserUnbondingPositions
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.UserUnbondingPositionsRequest
 */
export class UserUnbondingPositionsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string address = 1;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserUnbondingPositionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserUnbondingPositionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserUnbondingPositionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserUnbondingPositionsRequest, a, b);
    }
}
UserUnbondingPositionsRequest.runtime = proto3;
UserUnbondingPositionsRequest.typeName = "osmosis.concentratedliquidity.v1beta1.UserUnbondingPositionsRequest";
UserUnbondingPositionsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.UserUnbondingPositionsResponse
 */
export class UserUnbondingPositionsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.PositionWithPeriodLock positions_with_period_lock = 1;
         */
        this.positionsWithPeriodLock = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserUnbondingPositionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserUnbondingPositionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserUnbondingPositionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserUnbondingPositionsResponse, a, b);
    }
}
UserUnbondingPositionsResponse.runtime = proto3;
UserUnbondingPositionsResponse.typeName = "osmosis.concentratedliquidity.v1beta1.UserUnbondingPositionsResponse";
UserUnbondingPositionsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "positions_with_period_lock", kind: "message", T: PositionWithPeriodLock, repeated: true },
]);
/**
 * =============================== GetTotalLiquidity
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.GetTotalLiquidityRequest
 */
export class GetTotalLiquidityRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetTotalLiquidityRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetTotalLiquidityRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetTotalLiquidityRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetTotalLiquidityRequest, a, b);
    }
}
GetTotalLiquidityRequest.runtime = proto3;
GetTotalLiquidityRequest.typeName = "osmosis.concentratedliquidity.v1beta1.GetTotalLiquidityRequest";
GetTotalLiquidityRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.GetTotalLiquidityResponse
 */
export class GetTotalLiquidityResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin total_liquidity = 1;
         */
        this.totalLiquidity = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GetTotalLiquidityResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GetTotalLiquidityResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GetTotalLiquidityResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GetTotalLiquidityResponse, a, b);
    }
}
GetTotalLiquidityResponse.runtime = proto3;
GetTotalLiquidityResponse.typeName = "osmosis.concentratedliquidity.v1beta1.GetTotalLiquidityResponse";
GetTotalLiquidityResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "total_liquidity", kind: "message", T: Coin, repeated: true },
]);
/**
 * =============================== NumNextInitializedTicks
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.NumNextInitializedTicksRequest
 */
export class NumNextInitializedTicksRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        /**
         * @generated from field: string token_in_denom = 2;
         */
        this.tokenInDenom = "";
        /**
         * @generated from field: uint64 num_next_initialized_ticks = 3;
         */
        this.numNextInitializedTicks = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NumNextInitializedTicksRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NumNextInitializedTicksRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NumNextInitializedTicksRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NumNextInitializedTicksRequest, a, b);
    }
}
NumNextInitializedTicksRequest.runtime = proto3;
NumNextInitializedTicksRequest.typeName = "osmosis.concentratedliquidity.v1beta1.NumNextInitializedTicksRequest";
NumNextInitializedTicksRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_in_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "num_next_initialized_ticks", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.NumNextInitializedTicksResponse
 */
export class NumNextInitializedTicksResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.TickLiquidityNet liquidity_depths = 1;
         */
        this.liquidityDepths = [];
        /**
         * @generated from field: int64 current_tick = 2;
         */
        this.currentTick = protoInt64.zero;
        /**
         * @generated from field: string current_liquidity = 3;
         */
        this.currentLiquidity = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new NumNextInitializedTicksResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new NumNextInitializedTicksResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new NumNextInitializedTicksResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(NumNextInitializedTicksResponse, a, b);
    }
}
NumNextInitializedTicksResponse.runtime = proto3;
NumNextInitializedTicksResponse.typeName = "osmosis.concentratedliquidity.v1beta1.NumNextInitializedTicksResponse";
NumNextInitializedTicksResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity_depths", kind: "message", T: TickLiquidityNet, repeated: true },
    { no: 2, name: "current_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "current_liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=query_pb.js.map