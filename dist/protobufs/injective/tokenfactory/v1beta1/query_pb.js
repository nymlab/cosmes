// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/tokenfactory/v1beta1/query.proto (package injective.tokenfactory.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { DenomAuthorityMetadata } from "./authorityMetadata_pb.js";
import { GenesisState } from "./genesis_pb.js";
/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message injective.tokenfactory.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "injective.tokenfactory.v1beta1.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message injective.tokenfactory.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "injective.tokenfactory.v1beta1.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * QueryDenomAuthorityMetadataRequest defines the request structure for the
 * DenomAuthorityMetadata gRPC query.
 *
 * @generated from message injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest
 */
export class QueryDenomAuthorityMetadataRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string creator = 1;
         */
        this.creator = "";
        /**
         * @generated from field: string sub_denom = 2;
         */
        this.subDenom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomAuthorityMetadataRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomAuthorityMetadataRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomAuthorityMetadataRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomAuthorityMetadataRequest, a, b);
    }
}
QueryDenomAuthorityMetadataRequest.runtime = proto3;
QueryDenomAuthorityMetadataRequest.typeName = "injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest";
QueryDenomAuthorityMetadataRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sub_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryDenomAuthorityMetadataResponse defines the response structure for the
 * DenomAuthorityMetadata gRPC query.
 *
 * @generated from message injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse
 */
export class QueryDenomAuthorityMetadataResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomAuthorityMetadataResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomAuthorityMetadataResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomAuthorityMetadataResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomAuthorityMetadataResponse, a, b);
    }
}
QueryDenomAuthorityMetadataResponse.runtime = proto3;
QueryDenomAuthorityMetadataResponse.typeName = "injective.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse";
QueryDenomAuthorityMetadataResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "authority_metadata", kind: "message", T: DenomAuthorityMetadata },
]);
/**
 * QueryDenomsFromCreatorRequest defines the request structure for the
 * DenomsFromCreator gRPC query.
 *
 * @generated from message injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest
 */
export class QueryDenomsFromCreatorRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string creator = 1;
         */
        this.creator = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomsFromCreatorRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomsFromCreatorRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomsFromCreatorRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomsFromCreatorRequest, a, b);
    }
}
QueryDenomsFromCreatorRequest.runtime = proto3;
QueryDenomsFromCreatorRequest.typeName = "injective.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest";
QueryDenomsFromCreatorRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryDenomsFromCreatorRequest defines the response structure for the
 * DenomsFromCreator gRPC query.
 *
 * @generated from message injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse
 */
export class QueryDenomsFromCreatorResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string denoms = 1;
         */
        this.denoms = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomsFromCreatorResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomsFromCreatorResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomsFromCreatorResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomsFromCreatorResponse, a, b);
    }
}
QueryDenomsFromCreatorResponse.runtime = proto3;
QueryDenomsFromCreatorResponse.typeName = "injective.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse";
QueryDenomsFromCreatorResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denoms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * QueryModuleStateRequest is the request type for the
 * Query/TokenfactoryModuleState RPC method.
 *
 * @generated from message injective.tokenfactory.v1beta1.QueryModuleStateRequest
 */
export class QueryModuleStateRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleStateRequest, a, b);
    }
}
QueryModuleStateRequest.runtime = proto3;
QueryModuleStateRequest.typeName = "injective.tokenfactory.v1beta1.QueryModuleStateRequest";
QueryModuleStateRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryModuleStateResponse is the response type for the
 * Query/TokenfactoryModuleState RPC method.
 *
 * @generated from message injective.tokenfactory.v1beta1.QueryModuleStateResponse
 */
export class QueryModuleStateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleStateResponse, a, b);
    }
}
QueryModuleStateResponse.runtime = proto3;
QueryModuleStateResponse.typeName = "injective.tokenfactory.v1beta1.QueryModuleStateResponse";
QueryModuleStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: GenesisState },
]);
//# sourceMappingURL=query_pb.js.map