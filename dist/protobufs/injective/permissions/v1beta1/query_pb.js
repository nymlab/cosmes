// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/permissions/v1beta1/query.proto (package injective.permissions.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Namespace, Voucher } from "./permissions_pb.js";
/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "injective.permissions.v1beta1.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "injective.permissions.v1beta1.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * QueryAllNamespacesRequest is the request type for the Query/AllNamespaces RPC
 * method.
 *
 * @generated from message injective.permissions.v1beta1.QueryAllNamespacesRequest
 */
export class QueryAllNamespacesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAllNamespacesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAllNamespacesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAllNamespacesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAllNamespacesRequest, a, b);
    }
}
QueryAllNamespacesRequest.runtime = proto3;
QueryAllNamespacesRequest.typeName = "injective.permissions.v1beta1.QueryAllNamespacesRequest";
QueryAllNamespacesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryAllNamespacesResponse is the response type for the Query/AllNamespaces
 * RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryAllNamespacesResponse
 */
export class QueryAllNamespacesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.permissions.v1beta1.Namespace namespaces = 1;
         */
        this.namespaces = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAllNamespacesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAllNamespacesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAllNamespacesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAllNamespacesResponse, a, b);
    }
}
QueryAllNamespacesResponse.runtime = proto3;
QueryAllNamespacesResponse.typeName = "injective.permissions.v1beta1.QueryAllNamespacesResponse";
QueryAllNamespacesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "namespaces", kind: "message", T: Namespace, repeated: true },
]);
/**
 * QueryNamespaceByDenomRequest is the request type for the
 * Query/NamespaceByDenom RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryNamespaceByDenomRequest
 */
export class QueryNamespaceByDenomRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        /**
         * @generated from field: bool include_roles = 2;
         */
        this.includeRoles = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryNamespaceByDenomRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryNamespaceByDenomRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryNamespaceByDenomRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryNamespaceByDenomRequest, a, b);
    }
}
QueryNamespaceByDenomRequest.runtime = proto3;
QueryNamespaceByDenomRequest.typeName = "injective.permissions.v1beta1.QueryNamespaceByDenomRequest";
QueryNamespaceByDenomRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "include_roles", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * QueryNamespaceByDenomResponse is the response type for the
 * Query/NamespaceByDenom RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryNamespaceByDenomResponse
 */
export class QueryNamespaceByDenomResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryNamespaceByDenomResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryNamespaceByDenomResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryNamespaceByDenomResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryNamespaceByDenomResponse, a, b);
    }
}
QueryNamespaceByDenomResponse.runtime = proto3;
QueryNamespaceByDenomResponse.typeName = "injective.permissions.v1beta1.QueryNamespaceByDenomResponse";
QueryNamespaceByDenomResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "message", T: Namespace },
]);
/**
 * QueryAddressesByRoleRequest is the request type for the Query/AddressesByRole
 * RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryAddressesByRoleRequest
 */
export class QueryAddressesByRoleRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        /**
         * @generated from field: string role = 2;
         */
        this.role = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAddressesByRoleRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAddressesByRoleRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAddressesByRoleRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAddressesByRoleRequest, a, b);
    }
}
QueryAddressesByRoleRequest.runtime = proto3;
QueryAddressesByRoleRequest.typeName = "injective.permissions.v1beta1.QueryAddressesByRoleRequest";
QueryAddressesByRoleRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryAddressesByRoleResponse is the response type for the
 * Query/AddressesByRole RPC method.
 *
 * @generated from message injective.permissions.v1beta1.QueryAddressesByRoleResponse
 */
export class QueryAddressesByRoleResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string addresses = 1;
         */
        this.addresses = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAddressesByRoleResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAddressesByRoleResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAddressesByRoleResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAddressesByRoleResponse, a, b);
    }
}
QueryAddressesByRoleResponse.runtime = proto3;
QueryAddressesByRoleResponse.typeName = "injective.permissions.v1beta1.QueryAddressesByRoleResponse";
QueryAddressesByRoleResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message injective.permissions.v1beta1.QueryAddressRolesRequest
 */
export class QueryAddressRolesRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        /**
         * @generated from field: string address = 2;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAddressRolesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAddressRolesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAddressRolesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAddressRolesRequest, a, b);
    }
}
QueryAddressRolesRequest.runtime = proto3;
QueryAddressRolesRequest.typeName = "injective.permissions.v1beta1.QueryAddressRolesRequest";
QueryAddressRolesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.permissions.v1beta1.QueryAddressRolesResponse
 */
export class QueryAddressRolesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string roles = 1;
         */
        this.roles = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAddressRolesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAddressRolesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAddressRolesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAddressRolesResponse, a, b);
    }
}
QueryAddressRolesResponse.runtime = proto3;
QueryAddressRolesResponse.typeName = "injective.permissions.v1beta1.QueryAddressRolesResponse";
QueryAddressRolesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * @generated from message injective.permissions.v1beta1.QueryVouchersForAddressRequest
 */
export class QueryVouchersForAddressRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string address = 1;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryVouchersForAddressRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryVouchersForAddressRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryVouchersForAddressRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryVouchersForAddressRequest, a, b);
    }
}
QueryVouchersForAddressRequest.runtime = proto3;
QueryVouchersForAddressRequest.typeName = "injective.permissions.v1beta1.QueryVouchersForAddressRequest";
QueryVouchersForAddressRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.permissions.v1beta1.QueryVouchersForAddressResponse
 */
export class QueryVouchersForAddressResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, injective.permissions.v1beta1.Voucher> vouchers = 1;
         */
        this.vouchers = {};
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryVouchersForAddressResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryVouchersForAddressResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryVouchersForAddressResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryVouchersForAddressResponse, a, b);
    }
}
QueryVouchersForAddressResponse.runtime = proto3;
QueryVouchersForAddressResponse.typeName = "injective.permissions.v1beta1.QueryVouchersForAddressResponse";
QueryVouchersForAddressResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "vouchers", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Voucher } },
]);
//# sourceMappingURL=query_pb.js.map