// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/lightclients/wasm/v1/genesis.proto (package ibc.lightclients.wasm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * GenesisState defines 08-wasm's keeper genesis state
 *
 * @generated from message ibc.lightclients.wasm.v1.GenesisState
 */
export class GenesisState extends Message {
    constructor(data) {
        super();
        /**
         * uploaded light client wasm contracts
         *
         * @generated from field: repeated ibc.lightclients.wasm.v1.Contract contracts = 1;
         */
        this.contracts = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GenesisState, a, b);
    }
}
GenesisState.runtime = proto3;
GenesisState.typeName = "ibc.lightclients.wasm.v1.GenesisState";
GenesisState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "contracts", kind: "message", T: Contract, repeated: true },
]);
/**
 * Contract stores contract code
 *
 * @generated from message ibc.lightclients.wasm.v1.Contract
 */
export class Contract extends Message {
    constructor(data) {
        super();
        /**
         * contract byte code
         *
         * @generated from field: bytes code_bytes = 1;
         */
        this.codeBytes = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Contract().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Contract().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Contract().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Contract, a, b);
    }
}
Contract.runtime = proto3;
Contract.typeName = "ibc.lightclients.wasm.v1.Contract";
Contract.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "code_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
//# sourceMappingURL=genesis_pb.js.map