// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmwasm/wasm/v1/genesis.proto (package cosmwasm.wasm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { CodeInfo, ContractCodeHistoryEntry, ContractInfo, Model, Params } from "./types_pb.js";
/**
 * GenesisState - genesis state of x/wasm
 *
 * @generated from message cosmwasm.wasm.v1.GenesisState
 */
export class GenesisState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmwasm.wasm.v1.Code codes = 2;
         */
        this.codes = [];
        /**
         * @generated from field: repeated cosmwasm.wasm.v1.Contract contracts = 3;
         */
        this.contracts = [];
        /**
         * @generated from field: repeated cosmwasm.wasm.v1.Sequence sequences = 4;
         */
        this.sequences = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GenesisState, a, b);
    }
}
GenesisState.runtime = proto3;
GenesisState.typeName = "cosmwasm.wasm.v1.GenesisState";
GenesisState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "codes", kind: "message", T: Code, repeated: true },
    { no: 3, name: "contracts", kind: "message", T: Contract, repeated: true },
    { no: 4, name: "sequences", kind: "message", T: Sequence, repeated: true },
]);
/**
 * Code struct encompasses CodeInfo and CodeBytes
 *
 * @generated from message cosmwasm.wasm.v1.Code
 */
export class Code extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 code_id = 1;
         */
        this.codeId = protoInt64.zero;
        /**
         * @generated from field: bytes code_bytes = 3;
         */
        this.codeBytes = new Uint8Array(0);
        /**
         * Pinned to wasmvm cache
         *
         * @generated from field: bool pinned = 4;
         */
        this.pinned = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Code().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Code().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Code().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Code, a, b);
    }
}
Code.runtime = proto3;
Code.typeName = "cosmwasm.wasm.v1.Code";
Code.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "code_info", kind: "message", T: CodeInfo },
    { no: 3, name: "code_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "pinned", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * Contract struct encompasses ContractAddress, ContractInfo, and ContractState
 *
 * @generated from message cosmwasm.wasm.v1.Contract
 */
export class Contract extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string contract_address = 1;
         */
        this.contractAddress = "";
        /**
         * @generated from field: repeated cosmwasm.wasm.v1.Model contract_state = 3;
         */
        this.contractState = [];
        /**
         * @generated from field: repeated cosmwasm.wasm.v1.ContractCodeHistoryEntry contract_code_history = 4;
         */
        this.contractCodeHistory = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Contract().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Contract().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Contract().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Contract, a, b);
    }
}
Contract.runtime = proto3;
Contract.typeName = "cosmwasm.wasm.v1.Contract";
Contract.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract_info", kind: "message", T: ContractInfo },
    { no: 3, name: "contract_state", kind: "message", T: Model, repeated: true },
    { no: 4, name: "contract_code_history", kind: "message", T: ContractCodeHistoryEntry, repeated: true },
]);
/**
 * Sequence key and value of an id generation counter
 *
 * @generated from message cosmwasm.wasm.v1.Sequence
 */
export class Sequence extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes id_key = 1;
         */
        this.idKey = new Uint8Array(0);
        /**
         * @generated from field: uint64 value = 2;
         */
        this.value = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Sequence().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Sequence().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Sequence().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Sequence, a, b);
    }
}
Sequence.runtime = proto3;
Sequence.typeName = "cosmwasm.wasm.v1.Sequence";
Sequence.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "value", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
//# sourceMappingURL=genesis_pb.js.map