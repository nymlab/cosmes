// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ibc/applications/transfer/v1/query.proto (package ibc.applications.transfer.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { DenomTrace, Params } from "./transfer_pb.js";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Coin } from "../../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * QueryDenomTraceRequest is the request type for the Query/DenomTrace RPC
 * method
 *
 * @generated from message ibc.applications.transfer.v1.QueryDenomTraceRequest
 */
export class QueryDenomTraceRequest extends Message {
    constructor(data) {
        super();
        /**
         * hash (in hex format) or denom (full denom with ibc prefix) of the denomination trace information.
         *
         * @generated from field: string hash = 1;
         */
        this.hash = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomTraceRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomTraceRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomTraceRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomTraceRequest, a, b);
    }
}
QueryDenomTraceRequest.runtime = proto3;
QueryDenomTraceRequest.typeName = "ibc.applications.transfer.v1.QueryDenomTraceRequest";
QueryDenomTraceRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC
 * method.
 *
 * @generated from message ibc.applications.transfer.v1.QueryDenomTraceResponse
 */
export class QueryDenomTraceResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomTraceResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomTraceResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomTraceResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomTraceResponse, a, b);
    }
}
QueryDenomTraceResponse.runtime = proto3;
QueryDenomTraceResponse.typeName = "ibc.applications.transfer.v1.QueryDenomTraceResponse";
QueryDenomTraceResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom_trace", kind: "message", T: DenomTrace },
]);
/**
 * QueryConnectionsRequest is the request type for the Query/DenomTraces RPC
 * method
 *
 * @generated from message ibc.applications.transfer.v1.QueryDenomTracesRequest
 */
export class QueryDenomTracesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomTracesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomTracesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomTracesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomTracesRequest, a, b);
    }
}
QueryDenomTracesRequest.runtime = proto3;
QueryDenomTracesRequest.typeName = "ibc.applications.transfer.v1.QueryDenomTracesRequest";
QueryDenomTracesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * QueryConnectionsResponse is the response type for the Query/DenomTraces RPC
 * method.
 *
 * @generated from message ibc.applications.transfer.v1.QueryDenomTracesResponse
 */
export class QueryDenomTracesResponse extends Message {
    constructor(data) {
        super();
        /**
         * denom_traces returns all denominations trace information.
         *
         * @generated from field: repeated ibc.applications.transfer.v1.DenomTrace denom_traces = 1;
         */
        this.denomTraces = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomTracesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomTracesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomTracesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomTracesResponse, a, b);
    }
}
QueryDenomTracesResponse.runtime = proto3;
QueryDenomTracesResponse.typeName = "ibc.applications.transfer.v1.QueryDenomTracesResponse";
QueryDenomTracesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom_traces", kind: "message", T: DenomTrace, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message ibc.applications.transfer.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "ibc.applications.transfer.v1.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message ibc.applications.transfer.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "ibc.applications.transfer.v1.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * QueryDenomHashRequest is the request type for the Query/DenomHash RPC
 * method
 *
 * @generated from message ibc.applications.transfer.v1.QueryDenomHashRequest
 */
export class QueryDenomHashRequest extends Message {
    constructor(data) {
        super();
        /**
         * The denomination trace ([port_id]/[channel_id])+/[denom]
         *
         * @generated from field: string trace = 1;
         */
        this.trace = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomHashRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomHashRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomHashRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomHashRequest, a, b);
    }
}
QueryDenomHashRequest.runtime = proto3;
QueryDenomHashRequest.typeName = "ibc.applications.transfer.v1.QueryDenomHashRequest";
QueryDenomHashRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "trace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryDenomHashResponse is the response type for the Query/DenomHash RPC
 * method.
 *
 * @generated from message ibc.applications.transfer.v1.QueryDenomHashResponse
 */
export class QueryDenomHashResponse extends Message {
    constructor(data) {
        super();
        /**
         * hash (in hex format) of the denomination trace information.
         *
         * @generated from field: string hash = 1;
         */
        this.hash = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomHashResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomHashResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomHashResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomHashResponse, a, b);
    }
}
QueryDenomHashResponse.runtime = proto3;
QueryDenomHashResponse.typeName = "ibc.applications.transfer.v1.QueryDenomHashResponse";
QueryDenomHashResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryEscrowAddressRequest is the request type for the EscrowAddress RPC method.
 *
 * @generated from message ibc.applications.transfer.v1.QueryEscrowAddressRequest
 */
export class QueryEscrowAddressRequest extends Message {
    constructor(data) {
        super();
        /**
         * unique port identifier
         *
         * @generated from field: string port_id = 1;
         */
        this.portId = "";
        /**
         * unique channel identifier
         *
         * @generated from field: string channel_id = 2;
         */
        this.channelId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryEscrowAddressRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryEscrowAddressRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryEscrowAddressRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryEscrowAddressRequest, a, b);
    }
}
QueryEscrowAddressRequest.runtime = proto3;
QueryEscrowAddressRequest.typeName = "ibc.applications.transfer.v1.QueryEscrowAddressRequest";
QueryEscrowAddressRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryEscrowAddressResponse is the response type of the EscrowAddress RPC method.
 *
 * @generated from message ibc.applications.transfer.v1.QueryEscrowAddressResponse
 */
export class QueryEscrowAddressResponse extends Message {
    constructor(data) {
        super();
        /**
         * the escrow account address
         *
         * @generated from field: string escrow_address = 1;
         */
        this.escrowAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryEscrowAddressResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryEscrowAddressResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryEscrowAddressResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryEscrowAddressResponse, a, b);
    }
}
QueryEscrowAddressResponse.runtime = proto3;
QueryEscrowAddressResponse.typeName = "ibc.applications.transfer.v1.QueryEscrowAddressResponse";
QueryEscrowAddressResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "escrow_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryTotalEscrowForDenomRequest is the request type for TotalEscrowForDenom RPC method.
 *
 * @generated from message ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest
 */
export class QueryTotalEscrowForDenomRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryTotalEscrowForDenomRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryTotalEscrowForDenomRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryTotalEscrowForDenomRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryTotalEscrowForDenomRequest, a, b);
    }
}
QueryTotalEscrowForDenomRequest.runtime = proto3;
QueryTotalEscrowForDenomRequest.typeName = "ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest";
QueryTotalEscrowForDenomRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * QueryTotalEscrowForDenomResponse is the response type for TotalEscrowForDenom RPC method.
 *
 * @generated from message ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse
 */
export class QueryTotalEscrowForDenomResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryTotalEscrowForDenomResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryTotalEscrowForDenomResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryTotalEscrowForDenomResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryTotalEscrowForDenomResponse, a, b);
    }
}
QueryTotalEscrowForDenomResponse.runtime = proto3;
QueryTotalEscrowForDenomResponse.typeName = "ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse";
QueryTotalEscrowForDenomResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin },
]);
//# sourceMappingURL=query_pb.js.map