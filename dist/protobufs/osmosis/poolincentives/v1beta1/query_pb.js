// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/poolincentives/v1beta1/query.proto (package osmosis.poolincentives.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Duration, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DistrInfo, Params } from "./incentives_pb.js";
import { Gauge } from "../../incentives/gauge_pb.js";
/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryGaugeIdsRequest
 */
export class QueryGaugeIdsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGaugeIdsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGaugeIdsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGaugeIdsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGaugeIdsRequest, a, b);
    }
}
QueryGaugeIdsRequest.runtime = proto3;
QueryGaugeIdsRequest.typeName = "osmosis.poolincentives.v1beta1.QueryGaugeIdsRequest";
QueryGaugeIdsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse
 */
export class QueryGaugeIdsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse.GaugeIdWithDuration gauge_ids_with_duration = 1;
         */
        this.gaugeIdsWithDuration = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGaugeIdsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGaugeIdsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGaugeIdsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGaugeIdsResponse, a, b);
    }
}
QueryGaugeIdsResponse.runtime = proto3;
QueryGaugeIdsResponse.typeName = "osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse";
QueryGaugeIdsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge_ids_with_duration", kind: "message", T: QueryGaugeIdsResponse_GaugeIdWithDuration, repeated: true },
]);
/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse.GaugeIdWithDuration
 */
export class QueryGaugeIdsResponse_GaugeIdWithDuration extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 gauge_id = 1;
         */
        this.gaugeId = protoInt64.zero;
        /**
         * @generated from field: string gauge_incentive_percentage = 3;
         */
        this.gaugeIncentivePercentage = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGaugeIdsResponse_GaugeIdWithDuration().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGaugeIdsResponse_GaugeIdWithDuration().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGaugeIdsResponse_GaugeIdWithDuration().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGaugeIdsResponse_GaugeIdWithDuration, a, b);
    }
}
QueryGaugeIdsResponse_GaugeIdWithDuration.runtime = proto3;
QueryGaugeIdsResponse_GaugeIdWithDuration.typeName = "osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse.GaugeIdWithDuration";
QueryGaugeIdsResponse_GaugeIdWithDuration.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "duration", kind: "message", T: Duration },
    { no: 3, name: "gauge_incentive_percentage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryDistrInfoRequest
 */
export class QueryDistrInfoRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDistrInfoRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDistrInfoRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDistrInfoRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDistrInfoRequest, a, b);
    }
}
QueryDistrInfoRequest.runtime = proto3;
QueryDistrInfoRequest.typeName = "osmosis.poolincentives.v1beta1.QueryDistrInfoRequest";
QueryDistrInfoRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryDistrInfoResponse
 */
export class QueryDistrInfoResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDistrInfoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDistrInfoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDistrInfoResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDistrInfoResponse, a, b);
    }
}
QueryDistrInfoResponse.runtime = proto3;
QueryDistrInfoResponse.typeName = "osmosis.poolincentives.v1beta1.QueryDistrInfoResponse";
QueryDistrInfoResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "distr_info", kind: "message", T: DistrInfo },
]);
/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "osmosis.poolincentives.v1beta1.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "osmosis.poolincentives.v1beta1.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryLockableDurationsRequest
 */
export class QueryLockableDurationsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryLockableDurationsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryLockableDurationsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryLockableDurationsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryLockableDurationsRequest, a, b);
    }
}
QueryLockableDurationsRequest.runtime = proto3;
QueryLockableDurationsRequest.typeName = "osmosis.poolincentives.v1beta1.QueryLockableDurationsRequest";
QueryLockableDurationsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryLockableDurationsResponse
 */
export class QueryLockableDurationsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated google.protobuf.Duration lockable_durations = 1;
         */
        this.lockableDurations = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryLockableDurationsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryLockableDurationsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryLockableDurationsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryLockableDurationsResponse, a, b);
    }
}
QueryLockableDurationsResponse.runtime = proto3;
QueryLockableDurationsResponse.typeName = "osmosis.poolincentives.v1beta1.QueryLockableDurationsResponse";
QueryLockableDurationsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "lockable_durations", kind: "message", T: Duration, repeated: true },
]);
/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsRequest
 */
export class QueryIncentivizedPoolsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryIncentivizedPoolsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryIncentivizedPoolsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryIncentivizedPoolsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryIncentivizedPoolsRequest, a, b);
    }
}
QueryIncentivizedPoolsRequest.runtime = proto3;
QueryIncentivizedPoolsRequest.typeName = "osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsRequest";
QueryIncentivizedPoolsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.poolincentives.v1beta1.IncentivizedPool
 */
export class IncentivizedPool extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        /**
         * @generated from field: uint64 gauge_id = 3;
         */
        this.gaugeId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IncentivizedPool().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IncentivizedPool().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IncentivizedPool().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(IncentivizedPool, a, b);
    }
}
IncentivizedPool.runtime = proto3;
IncentivizedPool.typeName = "osmosis.poolincentives.v1beta1.IncentivizedPool";
IncentivizedPool.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "lockable_duration", kind: "message", T: Duration },
    { no: 3, name: "gauge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsResponse
 */
export class QueryIncentivizedPoolsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.poolincentives.v1beta1.IncentivizedPool incentivized_pools = 1;
         */
        this.incentivizedPools = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryIncentivizedPoolsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryIncentivizedPoolsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryIncentivizedPoolsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryIncentivizedPoolsResponse, a, b);
    }
}
QueryIncentivizedPoolsResponse.runtime = proto3;
QueryIncentivizedPoolsResponse.typeName = "osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsResponse";
QueryIncentivizedPoolsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "incentivized_pools", kind: "message", T: IncentivizedPool, repeated: true },
]);
/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryExternalIncentiveGaugesRequest
 */
export class QueryExternalIncentiveGaugesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryExternalIncentiveGaugesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryExternalIncentiveGaugesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryExternalIncentiveGaugesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryExternalIncentiveGaugesRequest, a, b);
    }
}
QueryExternalIncentiveGaugesRequest.runtime = proto3;
QueryExternalIncentiveGaugesRequest.typeName = "osmosis.poolincentives.v1beta1.QueryExternalIncentiveGaugesRequest";
QueryExternalIncentiveGaugesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.poolincentives.v1beta1.QueryExternalIncentiveGaugesResponse
 */
export class QueryExternalIncentiveGaugesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.incentives.Gauge data = 1;
         */
        this.data = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryExternalIncentiveGaugesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryExternalIncentiveGaugesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryExternalIncentiveGaugesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryExternalIncentiveGaugesResponse, a, b);
    }
}
QueryExternalIncentiveGaugesResponse.runtime = proto3;
QueryExternalIncentiveGaugesResponse.typeName = "osmosis.poolincentives.v1beta1.QueryExternalIncentiveGaugesResponse";
QueryExternalIncentiveGaugesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Gauge, repeated: true },
]);
//# sourceMappingURL=query_pb.js.map