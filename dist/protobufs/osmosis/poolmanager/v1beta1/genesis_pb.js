// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/poolmanager/v1beta1/genesis.proto (package osmosis.poolmanager.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { ModuleRoute } from "./module_route_pb.js";
import { DenomPairTakerFee } from "./tx_pb.js";
/**
 * Params holds parameters for the poolmanager module
 *
 * @generated from message osmosis.poolmanager.v1beta1.Params
 */
export class Params extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin pool_creation_fee = 1;
         */
        this.poolCreationFee = [];
        /**
         * authorized_quote_denoms is a list of quote denoms that can be used as
         * token1 when creating a concentrated pool. We limit the quote assets to a
         * small set for the purposes of having convenient price increments stemming
         * from tick to price conversion. These increments are in a human readable
         * magnitude only for token1 as a quote. For limit orders in the future, this
         * will be a desirable property in terms of UX as to allow users to set limit
         * orders at prices in terms of token1 (quote asset) that are easy to reason
         * about.
         *
         * @generated from field: repeated string authorized_quote_denoms = 3;
         */
        this.authorizedQuoteDenoms = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Params().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Params().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Params().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Params, a, b);
    }
}
Params.runtime = proto3;
Params.typeName = "osmosis.poolmanager.v1beta1.Params";
Params.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_creation_fee", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "taker_fee_params", kind: "message", T: TakerFeeParams },
    { no: 3, name: "authorized_quote_denoms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * GenesisState defines the poolmanager module's genesis state.
 *
 * @generated from message osmosis.poolmanager.v1beta1.GenesisState
 */
export class GenesisState extends Message {
    constructor(data) {
        super();
        /**
         * the next_pool_id
         *
         * @generated from field: uint64 next_pool_id = 1;
         */
        this.nextPoolId = protoInt64.zero;
        /**
         * pool_routes is the container of the mappings from pool id to pool type.
         *
         * @generated from field: repeated osmosis.poolmanager.v1beta1.ModuleRoute pool_routes = 3;
         */
        this.poolRoutes = [];
        /**
         * @generated from field: repeated osmosis.poolmanager.v1beta1.PoolVolume pool_volumes = 5;
         */
        this.poolVolumes = [];
        /**
         * @generated from field: repeated osmosis.poolmanager.v1beta1.DenomPairTakerFee denom_pair_taker_fee_store = 6;
         */
        this.denomPairTakerFeeStore = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GenesisState, a, b);
    }
}
GenesisState.runtime = proto3;
GenesisState.typeName = "osmosis.poolmanager.v1beta1.GenesisState";
GenesisState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "next_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "params", kind: "message", T: Params },
    { no: 3, name: "pool_routes", kind: "message", T: ModuleRoute, repeated: true },
    { no: 4, name: "taker_fees_tracker", kind: "message", T: TakerFeesTracker },
    { no: 5, name: "pool_volumes", kind: "message", T: PoolVolume, repeated: true },
    { no: 6, name: "denom_pair_taker_fee_store", kind: "message", T: DenomPairTakerFee, repeated: true },
]);
/**
 * TakerFeeParams consolidates the taker fee parameters for the poolmanager.
 *
 * @generated from message osmosis.poolmanager.v1beta1.TakerFeeParams
 */
export class TakerFeeParams extends Message {
    constructor(data) {
        super();
        /**
         * default_taker_fee is the fee used when creating a new pool that doesn't
         * fall under a custom pool taker fee or stableswap taker fee category.
         *
         * @generated from field: string default_taker_fee = 1;
         */
        this.defaultTakerFee = "";
        /**
         * admin_addresses is a list of addresses that are allowed to set and remove
         * custom taker fees for denom pairs. Governance also has the ability to set
         * and remove custom taker fees for denom pairs, but with the normal
         * governance delay.
         *
         * @generated from field: repeated string admin_addresses = 4;
         */
        this.adminAddresses = [];
        /**
         * community_pool_denom_to_swap_non_whitelisted_assets_to is the denom that
         * non-whitelisted taker fees will be swapped to before being sent to
         * the community pool.
         *
         * @generated from field: string community_pool_denom_to_swap_non_whitelisted_assets_to = 5;
         */
        this.communityPoolDenomToSwapNonWhitelistedAssetsTo = "";
        /**
         * reduced_fee_whitelist is a list of addresses that are
         * allowed to pay a reduce taker fee when performing a swap
         * (i.e. swap without paying the taker fee).
         * It is intended to be used for integrators who meet qualifying factors
         * that are approved by governance.
         * Initially, the taker fee is allowed to be bypassed completely. However
         * In the future, we will charge a reduced taker fee instead of no fee at all.
         *
         * @generated from field: repeated string reduced_fee_whitelist = 6;
         */
        this.reducedFeeWhitelist = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TakerFeeParams().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TakerFeeParams().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TakerFeeParams().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TakerFeeParams, a, b);
    }
}
TakerFeeParams.runtime = proto3;
TakerFeeParams.typeName = "osmosis.poolmanager.v1beta1.TakerFeeParams";
TakerFeeParams.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "default_taker_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "osmo_taker_fee_distribution", kind: "message", T: TakerFeeDistributionPercentage },
    { no: 3, name: "non_osmo_taker_fee_distribution", kind: "message", T: TakerFeeDistributionPercentage },
    { no: 4, name: "admin_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "community_pool_denom_to_swap_non_whitelisted_assets_to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "reduced_fee_whitelist", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 * TakerFeeDistributionPercentage defines what percent of the taker fee category
 * gets distributed to the available categories.
 *
 * @generated from message osmosis.poolmanager.v1beta1.TakerFeeDistributionPercentage
 */
export class TakerFeeDistributionPercentage extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string staking_rewards = 1;
         */
        this.stakingRewards = "";
        /**
         * @generated from field: string community_pool = 2;
         */
        this.communityPool = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TakerFeeDistributionPercentage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TakerFeeDistributionPercentage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TakerFeeDistributionPercentage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TakerFeeDistributionPercentage, a, b);
    }
}
TakerFeeDistributionPercentage.runtime = proto3;
TakerFeeDistributionPercentage.typeName = "osmosis.poolmanager.v1beta1.TakerFeeDistributionPercentage";
TakerFeeDistributionPercentage.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "staking_rewards", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "community_pool", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.poolmanager.v1beta1.TakerFeesTracker
 */
export class TakerFeesTracker extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin taker_fees_to_stakers = 1;
         */
        this.takerFeesToStakers = [];
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin taker_fees_to_community_pool = 2;
         */
        this.takerFeesToCommunityPool = [];
        /**
         * @generated from field: int64 height_accounting_starts_from = 3;
         */
        this.heightAccountingStartsFrom = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TakerFeesTracker().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TakerFeesTracker().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TakerFeesTracker().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TakerFeesTracker, a, b);
    }
}
TakerFeesTracker.runtime = proto3;
TakerFeesTracker.typeName = "osmosis.poolmanager.v1beta1.TakerFeesTracker";
TakerFeesTracker.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "taker_fees_to_stakers", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "taker_fees_to_community_pool", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "height_accounting_starts_from", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * PoolVolume stores the KVStore entries for each pool's volume, which
 * is used in export/import genesis.
 *
 * @generated from message osmosis.poolmanager.v1beta1.PoolVolume
 */
export class PoolVolume extends Message {
    constructor(data) {
        super();
        /**
         * pool_id is the id of the pool.
         *
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        /**
         * pool_volume is the cumulative volume of the pool.
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin pool_volume = 2;
         */
        this.poolVolume = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PoolVolume().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PoolVolume().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PoolVolume().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PoolVolume, a, b);
    }
}
PoolVolume.runtime = proto3;
PoolVolume.typeName = "osmosis.poolmanager.v1beta1.PoolVolume";
PoolVolume.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pool_volume", kind: "message", T: Coin, repeated: true },
]);
//# sourceMappingURL=genesis_pb.js.map