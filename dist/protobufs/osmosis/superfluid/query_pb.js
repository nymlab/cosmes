// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/superfluid/query.proto (package osmosis.superfluid, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { ConcentratedPoolUserPositionRecord, OsmoEquivalentMultiplierRecord, SuperfluidAsset, SuperfluidAssetType, SuperfluidDelegationRecord } from "./superfluid_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { SyntheticLock } from "../lockup/lock_pb.js";
import { DelegationResponse } from "../../cosmos/staking/v1beta1/staking_pb.js";
/**
 * @generated from message osmosis.superfluid.QueryParamsRequest
 */
export class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "osmosis.superfluid.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.superfluid.QueryParamsResponse
 */
export class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "osmosis.superfluid.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
/**
 * @generated from message osmosis.superfluid.AssetTypeRequest
 */
export class AssetTypeRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AssetTypeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AssetTypeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AssetTypeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AssetTypeRequest, a, b);
    }
}
AssetTypeRequest.runtime = proto3;
AssetTypeRequest.typeName = "osmosis.superfluid.AssetTypeRequest";
AssetTypeRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.AssetTypeResponse
 */
export class AssetTypeResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: osmosis.superfluid.SuperfluidAssetType asset_type = 1;
         */
        this.assetType = SuperfluidAssetType.SuperfluidAssetTypeNative;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AssetTypeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AssetTypeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AssetTypeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AssetTypeResponse, a, b);
    }
}
AssetTypeResponse.runtime = proto3;
AssetTypeResponse.typeName = "osmosis.superfluid.AssetTypeResponse";
AssetTypeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_type", kind: "enum", T: proto3.getEnumType(SuperfluidAssetType) },
]);
/**
 * @generated from message osmosis.superfluid.AllAssetsRequest
 */
export class AllAssetsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AllAssetsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AllAssetsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AllAssetsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AllAssetsRequest, a, b);
    }
}
AllAssetsRequest.runtime = proto3;
AllAssetsRequest.typeName = "osmosis.superfluid.AllAssetsRequest";
AllAssetsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.superfluid.AllAssetsResponse
 */
export class AllAssetsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.superfluid.SuperfluidAsset assets = 1;
         */
        this.assets = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AllAssetsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AllAssetsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AllAssetsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AllAssetsResponse, a, b);
    }
}
AllAssetsResponse.runtime = proto3;
AllAssetsResponse.typeName = "osmosis.superfluid.AllAssetsResponse";
AllAssetsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "assets", kind: "message", T: SuperfluidAsset, repeated: true },
]);
/**
 * @generated from message osmosis.superfluid.AssetMultiplierRequest
 */
export class AssetMultiplierRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AssetMultiplierRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AssetMultiplierRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AssetMultiplierRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AssetMultiplierRequest, a, b);
    }
}
AssetMultiplierRequest.runtime = proto3;
AssetMultiplierRequest.typeName = "osmosis.superfluid.AssetMultiplierRequest";
AssetMultiplierRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.AssetMultiplierResponse
 */
export class AssetMultiplierResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AssetMultiplierResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AssetMultiplierResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AssetMultiplierResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AssetMultiplierResponse, a, b);
    }
}
AssetMultiplierResponse.runtime = proto3;
AssetMultiplierResponse.typeName = "osmosis.superfluid.AssetMultiplierResponse";
AssetMultiplierResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "osmo_equivalent_multiplier", kind: "message", T: OsmoEquivalentMultiplierRecord },
]);
/**
 * @generated from message osmosis.superfluid.SuperfluidIntermediaryAccountInfo
 */
export class SuperfluidIntermediaryAccountInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        /**
         * @generated from field: string val_addr = 2;
         */
        this.valAddr = "";
        /**
         * @generated from field: uint64 gauge_id = 3;
         */
        this.gaugeId = protoInt64.zero;
        /**
         * @generated from field: string address = 4;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuperfluidIntermediaryAccountInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperfluidIntermediaryAccountInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperfluidIntermediaryAccountInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuperfluidIntermediaryAccountInfo, a, b);
    }
}
SuperfluidIntermediaryAccountInfo.runtime = proto3;
SuperfluidIntermediaryAccountInfo.typeName = "osmosis.superfluid.SuperfluidIntermediaryAccountInfo";
SuperfluidIntermediaryAccountInfo.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gauge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.AllIntermediaryAccountsRequest
 */
export class AllIntermediaryAccountsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AllIntermediaryAccountsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AllIntermediaryAccountsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AllIntermediaryAccountsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AllIntermediaryAccountsRequest, a, b);
    }
}
AllIntermediaryAccountsRequest.runtime = proto3;
AllIntermediaryAccountsRequest.typeName = "osmosis.superfluid.AllIntermediaryAccountsRequest";
AllIntermediaryAccountsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * @generated from message osmosis.superfluid.AllIntermediaryAccountsResponse
 */
export class AllIntermediaryAccountsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.superfluid.SuperfluidIntermediaryAccountInfo accounts = 1;
         */
        this.accounts = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AllIntermediaryAccountsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AllIntermediaryAccountsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AllIntermediaryAccountsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AllIntermediaryAccountsResponse, a, b);
    }
}
AllIntermediaryAccountsResponse.runtime = proto3;
AllIntermediaryAccountsResponse.typeName = "osmosis.superfluid.AllIntermediaryAccountsResponse";
AllIntermediaryAccountsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: SuperfluidIntermediaryAccountInfo, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * @generated from message osmosis.superfluid.ConnectedIntermediaryAccountRequest
 */
export class ConnectedIntermediaryAccountRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 lock_id = 1;
         */
        this.lockId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConnectedIntermediaryAccountRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConnectedIntermediaryAccountRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConnectedIntermediaryAccountRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConnectedIntermediaryAccountRequest, a, b);
    }
}
ConnectedIntermediaryAccountRequest.runtime = proto3;
ConnectedIntermediaryAccountRequest.typeName = "osmosis.superfluid.ConnectedIntermediaryAccountRequest";
ConnectedIntermediaryAccountRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.superfluid.ConnectedIntermediaryAccountResponse
 */
export class ConnectedIntermediaryAccountResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConnectedIntermediaryAccountResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConnectedIntermediaryAccountResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConnectedIntermediaryAccountResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConnectedIntermediaryAccountResponse, a, b);
    }
}
ConnectedIntermediaryAccountResponse.runtime = proto3;
ConnectedIntermediaryAccountResponse.typeName = "osmosis.superfluid.ConnectedIntermediaryAccountResponse";
ConnectedIntermediaryAccountResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: SuperfluidIntermediaryAccountInfo },
]);
/**
 * @generated from message osmosis.superfluid.QueryTotalDelegationByValidatorForDenomRequest
 */
export class QueryTotalDelegationByValidatorForDenomRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryTotalDelegationByValidatorForDenomRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryTotalDelegationByValidatorForDenomRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryTotalDelegationByValidatorForDenomRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryTotalDelegationByValidatorForDenomRequest, a, b);
    }
}
QueryTotalDelegationByValidatorForDenomRequest.runtime = proto3;
QueryTotalDelegationByValidatorForDenomRequest.typeName = "osmosis.superfluid.QueryTotalDelegationByValidatorForDenomRequest";
QueryTotalDelegationByValidatorForDenomRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.QueryTotalDelegationByValidatorForDenomResponse
 */
export class QueryTotalDelegationByValidatorForDenomResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.superfluid.Delegations assets = 1;
         */
        this.assets = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryTotalDelegationByValidatorForDenomResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryTotalDelegationByValidatorForDenomResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryTotalDelegationByValidatorForDenomResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryTotalDelegationByValidatorForDenomResponse, a, b);
    }
}
QueryTotalDelegationByValidatorForDenomResponse.runtime = proto3;
QueryTotalDelegationByValidatorForDenomResponse.typeName = "osmosis.superfluid.QueryTotalDelegationByValidatorForDenomResponse";
QueryTotalDelegationByValidatorForDenomResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "assets", kind: "message", T: Delegations, repeated: true },
]);
/**
 * @generated from message osmosis.superfluid.Delegations
 */
export class Delegations extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string val_addr = 1;
         */
        this.valAddr = "";
        /**
         * @generated from field: string amount_sfsd = 2;
         */
        this.amountSfsd = "";
        /**
         * @generated from field: string osmo_equivalent = 3;
         */
        this.osmoEquivalent = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Delegations().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Delegations().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Delegations().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Delegations, a, b);
    }
}
Delegations.runtime = proto3;
Delegations.typeName = "osmosis.superfluid.Delegations";
Delegations.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount_sfsd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "osmo_equivalent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.TotalSuperfluidDelegationsRequest
 */
export class TotalSuperfluidDelegationsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TotalSuperfluidDelegationsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TotalSuperfluidDelegationsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TotalSuperfluidDelegationsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TotalSuperfluidDelegationsRequest, a, b);
    }
}
TotalSuperfluidDelegationsRequest.runtime = proto3;
TotalSuperfluidDelegationsRequest.typeName = "osmosis.superfluid.TotalSuperfluidDelegationsRequest";
TotalSuperfluidDelegationsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.superfluid.TotalSuperfluidDelegationsResponse
 */
export class TotalSuperfluidDelegationsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string total_delegations = 1;
         */
        this.totalDelegations = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TotalSuperfluidDelegationsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TotalSuperfluidDelegationsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TotalSuperfluidDelegationsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TotalSuperfluidDelegationsResponse, a, b);
    }
}
TotalSuperfluidDelegationsResponse.runtime = proto3;
TotalSuperfluidDelegationsResponse.typeName = "osmosis.superfluid.TotalSuperfluidDelegationsResponse";
TotalSuperfluidDelegationsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "total_delegations", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.SuperfluidDelegationAmountRequest
 */
export class SuperfluidDelegationAmountRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string delegator_address = 1;
         */
        this.delegatorAddress = "";
        /**
         * @generated from field: string validator_address = 2;
         */
        this.validatorAddress = "";
        /**
         * @generated from field: string denom = 3;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuperfluidDelegationAmountRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperfluidDelegationAmountRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperfluidDelegationAmountRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuperfluidDelegationAmountRequest, a, b);
    }
}
SuperfluidDelegationAmountRequest.runtime = proto3;
SuperfluidDelegationAmountRequest.typeName = "osmosis.superfluid.SuperfluidDelegationAmountRequest";
SuperfluidDelegationAmountRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.SuperfluidDelegationAmountResponse
 */
export class SuperfluidDelegationAmountResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
         */
        this.amount = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuperfluidDelegationAmountResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperfluidDelegationAmountResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperfluidDelegationAmountResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuperfluidDelegationAmountResponse, a, b);
    }
}
SuperfluidDelegationAmountResponse.runtime = proto3;
SuperfluidDelegationAmountResponse.typeName = "osmosis.superfluid.SuperfluidDelegationAmountResponse";
SuperfluidDelegationAmountResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin, repeated: true },
]);
/**
 * @generated from message osmosis.superfluid.SuperfluidDelegationsByDelegatorRequest
 */
export class SuperfluidDelegationsByDelegatorRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string delegator_address = 1;
         */
        this.delegatorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuperfluidDelegationsByDelegatorRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperfluidDelegationsByDelegatorRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperfluidDelegationsByDelegatorRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuperfluidDelegationsByDelegatorRequest, a, b);
    }
}
SuperfluidDelegationsByDelegatorRequest.runtime = proto3;
SuperfluidDelegationsByDelegatorRequest.typeName = "osmosis.superfluid.SuperfluidDelegationsByDelegatorRequest";
SuperfluidDelegationsByDelegatorRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.SuperfluidDelegationsByDelegatorResponse
 */
export class SuperfluidDelegationsByDelegatorResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1;
         */
        this.superfluidDelegationRecords = [];
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin total_delegated_coins = 2;
         */
        this.totalDelegatedCoins = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuperfluidDelegationsByDelegatorResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperfluidDelegationsByDelegatorResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperfluidDelegationsByDelegatorResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuperfluidDelegationsByDelegatorResponse, a, b);
    }
}
SuperfluidDelegationsByDelegatorResponse.runtime = proto3;
SuperfluidDelegationsByDelegatorResponse.typeName = "osmosis.superfluid.SuperfluidDelegationsByDelegatorResponse";
SuperfluidDelegationsByDelegatorResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "superfluid_delegation_records", kind: "message", T: SuperfluidDelegationRecord, repeated: true },
    { no: 2, name: "total_delegated_coins", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "total_equivalent_staked_amount", kind: "message", T: Coin },
]);
/**
 * @generated from message osmosis.superfluid.SuperfluidUndelegationsByDelegatorRequest
 */
export class SuperfluidUndelegationsByDelegatorRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string delegator_address = 1;
         */
        this.delegatorAddress = "";
        /**
         * @generated from field: string denom = 2;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuperfluidUndelegationsByDelegatorRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperfluidUndelegationsByDelegatorRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperfluidUndelegationsByDelegatorRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuperfluidUndelegationsByDelegatorRequest, a, b);
    }
}
SuperfluidUndelegationsByDelegatorRequest.runtime = proto3;
SuperfluidUndelegationsByDelegatorRequest.typeName = "osmosis.superfluid.SuperfluidUndelegationsByDelegatorRequest";
SuperfluidUndelegationsByDelegatorRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.SuperfluidUndelegationsByDelegatorResponse
 */
export class SuperfluidUndelegationsByDelegatorResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1;
         */
        this.superfluidDelegationRecords = [];
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin total_undelegated_coins = 2;
         */
        this.totalUndelegatedCoins = [];
        /**
         * @generated from field: repeated osmosis.lockup.SyntheticLock synthetic_locks = 3;
         */
        this.syntheticLocks = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuperfluidUndelegationsByDelegatorResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperfluidUndelegationsByDelegatorResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperfluidUndelegationsByDelegatorResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuperfluidUndelegationsByDelegatorResponse, a, b);
    }
}
SuperfluidUndelegationsByDelegatorResponse.runtime = proto3;
SuperfluidUndelegationsByDelegatorResponse.typeName = "osmosis.superfluid.SuperfluidUndelegationsByDelegatorResponse";
SuperfluidUndelegationsByDelegatorResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "superfluid_delegation_records", kind: "message", T: SuperfluidDelegationRecord, repeated: true },
    { no: 2, name: "total_undelegated_coins", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "synthetic_locks", kind: "message", T: SyntheticLock, repeated: true },
]);
/**
 * @generated from message osmosis.superfluid.SuperfluidDelegationsByValidatorDenomRequest
 */
export class SuperfluidDelegationsByValidatorDenomRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string validator_address = 1;
         */
        this.validatorAddress = "";
        /**
         * @generated from field: string denom = 2;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuperfluidDelegationsByValidatorDenomRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperfluidDelegationsByValidatorDenomRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperfluidDelegationsByValidatorDenomRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuperfluidDelegationsByValidatorDenomRequest, a, b);
    }
}
SuperfluidDelegationsByValidatorDenomRequest.runtime = proto3;
SuperfluidDelegationsByValidatorDenomRequest.typeName = "osmosis.superfluid.SuperfluidDelegationsByValidatorDenomRequest";
SuperfluidDelegationsByValidatorDenomRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.SuperfluidDelegationsByValidatorDenomResponse
 */
export class SuperfluidDelegationsByValidatorDenomResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1;
         */
        this.superfluidDelegationRecords = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SuperfluidDelegationsByValidatorDenomResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperfluidDelegationsByValidatorDenomResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperfluidDelegationsByValidatorDenomResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SuperfluidDelegationsByValidatorDenomResponse, a, b);
    }
}
SuperfluidDelegationsByValidatorDenomResponse.runtime = proto3;
SuperfluidDelegationsByValidatorDenomResponse.typeName = "osmosis.superfluid.SuperfluidDelegationsByValidatorDenomResponse";
SuperfluidDelegationsByValidatorDenomResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "superfluid_delegation_records", kind: "message", T: SuperfluidDelegationRecord, repeated: true },
]);
/**
 * @generated from message osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomRequest
 */
export class EstimateSuperfluidDelegatedAmountByValidatorDenomRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string validator_address = 1;
         */
        this.validatorAddress = "";
        /**
         * @generated from field: string denom = 2;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EstimateSuperfluidDelegatedAmountByValidatorDenomRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EstimateSuperfluidDelegatedAmountByValidatorDenomRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EstimateSuperfluidDelegatedAmountByValidatorDenomRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, a, b);
    }
}
EstimateSuperfluidDelegatedAmountByValidatorDenomRequest.runtime = proto3;
EstimateSuperfluidDelegatedAmountByValidatorDenomRequest.typeName = "osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomRequest";
EstimateSuperfluidDelegatedAmountByValidatorDenomRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomResponse
 */
export class EstimateSuperfluidDelegatedAmountByValidatorDenomResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin total_delegated_coins = 1;
         */
        this.totalDelegatedCoins = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new EstimateSuperfluidDelegatedAmountByValidatorDenomResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EstimateSuperfluidDelegatedAmountByValidatorDenomResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EstimateSuperfluidDelegatedAmountByValidatorDenomResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(EstimateSuperfluidDelegatedAmountByValidatorDenomResponse, a, b);
    }
}
EstimateSuperfluidDelegatedAmountByValidatorDenomResponse.runtime = proto3;
EstimateSuperfluidDelegatedAmountByValidatorDenomResponse.typeName = "osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomResponse";
EstimateSuperfluidDelegatedAmountByValidatorDenomResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "total_delegated_coins", kind: "message", T: Coin, repeated: true },
]);
/**
 * @generated from message osmosis.superfluid.QueryTotalDelegationByDelegatorRequest
 */
export class QueryTotalDelegationByDelegatorRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string delegator_address = 1;
         */
        this.delegatorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryTotalDelegationByDelegatorRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryTotalDelegationByDelegatorRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryTotalDelegationByDelegatorRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryTotalDelegationByDelegatorRequest, a, b);
    }
}
QueryTotalDelegationByDelegatorRequest.runtime = proto3;
QueryTotalDelegationByDelegatorRequest.typeName = "osmosis.superfluid.QueryTotalDelegationByDelegatorRequest";
QueryTotalDelegationByDelegatorRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.QueryTotalDelegationByDelegatorResponse
 */
export class QueryTotalDelegationByDelegatorResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1;
         */
        this.superfluidDelegationRecords = [];
        /**
         * @generated from field: repeated cosmos.staking.v1beta1.DelegationResponse delegation_response = 2;
         */
        this.delegationResponse = [];
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin total_delegated_coins = 3;
         */
        this.totalDelegatedCoins = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryTotalDelegationByDelegatorResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryTotalDelegationByDelegatorResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryTotalDelegationByDelegatorResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryTotalDelegationByDelegatorResponse, a, b);
    }
}
QueryTotalDelegationByDelegatorResponse.runtime = proto3;
QueryTotalDelegationByDelegatorResponse.typeName = "osmosis.superfluid.QueryTotalDelegationByDelegatorResponse";
QueryTotalDelegationByDelegatorResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "superfluid_delegation_records", kind: "message", T: SuperfluidDelegationRecord, repeated: true },
    { no: 2, name: "delegation_response", kind: "message", T: DelegationResponse, repeated: true },
    { no: 3, name: "total_delegated_coins", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "total_equivalent_staked_amount", kind: "message", T: Coin },
]);
/**
 * @generated from message osmosis.superfluid.QueryUnpoolWhitelistRequest
 */
export class QueryUnpoolWhitelistRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUnpoolWhitelistRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUnpoolWhitelistRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUnpoolWhitelistRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUnpoolWhitelistRequest, a, b);
    }
}
QueryUnpoolWhitelistRequest.runtime = proto3;
QueryUnpoolWhitelistRequest.typeName = "osmosis.superfluid.QueryUnpoolWhitelistRequest";
QueryUnpoolWhitelistRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.superfluid.QueryUnpoolWhitelistResponse
 */
export class QueryUnpoolWhitelistResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated uint64 pool_ids = 1;
         */
        this.poolIds = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryUnpoolWhitelistResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryUnpoolWhitelistResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryUnpoolWhitelistResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryUnpoolWhitelistResponse, a, b);
    }
}
QueryUnpoolWhitelistResponse.runtime = proto3;
QueryUnpoolWhitelistResponse.typeName = "osmosis.superfluid.QueryUnpoolWhitelistResponse";
QueryUnpoolWhitelistResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
]);
/**
 * @generated from message osmosis.superfluid.UserConcentratedSuperfluidPositionsDelegatedRequest
 */
export class UserConcentratedSuperfluidPositionsDelegatedRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string delegator_address = 1;
         */
        this.delegatorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserConcentratedSuperfluidPositionsDelegatedRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserConcentratedSuperfluidPositionsDelegatedRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserConcentratedSuperfluidPositionsDelegatedRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserConcentratedSuperfluidPositionsDelegatedRequest, a, b);
    }
}
UserConcentratedSuperfluidPositionsDelegatedRequest.runtime = proto3;
UserConcentratedSuperfluidPositionsDelegatedRequest.typeName = "osmosis.superfluid.UserConcentratedSuperfluidPositionsDelegatedRequest";
UserConcentratedSuperfluidPositionsDelegatedRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.UserConcentratedSuperfluidPositionsDelegatedResponse
 */
export class UserConcentratedSuperfluidPositionsDelegatedResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.superfluid.ConcentratedPoolUserPositionRecord cl_pool_user_position_records = 1;
         */
        this.clPoolUserPositionRecords = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserConcentratedSuperfluidPositionsDelegatedResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserConcentratedSuperfluidPositionsDelegatedResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserConcentratedSuperfluidPositionsDelegatedResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserConcentratedSuperfluidPositionsDelegatedResponse, a, b);
    }
}
UserConcentratedSuperfluidPositionsDelegatedResponse.runtime = proto3;
UserConcentratedSuperfluidPositionsDelegatedResponse.typeName = "osmosis.superfluid.UserConcentratedSuperfluidPositionsDelegatedResponse";
UserConcentratedSuperfluidPositionsDelegatedResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "cl_pool_user_position_records", kind: "message", T: ConcentratedPoolUserPositionRecord, repeated: true },
]);
/**
 * @generated from message osmosis.superfluid.UserConcentratedSuperfluidPositionsUndelegatingRequest
 */
export class UserConcentratedSuperfluidPositionsUndelegatingRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string delegator_address = 1;
         */
        this.delegatorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserConcentratedSuperfluidPositionsUndelegatingRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserConcentratedSuperfluidPositionsUndelegatingRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserConcentratedSuperfluidPositionsUndelegatingRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserConcentratedSuperfluidPositionsUndelegatingRequest, a, b);
    }
}
UserConcentratedSuperfluidPositionsUndelegatingRequest.runtime = proto3;
UserConcentratedSuperfluidPositionsUndelegatingRequest.typeName = "osmosis.superfluid.UserConcentratedSuperfluidPositionsUndelegatingRequest";
UserConcentratedSuperfluidPositionsUndelegatingRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.UserConcentratedSuperfluidPositionsUndelegatingResponse
 */
export class UserConcentratedSuperfluidPositionsUndelegatingResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.superfluid.ConcentratedPoolUserPositionRecord cl_pool_user_position_records = 1;
         */
        this.clPoolUserPositionRecords = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserConcentratedSuperfluidPositionsUndelegatingResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserConcentratedSuperfluidPositionsUndelegatingResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserConcentratedSuperfluidPositionsUndelegatingResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserConcentratedSuperfluidPositionsUndelegatingResponse, a, b);
    }
}
UserConcentratedSuperfluidPositionsUndelegatingResponse.runtime = proto3;
UserConcentratedSuperfluidPositionsUndelegatingResponse.typeName = "osmosis.superfluid.UserConcentratedSuperfluidPositionsUndelegatingResponse";
UserConcentratedSuperfluidPositionsUndelegatingResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "cl_pool_user_position_records", kind: "message", T: ConcentratedPoolUserPositionRecord, repeated: true },
]);
/**
 * THIS QUERY IS TEMPORARY
 *
 * @generated from message osmosis.superfluid.QueryRestSupplyRequest
 */
export class QueryRestSupplyRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryRestSupplyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryRestSupplyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryRestSupplyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryRestSupplyRequest, a, b);
    }
}
QueryRestSupplyRequest.runtime = proto3;
QueryRestSupplyRequest.typeName = "osmosis.superfluid.QueryRestSupplyRequest";
QueryRestSupplyRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.superfluid.QueryRestSupplyResponse
 */
export class QueryRestSupplyResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryRestSupplyResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryRestSupplyResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryRestSupplyResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryRestSupplyResponse, a, b);
    }
}
QueryRestSupplyResponse.runtime = proto3;
QueryRestSupplyResponse.typeName = "osmosis.superfluid.QueryRestSupplyResponse";
QueryRestSupplyResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin },
]);
//# sourceMappingURL=query_pb.js.map