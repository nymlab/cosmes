// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/lockup/tx.proto (package osmosis.lockup, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Duration, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { PeriodLock } from "./lock_pb.js";
/**
 * @generated from message osmosis.lockup.MsgLockTokens
 */
export class MsgLockTokens extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string owner = 1;
         */
        this.owner = "";
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 3;
         */
        this.coins = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgLockTokens().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgLockTokens().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgLockTokens().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgLockTokens, a, b);
    }
}
MsgLockTokens.runtime = proto3;
MsgLockTokens.typeName = "osmosis.lockup.MsgLockTokens";
MsgLockTokens.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "duration", kind: "message", T: Duration },
    { no: 3, name: "coins", kind: "message", T: Coin, repeated: true },
]);
/**
 * @generated from message osmosis.lockup.MsgLockTokensResponse
 */
export class MsgLockTokensResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 ID = 1;
         */
        this.ID = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgLockTokensResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgLockTokensResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgLockTokensResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgLockTokensResponse, a, b);
    }
}
MsgLockTokensResponse.runtime = proto3;
MsgLockTokensResponse.typeName = "osmosis.lockup.MsgLockTokensResponse";
MsgLockTokensResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.lockup.MsgBeginUnlockingAll
 */
export class MsgBeginUnlockingAll extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string owner = 1;
         */
        this.owner = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBeginUnlockingAll().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBeginUnlockingAll().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBeginUnlockingAll().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBeginUnlockingAll, a, b);
    }
}
MsgBeginUnlockingAll.runtime = proto3;
MsgBeginUnlockingAll.typeName = "osmosis.lockup.MsgBeginUnlockingAll";
MsgBeginUnlockingAll.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.lockup.MsgBeginUnlockingAllResponse
 */
export class MsgBeginUnlockingAllResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.lockup.PeriodLock unlocks = 1;
         */
        this.unlocks = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBeginUnlockingAllResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBeginUnlockingAllResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBeginUnlockingAllResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBeginUnlockingAllResponse, a, b);
    }
}
MsgBeginUnlockingAllResponse.runtime = proto3;
MsgBeginUnlockingAllResponse.typeName = "osmosis.lockup.MsgBeginUnlockingAllResponse";
MsgBeginUnlockingAllResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "unlocks", kind: "message", T: PeriodLock, repeated: true },
]);
/**
 * @generated from message osmosis.lockup.MsgBeginUnlocking
 */
export class MsgBeginUnlocking extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string owner = 1;
         */
        this.owner = "";
        /**
         * @generated from field: uint64 ID = 2;
         */
        this.ID = protoInt64.zero;
        /**
         * Amount of unlocking coins. Unlock all if not set.
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 3;
         */
        this.coins = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBeginUnlocking().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBeginUnlocking().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBeginUnlocking().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBeginUnlocking, a, b);
    }
}
MsgBeginUnlocking.runtime = proto3;
MsgBeginUnlocking.typeName = "osmosis.lockup.MsgBeginUnlocking";
MsgBeginUnlocking.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "coins", kind: "message", T: Coin, repeated: true },
]);
/**
 * @generated from message osmosis.lockup.MsgBeginUnlockingResponse
 */
export class MsgBeginUnlockingResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool success = 1;
         */
        this.success = false;
        /**
         * @generated from field: uint64 unlockingLockID = 2;
         */
        this.unlockingLockID = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgBeginUnlockingResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgBeginUnlockingResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgBeginUnlockingResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgBeginUnlockingResponse, a, b);
    }
}
MsgBeginUnlockingResponse.runtime = proto3;
MsgBeginUnlockingResponse.typeName = "osmosis.lockup.MsgBeginUnlockingResponse";
MsgBeginUnlockingResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "unlockingLockID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * MsgExtendLockup extends the existing lockup's duration.
 * The new duration is longer than the original.
 *
 * @generated from message osmosis.lockup.MsgExtendLockup
 */
export class MsgExtendLockup extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string owner = 1;
         */
        this.owner = "";
        /**
         * @generated from field: uint64 ID = 2;
         */
        this.ID = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgExtendLockup().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgExtendLockup().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgExtendLockup().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgExtendLockup, a, b);
    }
}
MsgExtendLockup.runtime = proto3;
MsgExtendLockup.typeName = "osmosis.lockup.MsgExtendLockup";
MsgExtendLockup.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "duration", kind: "message", T: Duration },
]);
/**
 * @generated from message osmosis.lockup.MsgExtendLockupResponse
 */
export class MsgExtendLockupResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool success = 1;
         */
        this.success = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgExtendLockupResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgExtendLockupResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgExtendLockupResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgExtendLockupResponse, a, b);
    }
}
MsgExtendLockupResponse.runtime = proto3;
MsgExtendLockupResponse.typeName = "osmosis.lockup.MsgExtendLockupResponse";
MsgExtendLockupResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * MsgForceUnlock unlocks locks immediately for
 * addresses registered via governance.
 *
 * @generated from message osmosis.lockup.MsgForceUnlock
 */
export class MsgForceUnlock extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string owner = 1;
         */
        this.owner = "";
        /**
         * @generated from field: uint64 ID = 2;
         */
        this.ID = protoInt64.zero;
        /**
         * Amount of unlocking coins. Unlock all if not set.
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 3;
         */
        this.coins = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgForceUnlock().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgForceUnlock().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgForceUnlock().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgForceUnlock, a, b);
    }
}
MsgForceUnlock.runtime = proto3;
MsgForceUnlock.typeName = "osmosis.lockup.MsgForceUnlock";
MsgForceUnlock.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "coins", kind: "message", T: Coin, repeated: true },
]);
/**
 * @generated from message osmosis.lockup.MsgForceUnlockResponse
 */
export class MsgForceUnlockResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool success = 1;
         */
        this.success = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgForceUnlockResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgForceUnlockResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgForceUnlockResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgForceUnlockResponse, a, b);
    }
}
MsgForceUnlockResponse.runtime = proto3;
MsgForceUnlockResponse.typeName = "osmosis.lockup.MsgForceUnlockResponse";
MsgForceUnlockResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message osmosis.lockup.MsgSetRewardReceiverAddress
 */
export class MsgSetRewardReceiverAddress extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string owner = 1;
         */
        this.owner = "";
        /**
         * @generated from field: uint64 lockID = 2;
         */
        this.lockID = protoInt64.zero;
        /**
         * @generated from field: string reward_receiver = 3;
         */
        this.rewardReceiver = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSetRewardReceiverAddress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSetRewardReceiverAddress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSetRewardReceiverAddress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSetRewardReceiverAddress, a, b);
    }
}
MsgSetRewardReceiverAddress.runtime = proto3;
MsgSetRewardReceiverAddress.typeName = "osmosis.lockup.MsgSetRewardReceiverAddress";
MsgSetRewardReceiverAddress.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lockID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "reward_receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.lockup.MsgSetRewardReceiverAddressResponse
 */
export class MsgSetRewardReceiverAddressResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bool success = 1;
         */
        this.success = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgSetRewardReceiverAddressResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgSetRewardReceiverAddressResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgSetRewardReceiverAddressResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgSetRewardReceiverAddressResponse, a, b);
    }
}
MsgSetRewardReceiverAddressResponse.runtime = proto3;
MsgSetRewardReceiverAddressResponse.typeName = "osmosis.lockup.MsgSetRewardReceiverAddressResponse";
MsgSetRewardReceiverAddressResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
//# sourceMappingURL=tx_pb.js.map