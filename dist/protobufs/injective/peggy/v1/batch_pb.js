// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/peggy/v1/batch.proto (package injective.peggy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ERC20Token } from "./attestation_pb.js";
/**
 * OutgoingTxBatch represents a batch of transactions going from Peggy to ETH
 *
 * @generated from message injective.peggy.v1.OutgoingTxBatch
 */
export class OutgoingTxBatch extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 batch_nonce = 1;
         */
        this.batchNonce = protoInt64.zero;
        /**
         * @generated from field: uint64 batch_timeout = 2;
         */
        this.batchTimeout = protoInt64.zero;
        /**
         * @generated from field: repeated injective.peggy.v1.OutgoingTransferTx transactions = 3;
         */
        this.transactions = [];
        /**
         * @generated from field: string token_contract = 4;
         */
        this.tokenContract = "";
        /**
         * @generated from field: uint64 block = 5;
         */
        this.block = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OutgoingTxBatch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OutgoingTxBatch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OutgoingTxBatch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OutgoingTxBatch, a, b);
    }
}
OutgoingTxBatch.runtime = proto3;
OutgoingTxBatch.typeName = "injective.peggy.v1.OutgoingTxBatch";
OutgoingTxBatch.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "batch_nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "batch_timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "transactions", kind: "message", T: OutgoingTransferTx, repeated: true },
    { no: 4, name: "token_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * OutgoingTransferTx represents an individual send from Peggy to ETH
 *
 * @generated from message injective.peggy.v1.OutgoingTransferTx
 */
export class OutgoingTransferTx extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 id = 1;
         */
        this.id = protoInt64.zero;
        /**
         * @generated from field: string sender = 2;
         */
        this.sender = "";
        /**
         * @generated from field: string dest_address = 3;
         */
        this.destAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OutgoingTransferTx().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OutgoingTransferTx().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OutgoingTransferTx().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OutgoingTransferTx, a, b);
    }
}
OutgoingTransferTx.runtime = proto3;
OutgoingTransferTx.typeName = "injective.peggy.v1.OutgoingTransferTx";
OutgoingTransferTx.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dest_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "erc20_token", kind: "message", T: ERC20Token },
    { no: 5, name: "erc20_fee", kind: "message", T: ERC20Token },
]);
//# sourceMappingURL=batch_pb.js.map