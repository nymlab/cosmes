// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file osmosis/superfluid/query.proto (package osmosis.superfluid, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { AllAssetsRequest, AllAssetsResponse, AllIntermediaryAccountsRequest, AllIntermediaryAccountsResponse, AssetMultiplierRequest, AssetMultiplierResponse, AssetTypeRequest, AssetTypeResponse, ConnectedIntermediaryAccountRequest, ConnectedIntermediaryAccountResponse, EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, EstimateSuperfluidDelegatedAmountByValidatorDenomResponse, QueryParamsRequest, QueryParamsResponse, QueryRestSupplyRequest, QueryRestSupplyResponse, QueryTotalDelegationByDelegatorRequest, QueryTotalDelegationByDelegatorResponse, QueryTotalDelegationByValidatorForDenomRequest, QueryTotalDelegationByValidatorForDenomResponse, QueryUnpoolWhitelistRequest, QueryUnpoolWhitelistResponse, SuperfluidDelegationAmountRequest, SuperfluidDelegationAmountResponse, SuperfluidDelegationsByDelegatorRequest, SuperfluidDelegationsByDelegatorResponse, SuperfluidDelegationsByValidatorDenomRequest, SuperfluidDelegationsByValidatorDenomResponse, SuperfluidUndelegationsByDelegatorRequest, SuperfluidUndelegationsByDelegatorResponse, TotalSuperfluidDelegationsRequest, TotalSuperfluidDelegationsResponse, UserConcentratedSuperfluidPositionsDelegatedRequest, UserConcentratedSuperfluidPositionsDelegatedResponse, UserConcentratedSuperfluidPositionsUndelegatingRequest, UserConcentratedSuperfluidPositionsUndelegatingResponse } from "./query_pb.js";
const TYPE_NAME = "osmosis.superfluid.Query";
/**
 * Params returns the total set of superfluid parameters.
 *
 * @generated from rpc osmosis.superfluid.Query.Params
 */
export const QueryParamsService = {
    typeName: TYPE_NAME,
    method: "Params",
    Request: QueryParamsRequest,
    Response: QueryParamsResponse,
};
/**
 * Returns superfluid asset type, whether if it's a native asset or an lp
 * share.
 *
 * @generated from rpc osmosis.superfluid.Query.AssetType
 */
export const QueryAssetTypeService = {
    typeName: TYPE_NAME,
    method: "AssetType",
    Request: AssetTypeRequest,
    Response: AssetTypeResponse,
};
/**
 * Returns all registered superfluid assets.
 *
 * @generated from rpc osmosis.superfluid.Query.AllAssets
 */
export const QueryAllAssetsService = {
    typeName: TYPE_NAME,
    method: "AllAssets",
    Request: AllAssetsRequest,
    Response: AllAssetsResponse,
};
/**
 * Returns the osmo equivalent multiplier used in the most recent epoch.
 *
 * @generated from rpc osmosis.superfluid.Query.AssetMultiplier
 */
export const QueryAssetMultiplierService = {
    typeName: TYPE_NAME,
    method: "AssetMultiplier",
    Request: AssetMultiplierRequest,
    Response: AssetMultiplierResponse,
};
/**
 * Returns all superfluid intermediary accounts.
 *
 * @generated from rpc osmosis.superfluid.Query.AllIntermediaryAccounts
 */
export const QueryAllIntermediaryAccountsService = {
    typeName: TYPE_NAME,
    method: "AllIntermediaryAccounts",
    Request: AllIntermediaryAccountsRequest,
    Response: AllIntermediaryAccountsResponse,
};
/**
 * Returns intermediary account connected to a superfluid staked lock by id
 *
 * @generated from rpc osmosis.superfluid.Query.ConnectedIntermediaryAccount
 */
export const QueryConnectedIntermediaryAccountService = {
    typeName: TYPE_NAME,
    method: "ConnectedIntermediaryAccount",
    Request: ConnectedIntermediaryAccountRequest,
    Response: ConnectedIntermediaryAccountResponse,
};
/**
 * Returns the amount of delegations of specific denom for all validators
 *
 * @generated from rpc osmosis.superfluid.Query.TotalDelegationByValidatorForDenom
 */
export const QueryTotalDelegationByValidatorForDenomService = {
    typeName: TYPE_NAME,
    method: "TotalDelegationByValidatorForDenom",
    Request: QueryTotalDelegationByValidatorForDenomRequest,
    Response: QueryTotalDelegationByValidatorForDenomResponse,
};
/**
 * Returns the total amount of osmo superfluidly staked.
 * Response is denominated in uosmo.
 *
 * @generated from rpc osmosis.superfluid.Query.TotalSuperfluidDelegations
 */
export const QueryTotalSuperfluidDelegationsService = {
    typeName: TYPE_NAME,
    method: "TotalSuperfluidDelegations",
    Request: TotalSuperfluidDelegationsRequest,
    Response: TotalSuperfluidDelegationsResponse,
};
/**
 * Returns the coins superfluid delegated for the delegator, validator, denom
 * triplet
 *
 * @generated from rpc osmosis.superfluid.Query.SuperfluidDelegationAmount
 */
export const QuerySuperfluidDelegationAmountService = {
    typeName: TYPE_NAME,
    method: "SuperfluidDelegationAmount",
    Request: SuperfluidDelegationAmountRequest,
    Response: SuperfluidDelegationAmountResponse,
};
/**
 * Returns all the delegated superfluid positions for a specific delegator.
 *
 * @generated from rpc osmosis.superfluid.Query.SuperfluidDelegationsByDelegator
 */
export const QuerySuperfluidDelegationsByDelegatorService = {
    typeName: TYPE_NAME,
    method: "SuperfluidDelegationsByDelegator",
    Request: SuperfluidDelegationsByDelegatorRequest,
    Response: SuperfluidDelegationsByDelegatorResponse,
};
/**
 * Returns all the undelegating superfluid positions for a specific delegator.
 *
 * @generated from rpc osmosis.superfluid.Query.SuperfluidUndelegationsByDelegator
 */
export const QuerySuperfluidUndelegationsByDelegatorService = {
    typeName: TYPE_NAME,
    method: "SuperfluidUndelegationsByDelegator",
    Request: SuperfluidUndelegationsByDelegatorRequest,
    Response: SuperfluidUndelegationsByDelegatorResponse,
};
/**
 * Returns all the superfluid positions of a specific denom delegated to one
 * validator
 *
 * @generated from rpc osmosis.superfluid.Query.SuperfluidDelegationsByValidatorDenom
 */
export const QuerySuperfluidDelegationsByValidatorDenomService = {
    typeName: TYPE_NAME,
    method: "SuperfluidDelegationsByValidatorDenom",
    Request: SuperfluidDelegationsByValidatorDenomRequest,
    Response: SuperfluidDelegationsByValidatorDenomResponse,
};
/**
 * Returns the amount of a specific denom delegated to a specific validator
 * This is labeled an estimate, because the way it calculates the amount can
 * lead rounding errors from the true delegated amount
 *
 * @generated from rpc osmosis.superfluid.Query.EstimateSuperfluidDelegatedAmountByValidatorDenom
 */
export const QueryEstimateSuperfluidDelegatedAmountByValidatorDenomService = {
    typeName: TYPE_NAME,
    method: "EstimateSuperfluidDelegatedAmountByValidatorDenom",
    Request: EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    Response: EstimateSuperfluidDelegatedAmountByValidatorDenomResponse,
};
/**
 * Returns the specified delegations for a specific delegator
 *
 * @generated from rpc osmosis.superfluid.Query.TotalDelegationByDelegator
 */
export const QueryTotalDelegationByDelegatorService = {
    typeName: TYPE_NAME,
    method: "TotalDelegationByDelegator",
    Request: QueryTotalDelegationByDelegatorRequest,
    Response: QueryTotalDelegationByDelegatorResponse,
};
/**
 * Returns a list of whitelisted pool ids to unpool.
 *
 * @generated from rpc osmosis.superfluid.Query.UnpoolWhitelist
 */
export const QueryUnpoolWhitelistService = {
    typeName: TYPE_NAME,
    method: "UnpoolWhitelist",
    Request: QueryUnpoolWhitelistRequest,
    Response: QueryUnpoolWhitelistResponse,
};
/**
 * Returns all of a user's full range CL positions that are superfluid staked.
 *
 * @generated from rpc osmosis.superfluid.Query.UserConcentratedSuperfluidPositionsDelegated
 */
export const QueryUserConcentratedSuperfluidPositionsDelegatedService = {
    typeName: TYPE_NAME,
    method: "UserConcentratedSuperfluidPositionsDelegated",
    Request: UserConcentratedSuperfluidPositionsDelegatedRequest,
    Response: UserConcentratedSuperfluidPositionsDelegatedResponse,
};
/**
 * @generated from rpc osmosis.superfluid.Query.UserConcentratedSuperfluidPositionsUndelegating
 */
export const QueryUserConcentratedSuperfluidPositionsUndelegatingService = {
    typeName: TYPE_NAME,
    method: "UserConcentratedSuperfluidPositionsUndelegating",
    Request: UserConcentratedSuperfluidPositionsUndelegatingRequest,
    Response: UserConcentratedSuperfluidPositionsUndelegatingResponse,
};
/**
 * @generated from rpc osmosis.superfluid.Query.RestSupply
 */
export const QueryRestSupplyService = {
    typeName: TYPE_NAME,
    method: "RestSupply",
    Request: QueryRestSupplyRequest,
    Response: QueryRestSupplyResponse,
};
//# sourceMappingURL=query_cosmes.js.map