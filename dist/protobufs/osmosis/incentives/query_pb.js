// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/incentives/query.proto (package osmosis.incentives, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Duration, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { Gauge } from "./gauge_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Group, GroupsWithGauge } from "./group_pb.js";
/**
 * @generated from message osmosis.incentives.ModuleToDistributeCoinsRequest
 */
export class ModuleToDistributeCoinsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleToDistributeCoinsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleToDistributeCoinsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleToDistributeCoinsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ModuleToDistributeCoinsRequest, a, b);
    }
}
ModuleToDistributeCoinsRequest.runtime = proto3;
ModuleToDistributeCoinsRequest.typeName = "osmosis.incentives.ModuleToDistributeCoinsRequest";
ModuleToDistributeCoinsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.incentives.ModuleToDistributeCoinsResponse
 */
export class ModuleToDistributeCoinsResponse extends Message {
    constructor(data) {
        super();
        /**
         * Coins that have yet to be distributed
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 1;
         */
        this.coins = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleToDistributeCoinsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleToDistributeCoinsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleToDistributeCoinsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ModuleToDistributeCoinsResponse, a, b);
    }
}
ModuleToDistributeCoinsResponse.runtime = proto3;
ModuleToDistributeCoinsResponse.typeName = "osmosis.incentives.ModuleToDistributeCoinsResponse";
ModuleToDistributeCoinsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "coins", kind: "message", T: Coin, repeated: true },
]);
/**
 * @generated from message osmosis.incentives.GaugeByIDRequest
 */
export class GaugeByIDRequest extends Message {
    constructor(data) {
        super();
        /**
         * Gague ID being queried
         *
         * @generated from field: uint64 id = 1;
         */
        this.id = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GaugeByIDRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GaugeByIDRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GaugeByIDRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GaugeByIDRequest, a, b);
    }
}
GaugeByIDRequest.runtime = proto3;
GaugeByIDRequest.typeName = "osmosis.incentives.GaugeByIDRequest";
GaugeByIDRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.incentives.GaugeByIDResponse
 */
export class GaugeByIDResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GaugeByIDResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GaugeByIDResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GaugeByIDResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GaugeByIDResponse, a, b);
    }
}
GaugeByIDResponse.runtime = proto3;
GaugeByIDResponse.typeName = "osmosis.incentives.GaugeByIDResponse";
GaugeByIDResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge", kind: "message", T: Gauge },
]);
/**
 * @generated from message osmosis.incentives.GaugesRequest
 */
export class GaugesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GaugesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GaugesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GaugesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GaugesRequest, a, b);
    }
}
GaugesRequest.runtime = proto3;
GaugesRequest.typeName = "osmosis.incentives.GaugesRequest";
GaugesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * @generated from message osmosis.incentives.GaugesResponse
 */
export class GaugesResponse extends Message {
    constructor(data) {
        super();
        /**
         * Upcoming and active gauges
         *
         * @generated from field: repeated osmosis.incentives.Gauge data = 1;
         */
        this.data = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GaugesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GaugesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GaugesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GaugesResponse, a, b);
    }
}
GaugesResponse.runtime = proto3;
GaugesResponse.typeName = "osmosis.incentives.GaugesResponse";
GaugesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Gauge, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * @generated from message osmosis.incentives.ActiveGaugesRequest
 */
export class ActiveGaugesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ActiveGaugesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ActiveGaugesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ActiveGaugesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ActiveGaugesRequest, a, b);
    }
}
ActiveGaugesRequest.runtime = proto3;
ActiveGaugesRequest.typeName = "osmosis.incentives.ActiveGaugesRequest";
ActiveGaugesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * @generated from message osmosis.incentives.ActiveGaugesResponse
 */
export class ActiveGaugesResponse extends Message {
    constructor(data) {
        super();
        /**
         * Active gagues only
         *
         * @generated from field: repeated osmosis.incentives.Gauge data = 1;
         */
        this.data = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ActiveGaugesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ActiveGaugesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ActiveGaugesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ActiveGaugesResponse, a, b);
    }
}
ActiveGaugesResponse.runtime = proto3;
ActiveGaugesResponse.typeName = "osmosis.incentives.ActiveGaugesResponse";
ActiveGaugesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Gauge, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * @generated from message osmosis.incentives.ActiveGaugesPerDenomRequest
 */
export class ActiveGaugesPerDenomRequest extends Message {
    constructor(data) {
        super();
        /**
         * Desired denom when querying active gagues
         *
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ActiveGaugesPerDenomRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ActiveGaugesPerDenomRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ActiveGaugesPerDenomRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ActiveGaugesPerDenomRequest, a, b);
    }
}
ActiveGaugesPerDenomRequest.runtime = proto3;
ActiveGaugesPerDenomRequest.typeName = "osmosis.incentives.ActiveGaugesPerDenomRequest";
ActiveGaugesPerDenomRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * @generated from message osmosis.incentives.ActiveGaugesPerDenomResponse
 */
export class ActiveGaugesPerDenomResponse extends Message {
    constructor(data) {
        super();
        /**
         * Active gagues that match denom in query
         *
         * @generated from field: repeated osmosis.incentives.Gauge data = 1;
         */
        this.data = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ActiveGaugesPerDenomResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ActiveGaugesPerDenomResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ActiveGaugesPerDenomResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ActiveGaugesPerDenomResponse, a, b);
    }
}
ActiveGaugesPerDenomResponse.runtime = proto3;
ActiveGaugesPerDenomResponse.typeName = "osmosis.incentives.ActiveGaugesPerDenomResponse";
ActiveGaugesPerDenomResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Gauge, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * @generated from message osmosis.incentives.UpcomingGaugesRequest
 */
export class UpcomingGaugesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpcomingGaugesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpcomingGaugesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpcomingGaugesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpcomingGaugesRequest, a, b);
    }
}
UpcomingGaugesRequest.runtime = proto3;
UpcomingGaugesRequest.typeName = "osmosis.incentives.UpcomingGaugesRequest";
UpcomingGaugesRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * @generated from message osmosis.incentives.UpcomingGaugesResponse
 */
export class UpcomingGaugesResponse extends Message {
    constructor(data) {
        super();
        /**
         * Gauges whose distribution is upcoming
         *
         * @generated from field: repeated osmosis.incentives.Gauge data = 1;
         */
        this.data = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpcomingGaugesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpcomingGaugesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpcomingGaugesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpcomingGaugesResponse, a, b);
    }
}
UpcomingGaugesResponse.runtime = proto3;
UpcomingGaugesResponse.typeName = "osmosis.incentives.UpcomingGaugesResponse";
UpcomingGaugesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Gauge, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * @generated from message osmosis.incentives.UpcomingGaugesPerDenomRequest
 */
export class UpcomingGaugesPerDenomRequest extends Message {
    constructor(data) {
        super();
        /**
         * Filter for upcoming gagues that match specific denom
         *
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpcomingGaugesPerDenomRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpcomingGaugesPerDenomRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpcomingGaugesPerDenomRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpcomingGaugesPerDenomRequest, a, b);
    }
}
UpcomingGaugesPerDenomRequest.runtime = proto3;
UpcomingGaugesPerDenomRequest.typeName = "osmosis.incentives.UpcomingGaugesPerDenomRequest";
UpcomingGaugesPerDenomRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
]);
/**
 * @generated from message osmosis.incentives.UpcomingGaugesPerDenomResponse
 */
export class UpcomingGaugesPerDenomResponse extends Message {
    constructor(data) {
        super();
        /**
         * Upcoming gagues that match denom in query
         *
         * @generated from field: repeated osmosis.incentives.Gauge upcoming_gauges = 1;
         */
        this.upcomingGauges = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UpcomingGaugesPerDenomResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UpcomingGaugesPerDenomResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UpcomingGaugesPerDenomResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UpcomingGaugesPerDenomResponse, a, b);
    }
}
UpcomingGaugesPerDenomResponse.runtime = proto3;
UpcomingGaugesPerDenomResponse.typeName = "osmosis.incentives.UpcomingGaugesPerDenomResponse";
UpcomingGaugesPerDenomResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "upcoming_gauges", kind: "message", T: Gauge, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
]);
/**
 * @generated from message osmosis.incentives.RewardsEstRequest
 */
export class RewardsEstRequest extends Message {
    constructor(data) {
        super();
        /**
         * Address that is being queried for future estimated rewards
         *
         * @generated from field: string owner = 1;
         */
        this.owner = "";
        /**
         * Lock IDs included in future reward estimation
         *
         * @generated from field: repeated uint64 lock_ids = 2;
         */
        this.lockIds = [];
        /**
         * Upper time limit of reward estimation
         * Lower limit is current epoch
         *
         * @generated from field: int64 end_epoch = 3;
         */
        this.endEpoch = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RewardsEstRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RewardsEstRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RewardsEstRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RewardsEstRequest, a, b);
    }
}
RewardsEstRequest.runtime = proto3;
RewardsEstRequest.typeName = "osmosis.incentives.RewardsEstRequest";
RewardsEstRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lock_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 3, name: "end_epoch", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 * @generated from message osmosis.incentives.RewardsEstResponse
 */
export class RewardsEstResponse extends Message {
    constructor(data) {
        super();
        /**
         * Estimated coin rewards that will be received at provided address
         * from specified locks between current time and end epoch
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 1;
         */
        this.coins = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new RewardsEstResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RewardsEstResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RewardsEstResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(RewardsEstResponse, a, b);
    }
}
RewardsEstResponse.runtime = proto3;
RewardsEstResponse.typeName = "osmosis.incentives.RewardsEstResponse";
RewardsEstResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "coins", kind: "message", T: Coin, repeated: true },
]);
/**
 * @generated from message osmosis.incentives.QueryLockableDurationsRequest
 */
export class QueryLockableDurationsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryLockableDurationsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryLockableDurationsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryLockableDurationsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryLockableDurationsRequest, a, b);
    }
}
QueryLockableDurationsRequest.runtime = proto3;
QueryLockableDurationsRequest.typeName = "osmosis.incentives.QueryLockableDurationsRequest";
QueryLockableDurationsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.incentives.QueryLockableDurationsResponse
 */
export class QueryLockableDurationsResponse extends Message {
    constructor(data) {
        super();
        /**
         * Time durations that users can lock coins for in order to receive rewards
         *
         * @generated from field: repeated google.protobuf.Duration lockable_durations = 1;
         */
        this.lockableDurations = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryLockableDurationsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryLockableDurationsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryLockableDurationsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryLockableDurationsResponse, a, b);
    }
}
QueryLockableDurationsResponse.runtime = proto3;
QueryLockableDurationsResponse.typeName = "osmosis.incentives.QueryLockableDurationsResponse";
QueryLockableDurationsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "lockable_durations", kind: "message", T: Duration, repeated: true },
]);
/**
 * @generated from message osmosis.incentives.QueryAllGroupsRequest
 */
export class QueryAllGroupsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAllGroupsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAllGroupsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAllGroupsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAllGroupsRequest, a, b);
    }
}
QueryAllGroupsRequest.runtime = proto3;
QueryAllGroupsRequest.typeName = "osmosis.incentives.QueryAllGroupsRequest";
QueryAllGroupsRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.incentives.QueryAllGroupsResponse
 */
export class QueryAllGroupsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.incentives.Group groups = 1;
         */
        this.groups = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAllGroupsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAllGroupsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAllGroupsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAllGroupsResponse, a, b);
    }
}
QueryAllGroupsResponse.runtime = proto3;
QueryAllGroupsResponse.typeName = "osmosis.incentives.QueryAllGroupsResponse";
QueryAllGroupsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: Group, repeated: true },
]);
/**
 * @generated from message osmosis.incentives.QueryAllGroupsGaugesRequest
 */
export class QueryAllGroupsGaugesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAllGroupsGaugesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAllGroupsGaugesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAllGroupsGaugesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAllGroupsGaugesRequest, a, b);
    }
}
QueryAllGroupsGaugesRequest.runtime = proto3;
QueryAllGroupsGaugesRequest.typeName = "osmosis.incentives.QueryAllGroupsGaugesRequest";
QueryAllGroupsGaugesRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.incentives.QueryAllGroupsGaugesResponse
 */
export class QueryAllGroupsGaugesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.incentives.Gauge gauges = 1;
         */
        this.gauges = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAllGroupsGaugesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAllGroupsGaugesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAllGroupsGaugesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAllGroupsGaugesResponse, a, b);
    }
}
QueryAllGroupsGaugesResponse.runtime = proto3;
QueryAllGroupsGaugesResponse.typeName = "osmosis.incentives.QueryAllGroupsGaugesResponse";
QueryAllGroupsGaugesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "gauges", kind: "message", T: Gauge, repeated: true },
]);
/**
 * @generated from message osmosis.incentives.QueryAllGroupsWithGaugeRequest
 */
export class QueryAllGroupsWithGaugeRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAllGroupsWithGaugeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAllGroupsWithGaugeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAllGroupsWithGaugeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAllGroupsWithGaugeRequest, a, b);
    }
}
QueryAllGroupsWithGaugeRequest.runtime = proto3;
QueryAllGroupsWithGaugeRequest.typeName = "osmosis.incentives.QueryAllGroupsWithGaugeRequest";
QueryAllGroupsWithGaugeRequest.fields = proto3.util.newFieldList(() => []);
/**
 * @generated from message osmosis.incentives.QueryAllGroupsWithGaugeResponse
 */
export class QueryAllGroupsWithGaugeResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.incentives.GroupsWithGauge groups_with_gauge = 1;
         */
        this.groupsWithGauge = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryAllGroupsWithGaugeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryAllGroupsWithGaugeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryAllGroupsWithGaugeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryAllGroupsWithGaugeResponse, a, b);
    }
}
QueryAllGroupsWithGaugeResponse.runtime = proto3;
QueryAllGroupsWithGaugeResponse.typeName = "osmosis.incentives.QueryAllGroupsWithGaugeResponse";
QueryAllGroupsWithGaugeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "groups_with_gauge", kind: "message", T: GroupsWithGauge, repeated: true },
]);
/**
 * @generated from message osmosis.incentives.QueryGroupByGroupGaugeIDRequest
 */
export class QueryGroupByGroupGaugeIDRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 id = 1;
         */
        this.id = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGroupByGroupGaugeIDRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGroupByGroupGaugeIDRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGroupByGroupGaugeIDRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGroupByGroupGaugeIDRequest, a, b);
    }
}
QueryGroupByGroupGaugeIDRequest.runtime = proto3;
QueryGroupByGroupGaugeIDRequest.typeName = "osmosis.incentives.QueryGroupByGroupGaugeIDRequest";
QueryGroupByGroupGaugeIDRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.incentives.QueryGroupByGroupGaugeIDResponse
 */
export class QueryGroupByGroupGaugeIDResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryGroupByGroupGaugeIDResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryGroupByGroupGaugeIDResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryGroupByGroupGaugeIDResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryGroupByGroupGaugeIDResponse, a, b);
    }
}
QueryGroupByGroupGaugeIDResponse.runtime = proto3;
QueryGroupByGroupGaugeIDResponse.typeName = "osmosis.incentives.QueryGroupByGroupGaugeIDResponse";
QueryGroupByGroupGaugeIDResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "group", kind: "message", T: Group },
]);
/**
 * @generated from message osmosis.incentives.QueryCurrentWeightByGroupGaugeIDRequest
 */
export class QueryCurrentWeightByGroupGaugeIDRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 group_gauge_id = 1;
         */
        this.groupGaugeId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryCurrentWeightByGroupGaugeIDRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryCurrentWeightByGroupGaugeIDRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryCurrentWeightByGroupGaugeIDRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryCurrentWeightByGroupGaugeIDRequest, a, b);
    }
}
QueryCurrentWeightByGroupGaugeIDRequest.runtime = proto3;
QueryCurrentWeightByGroupGaugeIDRequest.typeName = "osmosis.incentives.QueryCurrentWeightByGroupGaugeIDRequest";
QueryCurrentWeightByGroupGaugeIDRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "group_gauge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * @generated from message osmosis.incentives.QueryCurrentWeightByGroupGaugeIDResponse
 */
export class QueryCurrentWeightByGroupGaugeIDResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated osmosis.incentives.GaugeWeight gauge_weight = 1;
         */
        this.gaugeWeight = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryCurrentWeightByGroupGaugeIDResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryCurrentWeightByGroupGaugeIDResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryCurrentWeightByGroupGaugeIDResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryCurrentWeightByGroupGaugeIDResponse, a, b);
    }
}
QueryCurrentWeightByGroupGaugeIDResponse.runtime = proto3;
QueryCurrentWeightByGroupGaugeIDResponse.typeName = "osmosis.incentives.QueryCurrentWeightByGroupGaugeIDResponse";
QueryCurrentWeightByGroupGaugeIDResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge_weight", kind: "message", T: GaugeWeight, repeated: true },
]);
/**
 * @generated from message osmosis.incentives.GaugeWeight
 */
export class GaugeWeight extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 gauge_id = 1;
         */
        this.gaugeId = protoInt64.zero;
        /**
         * @generated from field: string weight_ratio = 2;
         */
        this.weightRatio = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GaugeWeight().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GaugeWeight().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GaugeWeight().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GaugeWeight, a, b);
    }
}
GaugeWeight.runtime = proto3;
GaugeWeight.typeName = "osmosis.incentives.GaugeWeight";
GaugeWeight.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "gauge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "weight_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=query_pb.js.map