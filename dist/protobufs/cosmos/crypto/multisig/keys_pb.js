// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/crypto/multisig/keys.proto (package cosmos.crypto.multisig, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Any, Message, proto3 } from "@bufbuild/protobuf";
/**
 * LegacyAminoPubKey specifies a public key type
 * which nests multiple public keys and a threshold,
 * it uses legacy amino address rules.
 *
 * @generated from message cosmos.crypto.multisig.LegacyAminoPubKey
 */
export class LegacyAminoPubKey extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint32 threshold = 1;
         */
        this.threshold = 0;
        /**
         * @generated from field: repeated google.protobuf.Any public_keys = 2;
         */
        this.publicKeys = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LegacyAminoPubKey().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LegacyAminoPubKey().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LegacyAminoPubKey().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LegacyAminoPubKey, a, b);
    }
}
LegacyAminoPubKey.runtime = proto3;
LegacyAminoPubKey.typeName = "cosmos.crypto.multisig.LegacyAminoPubKey";
LegacyAminoPubKey.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "threshold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "public_keys", kind: "message", T: Any, repeated: true },
]);
//# sourceMappingURL=keys_pb.js.map