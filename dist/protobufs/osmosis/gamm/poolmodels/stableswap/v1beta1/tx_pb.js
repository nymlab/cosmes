// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/gamm/poolmodels/stableswap/v1beta1/tx.proto (package osmosis.gamm.poolmodels.stableswap.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PoolParams } from "./stableswap_pool_pb.js";
import { Coin } from "../../../../../cosmos/base/v1beta1/coin_pb.js";
/**
 * ===================== MsgCreatePool
 *
 * @generated from message osmosis.gamm.poolmodels.stableswap.v1beta1.MsgCreateStableswapPool
 */
export class MsgCreateStableswapPool extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: repeated cosmos.base.v1beta1.Coin initial_pool_liquidity = 3;
         */
        this.initialPoolLiquidity = [];
        /**
         * @generated from field: repeated uint64 scaling_factors = 4;
         */
        this.scalingFactors = [];
        /**
         * @generated from field: string future_pool_governor = 5;
         */
        this.futurePoolGovernor = "";
        /**
         * @generated from field: string scaling_factor_controller = 6;
         */
        this.scalingFactorController = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateStableswapPool().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateStableswapPool().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateStableswapPool().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateStableswapPool, a, b);
    }
}
MsgCreateStableswapPool.runtime = proto3;
MsgCreateStableswapPool.typeName = "osmosis.gamm.poolmodels.stableswap.v1beta1.MsgCreateStableswapPool";
MsgCreateStableswapPool.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_params", kind: "message", T: PoolParams },
    { no: 3, name: "initial_pool_liquidity", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "scaling_factors", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 5, name: "future_pool_governor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "scaling_factor_controller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * Returns a poolID with custom poolName.
 *
 * @generated from message osmosis.gamm.poolmodels.stableswap.v1beta1.MsgCreateStableswapPoolResponse
 */
export class MsgCreateStableswapPoolResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 pool_id = 1;
         */
        this.poolId = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgCreateStableswapPoolResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgCreateStableswapPoolResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgCreateStableswapPoolResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgCreateStableswapPoolResponse, a, b);
    }
}
MsgCreateStableswapPoolResponse.runtime = proto3;
MsgCreateStableswapPoolResponse.typeName = "osmosis.gamm.poolmodels.stableswap.v1beta1.MsgCreateStableswapPoolResponse";
MsgCreateStableswapPoolResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
/**
 * Sender must be the pool's scaling_factor_governor in order for the tx to
 * succeed. Adjusts stableswap scaling factors.
 *
 * @generated from message osmosis.gamm.poolmodels.stableswap.v1beta1.MsgStableSwapAdjustScalingFactors
 */
export class MsgStableSwapAdjustScalingFactors extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: uint64 pool_id = 2;
         */
        this.poolId = protoInt64.zero;
        /**
         * @generated from field: repeated uint64 scaling_factors = 3;
         */
        this.scalingFactors = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgStableSwapAdjustScalingFactors().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgStableSwapAdjustScalingFactors().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgStableSwapAdjustScalingFactors().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgStableSwapAdjustScalingFactors, a, b);
    }
}
MsgStableSwapAdjustScalingFactors.runtime = proto3;
MsgStableSwapAdjustScalingFactors.typeName = "osmosis.gamm.poolmodels.stableswap.v1beta1.MsgStableSwapAdjustScalingFactors";
MsgStableSwapAdjustScalingFactors.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "scaling_factors", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
]);
/**
 * @generated from message osmosis.gamm.poolmodels.stableswap.v1beta1.MsgStableSwapAdjustScalingFactorsResponse
 */
export class MsgStableSwapAdjustScalingFactorsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgStableSwapAdjustScalingFactorsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgStableSwapAdjustScalingFactorsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgStableSwapAdjustScalingFactorsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgStableSwapAdjustScalingFactorsResponse, a, b);
    }
}
MsgStableSwapAdjustScalingFactorsResponse.runtime = proto3;
MsgStableSwapAdjustScalingFactorsResponse.typeName = "osmosis.gamm.poolmodels.stableswap.v1beta1.MsgStableSwapAdjustScalingFactorsResponse";
MsgStableSwapAdjustScalingFactorsResponse.fields = proto3.util.newFieldList(() => []);
//# sourceMappingURL=tx_pb.js.map