// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/exchange/v1beta1/genesis.proto (package injective.exchange.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AggregateSubaccountVolumeRecord, BinaryOptionsMarket, CampaignRewardPool, DenomDecimals, Deposit, DerivativeLimitOrder, DerivativeMarket, DerivativeMarketOrder, DerivativeMarketSettlementInfo, ExpiryFuturesMarketInfo, FeeDiscountSchedule, FeeDiscountTierTTL, MarketFeeMultiplier, MarketVolume, Params, PerpetualMarketFunding, PerpetualMarketInfo, Position, SpotLimitOrder, SpotMarket, SubaccountTradeNonce, TradeRecords, TradingRewardCampaignInfo } from "./exchange_pb.js";
/**
 * GenesisState defines the exchange module's genesis state.
 *
 * @generated from message injective.exchange.v1beta1.GenesisState
 */
export class GenesisState extends Message {
    constructor(data) {
        super();
        /**
         * spot_markets is an array containing the genesis trade pairs
         *
         * @generated from field: repeated injective.exchange.v1beta1.SpotMarket spot_markets = 2;
         */
        this.spotMarkets = [];
        /**
         * derivative_markets is an array containing the genesis derivative markets
         *
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeMarket derivative_markets = 3;
         */
        this.derivativeMarkets = [];
        /**
         * spot_orderbook defines the spot exchange limit orderbook active at genesis.
         *
         * @generated from field: repeated injective.exchange.v1beta1.SpotOrderBook spot_orderbook = 4;
         */
        this.spotOrderbook = [];
        /**
         * derivative_orderbook defines the derivative exchange limit orderbook active
         * at genesis.
         *
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeOrderBook derivative_orderbook = 5;
         */
        this.derivativeOrderbook = [];
        /**
         * balances defines the exchange users balances active at genesis.
         *
         * @generated from field: repeated injective.exchange.v1beta1.Balance balances = 6;
         */
        this.balances = [];
        /**
         * positions defines the exchange derivative positions at genesis
         *
         * @generated from field: repeated injective.exchange.v1beta1.DerivativePosition positions = 7;
         */
        this.positions = [];
        /**
         * subaccount_trade_nonces defines the subaccount trade nonces for the
         * subaccounts at genesis
         *
         * @generated from field: repeated injective.exchange.v1beta1.SubaccountNonce subaccount_trade_nonces = 8;
         */
        this.subaccountTradeNonces = [];
        /**
         * expiry_futures_market_info defines the market info for the expiry futures
         * markets at genesis
         *
         * @generated from field: repeated injective.exchange.v1beta1.ExpiryFuturesMarketInfoState expiry_futures_market_info_state = 9;
         */
        this.expiryFuturesMarketInfoState = [];
        /**
         * perpetual_market_info defines the market info for the perpetual derivative
         * markets at genesis
         *
         * @generated from field: repeated injective.exchange.v1beta1.PerpetualMarketInfo perpetual_market_info = 10;
         */
        this.perpetualMarketInfo = [];
        /**
         * perpetual_market_funding_state defines the funding state for the perpetual
         * derivative markets at genesis
         *
         * @generated from field: repeated injective.exchange.v1beta1.PerpetualMarketFundingState perpetual_market_funding_state = 11;
         */
        this.perpetualMarketFundingState = [];
        /**
         * derivative_market_settlement_scheduled defines the scheduled markets for
         * settlement at genesis
         *
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeMarketSettlementInfo derivative_market_settlement_scheduled = 12;
         */
        this.derivativeMarketSettlementScheduled = [];
        /**
         * sets spot markets as enabled
         *
         * @generated from field: bool is_spot_exchange_enabled = 13;
         */
        this.isSpotExchangeEnabled = false;
        /**
         * sets derivative markets as enabled
         *
         * @generated from field: bool is_derivatives_exchange_enabled = 14;
         */
        this.isDerivativesExchangeEnabled = false;
        /**
         * the current and upcoming trading reward campaign pools
         *
         * @generated from field: repeated injective.exchange.v1beta1.CampaignRewardPool trading_reward_pool_campaign_schedule = 16;
         */
        this.tradingRewardPoolCampaignSchedule = [];
        /**
         * the current trading reward account points
         *
         * @generated from field: repeated injective.exchange.v1beta1.TradingRewardCampaignAccountPoints trading_reward_campaign_account_points = 17;
         */
        this.tradingRewardCampaignAccountPoints = [];
        /**
         * the cached fee discount account tiers with TTL
         *
         * @generated from field: repeated injective.exchange.v1beta1.FeeDiscountAccountTierTTL fee_discount_account_tier_ttl = 19;
         */
        this.feeDiscountAccountTierTtl = [];
        /**
         * the fee discount paid by accounts in all buckets
         *
         * @generated from field: repeated injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts fee_discount_bucket_volume_accounts = 20;
         */
        this.feeDiscountBucketVolumeAccounts = [];
        /**
         * sets the first fee cycle as finished
         *
         * @generated from field: bool is_first_fee_cycle_finished = 21;
         */
        this.isFirstFeeCycleFinished = false;
        /**
         * the current and upcoming trading reward campaign pending pools
         *
         * @generated from field: repeated injective.exchange.v1beta1.CampaignRewardPool pending_trading_reward_pool_campaign_schedule = 22;
         */
        this.pendingTradingRewardPoolCampaignSchedule = [];
        /**
         * the pending trading reward account points
         *
         * @generated from field: repeated injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints pending_trading_reward_campaign_account_points = 23;
         */
        this.pendingTradingRewardCampaignAccountPoints = [];
        /**
         * the addresses opting out of trading rewards
         *
         * @generated from field: repeated string rewards_opt_out_addresses = 24;
         */
        this.rewardsOptOutAddresses = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.TradeRecords historical_trade_records = 25;
         */
        this.historicalTradeRecords = [];
        /**
         * binary_options_markets is an array containing the genesis binary options
         * markets
         *
         * @generated from field: repeated injective.exchange.v1beta1.BinaryOptionsMarket binary_options_markets = 26;
         */
        this.binaryOptionsMarkets = [];
        /**
         * binary_options_markets_scheduled_for_settlement contains the marketIDs of
         * binary options markets scheduled for next-block settlement
         *
         * @generated from field: repeated string binary_options_market_ids_scheduled_for_settlement = 27;
         */
        this.binaryOptionsMarketIdsScheduledForSettlement = [];
        /**
         * spot_market_ids_scheduled_to_force_close defines the scheduled markets for
         * forced closings at genesis
         *
         * @generated from field: repeated string spot_market_ids_scheduled_to_force_close = 28;
         */
        this.spotMarketIdsScheduledToForceClose = [];
        /**
         * denom_decimals defines the denom decimals for the exchange.
         *
         * @generated from field: repeated injective.exchange.v1beta1.DenomDecimals denom_decimals = 29;
         */
        this.denomDecimals = [];
        /**
         * conditional_derivative_orderbook contains conditional orderbooks for all
         * markets (both lmit and market conditional orders)
         *
         * @generated from field: repeated injective.exchange.v1beta1.ConditionalDerivativeOrderBook conditional_derivative_orderbooks = 30;
         */
        this.conditionalDerivativeOrderbooks = [];
        /**
         * market_fee_multipliers contains any non-default atomic order fee
         * multipliers
         *
         * @generated from field: repeated injective.exchange.v1beta1.MarketFeeMultiplier market_fee_multipliers = 31;
         */
        this.marketFeeMultipliers = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.OrderbookSequence orderbook_sequences = 32;
         */
        this.orderbookSequences = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.AggregateSubaccountVolumeRecord subaccount_volumes = 33;
         */
        this.subaccountVolumes = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.MarketVolume market_volumes = 34;
         */
        this.marketVolumes = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GenesisState, a, b);
    }
}
GenesisState.runtime = proto3;
GenesisState.typeName = "injective.exchange.v1beta1.GenesisState";
GenesisState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "spot_markets", kind: "message", T: SpotMarket, repeated: true },
    { no: 3, name: "derivative_markets", kind: "message", T: DerivativeMarket, repeated: true },
    { no: 4, name: "spot_orderbook", kind: "message", T: SpotOrderBook, repeated: true },
    { no: 5, name: "derivative_orderbook", kind: "message", T: DerivativeOrderBook, repeated: true },
    { no: 6, name: "balances", kind: "message", T: Balance, repeated: true },
    { no: 7, name: "positions", kind: "message", T: DerivativePosition, repeated: true },
    { no: 8, name: "subaccount_trade_nonces", kind: "message", T: SubaccountNonce, repeated: true },
    { no: 9, name: "expiry_futures_market_info_state", kind: "message", T: ExpiryFuturesMarketInfoState, repeated: true },
    { no: 10, name: "perpetual_market_info", kind: "message", T: PerpetualMarketInfo, repeated: true },
    { no: 11, name: "perpetual_market_funding_state", kind: "message", T: PerpetualMarketFundingState, repeated: true },
    { no: 12, name: "derivative_market_settlement_scheduled", kind: "message", T: DerivativeMarketSettlementInfo, repeated: true },
    { no: 13, name: "is_spot_exchange_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "is_derivatives_exchange_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "trading_reward_campaign_info", kind: "message", T: TradingRewardCampaignInfo },
    { no: 16, name: "trading_reward_pool_campaign_schedule", kind: "message", T: CampaignRewardPool, repeated: true },
    { no: 17, name: "trading_reward_campaign_account_points", kind: "message", T: TradingRewardCampaignAccountPoints, repeated: true },
    { no: 18, name: "fee_discount_schedule", kind: "message", T: FeeDiscountSchedule },
    { no: 19, name: "fee_discount_account_tier_ttl", kind: "message", T: FeeDiscountAccountTierTTL, repeated: true },
    { no: 20, name: "fee_discount_bucket_volume_accounts", kind: "message", T: FeeDiscountBucketVolumeAccounts, repeated: true },
    { no: 21, name: "is_first_fee_cycle_finished", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 22, name: "pending_trading_reward_pool_campaign_schedule", kind: "message", T: CampaignRewardPool, repeated: true },
    { no: 23, name: "pending_trading_reward_campaign_account_points", kind: "message", T: TradingRewardCampaignAccountPendingPoints, repeated: true },
    { no: 24, name: "rewards_opt_out_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 25, name: "historical_trade_records", kind: "message", T: TradeRecords, repeated: true },
    { no: 26, name: "binary_options_markets", kind: "message", T: BinaryOptionsMarket, repeated: true },
    { no: 27, name: "binary_options_market_ids_scheduled_for_settlement", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 28, name: "spot_market_ids_scheduled_to_force_close", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 29, name: "denom_decimals", kind: "message", T: DenomDecimals, repeated: true },
    { no: 30, name: "conditional_derivative_orderbooks", kind: "message", T: ConditionalDerivativeOrderBook, repeated: true },
    { no: 31, name: "market_fee_multipliers", kind: "message", T: MarketFeeMultiplier, repeated: true },
    { no: 32, name: "orderbook_sequences", kind: "message", T: OrderbookSequence, repeated: true },
    { no: 33, name: "subaccount_volumes", kind: "message", T: AggregateSubaccountVolumeRecord, repeated: true },
    { no: 34, name: "market_volumes", kind: "message", T: MarketVolume, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.OrderbookSequence
 */
export class OrderbookSequence extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 sequence = 1;
         */
        this.sequence = protoInt64.zero;
        /**
         * @generated from field: string market_id = 2;
         */
        this.marketId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OrderbookSequence().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OrderbookSequence().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OrderbookSequence().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OrderbookSequence, a, b);
    }
}
OrderbookSequence.runtime = proto3;
OrderbookSequence.typeName = "injective.exchange.v1beta1.OrderbookSequence";
OrderbookSequence.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.FeeDiscountAccountTierTTL
 */
export class FeeDiscountAccountTierTTL extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string account = 1;
         */
        this.account = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeeDiscountAccountTierTTL().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeeDiscountAccountTierTTL().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeeDiscountAccountTierTTL().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FeeDiscountAccountTierTTL, a, b);
    }
}
FeeDiscountAccountTierTTL.runtime = proto3;
FeeDiscountAccountTierTTL.typeName = "injective.exchange.v1beta1.FeeDiscountAccountTierTTL";
FeeDiscountAccountTierTTL.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tier_ttl", kind: "message", T: FeeDiscountTierTTL },
]);
/**
 * @generated from message injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts
 */
export class FeeDiscountBucketVolumeAccounts extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 bucket_start_timestamp = 1;
         */
        this.bucketStartTimestamp = protoInt64.zero;
        /**
         * @generated from field: repeated injective.exchange.v1beta1.AccountVolume account_volume = 2;
         */
        this.accountVolume = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FeeDiscountBucketVolumeAccounts().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FeeDiscountBucketVolumeAccounts().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FeeDiscountBucketVolumeAccounts().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FeeDiscountBucketVolumeAccounts, a, b);
    }
}
FeeDiscountBucketVolumeAccounts.runtime = proto3;
FeeDiscountBucketVolumeAccounts.typeName = "injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts";
FeeDiscountBucketVolumeAccounts.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket_start_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "account_volume", kind: "message", T: AccountVolume, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.AccountVolume
 */
export class AccountVolume extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string account = 1;
         */
        this.account = "";
        /**
         * @generated from field: string volume = 2;
         */
        this.volume = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new AccountVolume().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AccountVolume().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AccountVolume().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(AccountVolume, a, b);
    }
}
AccountVolume.runtime = proto3;
AccountVolume.typeName = "injective.exchange.v1beta1.AccountVolume";
AccountVolume.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "volume", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.TradingRewardCampaignAccountPoints
 */
export class TradingRewardCampaignAccountPoints extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string account = 1;
         */
        this.account = "";
        /**
         * @generated from field: string points = 2;
         */
        this.points = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TradingRewardCampaignAccountPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TradingRewardCampaignAccountPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TradingRewardCampaignAccountPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TradingRewardCampaignAccountPoints, a, b);
    }
}
TradingRewardCampaignAccountPoints.runtime = proto3;
TradingRewardCampaignAccountPoints.typeName = "injective.exchange.v1beta1.TradingRewardCampaignAccountPoints";
TradingRewardCampaignAccountPoints.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "points", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints
 */
export class TradingRewardCampaignAccountPendingPoints extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 reward_pool_start_timestamp = 1;
         */
        this.rewardPoolStartTimestamp = protoInt64.zero;
        /**
         * @generated from field: repeated injective.exchange.v1beta1.TradingRewardCampaignAccountPoints account_points = 2;
         */
        this.accountPoints = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TradingRewardCampaignAccountPendingPoints().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TradingRewardCampaignAccountPendingPoints().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TradingRewardCampaignAccountPendingPoints().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(TradingRewardCampaignAccountPendingPoints, a, b);
    }
}
TradingRewardCampaignAccountPendingPoints.runtime = proto3;
TradingRewardCampaignAccountPendingPoints.typeName = "injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints";
TradingRewardCampaignAccountPendingPoints.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "reward_pool_start_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "account_points", kind: "message", T: TradingRewardCampaignAccountPoints, repeated: true },
]);
/**
 * Spot Exchange Limit Orderbook
 *
 * @generated from message injective.exchange.v1beta1.SpotOrderBook
 */
export class SpotOrderBook extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: bool isBuySide = 2;
         */
        this.isBuySide = false;
        /**
         * @generated from field: repeated injective.exchange.v1beta1.SpotLimitOrder orders = 3;
         */
        this.orders = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SpotOrderBook().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SpotOrderBook().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SpotOrderBook().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SpotOrderBook, a, b);
    }
}
SpotOrderBook.runtime = proto3;
SpotOrderBook.typeName = "injective.exchange.v1beta1.SpotOrderBook";
SpotOrderBook.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "isBuySide", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "orders", kind: "message", T: SpotLimitOrder, repeated: true },
]);
/**
 * Derivative Exchange Limit Orderbook
 *
 * @generated from message injective.exchange.v1beta1.DerivativeOrderBook
 */
export class DerivativeOrderBook extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: bool isBuySide = 2;
         */
        this.isBuySide = false;
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeLimitOrder orders = 3;
         */
        this.orders = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DerivativeOrderBook().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DerivativeOrderBook().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DerivativeOrderBook().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DerivativeOrderBook, a, b);
    }
}
DerivativeOrderBook.runtime = proto3;
DerivativeOrderBook.typeName = "injective.exchange.v1beta1.DerivativeOrderBook";
DerivativeOrderBook.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "isBuySide", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "orders", kind: "message", T: DerivativeLimitOrder, repeated: true },
]);
/**
 * Orderbook containing limit & market conditional orders
 *
 * @generated from message injective.exchange.v1beta1.ConditionalDerivativeOrderBook
 */
export class ConditionalDerivativeOrderBook extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeLimitOrder limit_buy_orders = 2;
         */
        this.limitBuyOrders = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeMarketOrder market_buy_orders = 3;
         */
        this.marketBuyOrders = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeLimitOrder limit_sell_orders = 4;
         */
        this.limitSellOrders = [];
        /**
         * @generated from field: repeated injective.exchange.v1beta1.DerivativeMarketOrder market_sell_orders = 5;
         */
        this.marketSellOrders = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ConditionalDerivativeOrderBook().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ConditionalDerivativeOrderBook().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ConditionalDerivativeOrderBook().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ConditionalDerivativeOrderBook, a, b);
    }
}
ConditionalDerivativeOrderBook.runtime = proto3;
ConditionalDerivativeOrderBook.typeName = "injective.exchange.v1beta1.ConditionalDerivativeOrderBook";
ConditionalDerivativeOrderBook.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit_buy_orders", kind: "message", T: DerivativeLimitOrder, repeated: true },
    { no: 3, name: "market_buy_orders", kind: "message", T: DerivativeMarketOrder, repeated: true },
    { no: 4, name: "limit_sell_orders", kind: "message", T: DerivativeLimitOrder, repeated: true },
    { no: 5, name: "market_sell_orders", kind: "message", T: DerivativeMarketOrder, repeated: true },
]);
/**
 * @generated from message injective.exchange.v1beta1.Balance
 */
export class Balance extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string subaccount_id = 1;
         */
        this.subaccountId = "";
        /**
         * @generated from field: string denom = 2;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Balance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Balance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Balance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Balance, a, b);
    }
}
Balance.runtime = proto3;
Balance.typeName = "injective.exchange.v1beta1.Balance";
Balance.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deposits", kind: "message", T: Deposit },
]);
/**
 * @generated from message injective.exchange.v1beta1.DerivativePosition
 */
export class DerivativePosition extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string subaccount_id = 1;
         */
        this.subaccountId = "";
        /**
         * @generated from field: string market_id = 2;
         */
        this.marketId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DerivativePosition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DerivativePosition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DerivativePosition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(DerivativePosition, a, b);
    }
}
DerivativePosition.runtime = proto3;
DerivativePosition.typeName = "injective.exchange.v1beta1.DerivativePosition";
DerivativePosition.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "position", kind: "message", T: Position },
]);
/**
 * @generated from message injective.exchange.v1beta1.SubaccountNonce
 */
export class SubaccountNonce extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string subaccount_id = 1;
         */
        this.subaccountId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SubaccountNonce().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SubaccountNonce().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SubaccountNonce().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SubaccountNonce, a, b);
    }
}
SubaccountNonce.runtime = proto3;
SubaccountNonce.typeName = "injective.exchange.v1beta1.SubaccountNonce";
SubaccountNonce.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "subaccount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subaccount_trade_nonce", kind: "message", T: SubaccountTradeNonce },
]);
/**
 * @generated from message injective.exchange.v1beta1.ExpiryFuturesMarketInfoState
 */
export class ExpiryFuturesMarketInfoState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ExpiryFuturesMarketInfoState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExpiryFuturesMarketInfoState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExpiryFuturesMarketInfoState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ExpiryFuturesMarketInfoState, a, b);
    }
}
ExpiryFuturesMarketInfoState.runtime = proto3;
ExpiryFuturesMarketInfoState.typeName = "injective.exchange.v1beta1.ExpiryFuturesMarketInfoState";
ExpiryFuturesMarketInfoState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "market_info", kind: "message", T: ExpiryFuturesMarketInfo },
]);
/**
 * @generated from message injective.exchange.v1beta1.PerpetualMarketFundingState
 */
export class PerpetualMarketFundingState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string market_id = 1;
         */
        this.marketId = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PerpetualMarketFundingState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PerpetualMarketFundingState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PerpetualMarketFundingState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PerpetualMarketFundingState, a, b);
    }
}
PerpetualMarketFundingState.runtime = proto3;
PerpetualMarketFundingState.typeName = "injective.exchange.v1beta1.PerpetualMarketFundingState";
PerpetualMarketFundingState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "funding", kind: "message", T: PerpetualMarketFunding },
]);
//# sourceMappingURL=genesis_pb.js.map