// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/bank/v1beta1/genesis.proto (package cosmos.bank.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
import { Metadata, Params, SendEnabled } from "./bank_pb.js";
import { Coin } from "../../base/v1beta1/coin_pb.js";
/**
 * GenesisState defines the bank module's genesis state.
 *
 * @generated from message cosmos.bank.v1beta1.GenesisState
 */
export class GenesisState extends Message {
    constructor(data) {
        super();
        /**
         * balances is an array containing the balances of all the accounts.
         *
         * @generated from field: repeated cosmos.bank.v1beta1.Balance balances = 2;
         */
        this.balances = [];
        /**
         * supply represents the total supply. If it is left empty, then supply will be calculated based on the provided
         * balances. Otherwise, it will be used to validate that the sum of the balances equals this amount.
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin supply = 3;
         */
        this.supply = [];
        /**
         * denom_metadata defines the metadata of the different coins.
         *
         * @generated from field: repeated cosmos.bank.v1beta1.Metadata denom_metadata = 4;
         */
        this.denomMetadata = [];
        /**
         * send_enabled defines the denoms where send is enabled or disabled.
         *
         * Since: cosmos-sdk 0.47
         *
         * @generated from field: repeated cosmos.bank.v1beta1.SendEnabled send_enabled = 5;
         */
        this.sendEnabled = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new GenesisState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new GenesisState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new GenesisState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(GenesisState, a, b);
    }
}
GenesisState.runtime = proto3;
GenesisState.typeName = "cosmos.bank.v1beta1.GenesisState";
GenesisState.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "balances", kind: "message", T: Balance, repeated: true },
    { no: 3, name: "supply", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "denom_metadata", kind: "message", T: Metadata, repeated: true },
    { no: 5, name: "send_enabled", kind: "message", T: SendEnabled, repeated: true },
]);
/**
 * Balance defines an account address and balance pair used in the bank module's
 * genesis state.
 *
 * @generated from message cosmos.bank.v1beta1.Balance
 */
export class Balance extends Message {
    constructor(data) {
        super();
        /**
         * address is the address of the balance holder.
         *
         * @generated from field: string address = 1;
         */
        this.address = "";
        /**
         * coins defines the different coins this balance holds.
         *
         * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 2;
         */
        this.coins = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Balance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Balance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Balance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Balance, a, b);
    }
}
Balance.runtime = proto3;
Balance.typeName = "cosmos.bank.v1beta1.Balance";
Balance.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "coins", kind: "message", T: Coin, repeated: true },
]);
//# sourceMappingURL=genesis_pb.js.map