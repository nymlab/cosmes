// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/base/kv/v1beta1/kv.proto (package cosmos.base.kv.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * Pairs defines a repeated slice of Pair objects.
 *
 * @generated from message cosmos.base.kv.v1beta1.Pairs
 */
export class Pairs extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated cosmos.base.kv.v1beta1.Pair pairs = 1;
         */
        this.pairs = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Pairs().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Pairs().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Pairs().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Pairs, a, b);
    }
}
Pairs.runtime = proto3;
Pairs.typeName = "cosmos.base.kv.v1beta1.Pairs";
Pairs.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "pairs", kind: "message", T: Pair, repeated: true },
]);
/**
 * Pair defines a key/value bytes tuple.
 *
 * @generated from message cosmos.base.kv.v1beta1.Pair
 */
export class Pair extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: bytes key = 1;
         */
        this.key = new Uint8Array(0);
        /**
         * @generated from field: bytes value = 2;
         */
        this.value = new Uint8Array(0);
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Pair().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Pair().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Pair().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Pair, a, b);
    }
}
Pair.runtime = proto3;
Pair.typeName = "cosmos.base.kv.v1beta1.Pair";
Pair.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
//# sourceMappingURL=kv_pb.js.map