// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/ibchooks/tx.proto (package osmosis.ibchooks, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * @generated from message osmosis.ibchooks.MsgEmitIBCAck
 */
export class MsgEmitIBCAck extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender = 1;
         */
        this.sender = "";
        /**
         * @generated from field: uint64 packet_sequence = 2;
         */
        this.packetSequence = protoInt64.zero;
        /**
         * @generated from field: string channel = 3;
         */
        this.channel = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgEmitIBCAck().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgEmitIBCAck().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgEmitIBCAck().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgEmitIBCAck, a, b);
    }
}
MsgEmitIBCAck.runtime = proto3;
MsgEmitIBCAck.typeName = "osmosis.ibchooks.MsgEmitIBCAck";
MsgEmitIBCAck.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "packet_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * @generated from message osmosis.ibchooks.MsgEmitIBCAckResponse
 */
export class MsgEmitIBCAckResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string contract_result = 1;
         */
        this.contractResult = "";
        /**
         * @generated from field: string ibc_ack = 2;
         */
        this.ibcAck = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MsgEmitIBCAckResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MsgEmitIBCAckResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MsgEmitIBCAckResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MsgEmitIBCAckResponse, a, b);
    }
}
MsgEmitIBCAckResponse.runtime = proto3;
MsgEmitIBCAckResponse.typeName = "osmosis.ibchooks.MsgEmitIBCAckResponse";
MsgEmitIBCAckResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ibc_ack", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
//# sourceMappingURL=tx_pb.js.map